ACL#allow_addr?	(addr)
ACL#allow_socket?	(soc)
ACL#install_list	(list)
ACL.new	(list=nil,order=DENY_ALLOW)
ARGF.binmode	->self
ARGF.bytes	->Enumerator
ARGF.chars	{|c|...}->self	->Enumerator
ARGF.close	->self
ARGF.closed?	->bool
ARGF.each	(rs=$/){|line|...}->self	(rs=$/)->Enumerator
ARGF.each_byte	{|char|...}->self	->Enumerator
ARGF.each_char	{|c|...}->self	->Enumerator
ARGF.each_line	(rs=$/){|line|...}->self	(rs=$/)->Enumerator
ARGF.eof	->bool	?->bool
ARGF.eof?	->bool
ARGF.file	->IO
ARGF.filename	->String
ARGF.fileno	->Integer
ARGF.getbyte	->Integer|nil
ARGF.getc	->Integer|nil
ARGF.gets	->String|nil
ARGF.lineno	->Integer
ARGF.lineno=	(number)
ARGF.lines	(rs=$/)->Enumerator
ARGF.path	->String
ARGF.pos	->Integer
ARGF.pos=	(n)
ARGF.read	(length=nil,str=nil)->String
ARGF.readbyte	->Integer
ARGF.readchar	->Integer
ARGF.readline	->String
ARGF.readlines	(rs=$/)->[String]
ARGF.readpartial	(length,str=nil)
ARGF.rewind	->0
ARGF.seek	(offset,whence=IO::SEEK_SET)->0
ARGF.skip	->self
ARGF.tell	->Integer
ARGF.to_a	(rs=$/)->[String]
ARGF.to_i	->Integer
ARGF.to_io	->IO
ARGF.to_s	->String
Abbrev.abbrev	(words,pattern=nil)->Hash
Array#&	(other)->Array
Array#*	(times)->Array	(sep)->String
Array#+	(other)->Array
Array#-	(other)->Array
Array#<<	(obj)->self
Array#<=>	(other)->-1|0|1
Array#==	(other)->bool
Array#[]	(nth)->object|nil	(range)->Array|nil	(start,length)->Array|nil
Array#[]=	(nth,val)	(range,val)	(start,length,val)
Array#abbrev	(pattern=nil)->Hash
Array#assoc	(key)->Array|nil
Array#at	(pos)->object
Array#clear	->self
Array#clone	->Array
Array#collect!	{|item|..}->self	->Enumerator
Array#combination	(n){|c|block}->Array	(n)->Enumerator
Array#compact	->Array	!->self|nil
Array#compact!	->self|nil
Array#concat	(other)->self
Array#cycle	{|obj|block}
Array#dclone	
Array#delete	(val)->object|nil	(val){...}->object
Array#delete_at	(pos)->object|nil
Array#delete_if	{|x|...}->self	->Enumerator
Array#dup	->Array
Array#each	{|item|....}->self	->Enumerator
Array#each_index	{|index|....}->self	->Enumerator
Array#empty?	->bool
Array#eql?	(other)->bool
Array#fetch	(nth)->object	(nth,ifnone)->object	(nth){|nth|...}->object
Array#fill	(val)->self	{|index|...}->self	(val,start,length=nil)->self	(val,range)->self	(start,length=nil){|index|...}->self	(range){|index|...}->self
Array#first	->object|nil	(n)->Array
Array#flatten	(lv=nil)->Array	!(lv=nil)->self|nil
Array#flatten!	(lv=nil)->self|nil
Array#hash	->Integer
Array#include?	(val)->bool
Array#index	(val)->Integer|nil	{|item|...}->Integer|nil
Array#indexes	(*index)
Array#indices	(*index)
Array#insert	(nth,*val)->self
Array#inspect	->String
Array#join	(sep=$,)->String
Array#last	->object|nil	(n)->Array
Array#length	->Integer
Array#map!	{|item|..}->self	->Enumerator
Array#pack	(template)->String
Array#permutation	(n){|p|block}->Array	(n)->Enumerator
Array#pop	(n=1)->Array|nil
Array#product	(*lists)->Array
Array#push	(*obj)->self
Array#rassoc	(obj)->Array|nil
Array#reject!	{|x|...}->self|nil	->Enumerator
Array#replace	(another)->self
Array#reverse	->Array	!->self
Array#reverse!	->self
Array#reverse_each	{|item|...}->self	->Enumerator
Array#rindex	(val)->Integer|nil	{|item|...}->Integer|nil
Array#sample	->object	(n)->Array
Array#shelljoin	->String
Array#shift	(n=1)->Array|nil
Array#shuffle	->Array
Array#shuffle!	->self
Array#size	->Integer
Array#slice	(nth)->object|nil	(pos,len)->Array|nil	(range)->Array|nil
Array#slice!	(nth)->object|nil	(start,len)->Array|nil	(range)->Array|nil
Array#sort	->Array	!->self	{|a,b|...}->Array	!{|a,b|...}->self
Array#sort!	->self	{|a,b|...}->self
Array#to_a	->Array
Array#to_ary	->self
Array#to_s	->String
Array#transpose	->Array
Array#uniq	->Array	!->self|nil
Array#uniq!	->self|nil
Array#unshift	(*obj)->self
Array#values_at	(*index)->Array|nil
Array#zip	(*lists)->[[object]]	(*lists){|v1,v2,...|...}
Array#|	(other)->Array
Array.[]	(*item)->Array
Array.new	(size=0,val=nil)->Array	(ary)->Array	(size){|index|...}->Array
Array.try_convert	(obj)->Array|nil
Base64.decode64	(str)->String
Base64.encode64	(bin)->String
Base64.strict_decode64	(str)->String
Base64.strict_encode64	(bin)->String
Base64.urlsafe_decode64	(str)->String
Base64.urlsafe_encode64	(bin)->String
BasicObject#!	->bool
BasicObject#!=	(other)->bool
BasicObject#==	(other)->bool
BasicObject#__send__	(name,*args)->object	(name,*args){....}->object
BasicObject#equal?	(other)->bool
BasicSocket#do_not_reverse_lookup	
BasicSocket#do_not_reverse_lookup=	(bool)
BasicSocket#getpeername	->String
BasicSocket#getsockname	->String
BasicSocket#getsockopt	(level,optname)->String
BasicSocket#recv	(maxlen,flags=0)->String
BasicSocket#recv_nonblock	(maxlen,flags=0)->String
BasicSocket#send	(mesg,flags,dest_sockaddr=nil)->Fixnum
BasicSocket#setsockopt	(level,optname,optval)->0
BasicSocket#shutdown	(how=Socket::SHUT_RDWR)->0
BasicSocket.do_not_reverse_lookup	->bool
BasicSocket.do_not_reverse_lookup=	(bool)
BasicSocket.for_fd	(fd)->Object
Benchmark.benchmark	(caption="",label_width=nil,fmtstr=nil,*labels){|rep|...}->bool
Benchmark.bm	(label_width=0,*labels){|rep|...}->bool
Benchmark.bmbm	(width=0){|job|...}->[Benchmark::Tms]
Benchmark.measure	(label=""){...}->Benchmark::Tms
Benchmark.realtime	{...}->Float
Benchmark::Job#item	(label=""){...}->self
Benchmark::Job#list	->[String,Proc]
Benchmark::Job#report	(label=""){...}->self
Benchmark::Job#width	->Integer
Benchmark::Job.new	(width)->Benchmark::Job
Benchmark::Report#item	(label="",*fmt){...}->Benchmark::Tms
Benchmark::Report#report	(label="",*fmt){...}->Benchmark::Tms
Benchmark::Report.new	(width=0,fmtstr=nil)->Benchmark::Report
Benchmark::Tms#*	(x)->Benchmark::Tms
Benchmark::Tms#+	(x)->Benchmark::Tms
Benchmark::Tms#-	(x)->Benchmark::Tms
Benchmark::Tms#/	(x)->Benchmark::Tms
Benchmark::Tms#add	{...}->Benchmark::Tms
Benchmark::Tms#add!	{...}->self
Benchmark::Tms#cstime	->Float
Benchmark::Tms#cutime	->Float
Benchmark::Tms#format	(fmtstr=nil,*args)
Benchmark::Tms#label	->String
Benchmark::Tms#memberwise	(op,x)->Benchmark::Tms
Benchmark::Tms#real	->Float
Benchmark::Tms#stime	->Float
Benchmark::Tms#to_a	->Array
Benchmark::Tms#to_s	->String
Benchmark::Tms#total	->Float
Benchmark::Tms#utime	->Float
Benchmark::Tms.new	(utime=0.0,stime=0.0,cutime=0.0,cstime=0.0,real=0.0,label=nil)->Benchmark::Tms
BigDecimal#%	(n)
BigDecimal#*	(other)
BigDecimal#**	(n)
BigDecimal#+	(other)
BigDecimal#+@	
BigDecimal#-	(other)
BigDecimal#-@	
BigDecimal#/	(other)
BigDecimal#<	(other)
BigDecimal#<=	(other)
BigDecimal#<=>	(other)
BigDecimal#==	(other)
BigDecimal#===	(other)
BigDecimal#>	(other)
BigDecimal#>=	(other)
BigDecimal#_dump	
BigDecimal#abs	
BigDecimal#add	(b,n)
BigDecimal#ceil	([n])
BigDecimal#coerce	
BigDecimal#div	(b[,n])
BigDecimal#divmod	(n)
BigDecimal#eql?	
BigDecimal#exponent	
BigDecimal#finite?	
BigDecimal#fix	
BigDecimal#floor	([n])
BigDecimal#frac	
BigDecimal#hash	
BigDecimal#infinite?	
BigDecimal#inspect	
BigDecimal#modulo	(n)
BigDecimal#mult	(b,n)
BigDecimal#nan?	
BigDecimal#nonzero?	
BigDecimal#power	(n)
BigDecimal#precs	
BigDecimal#quo	(n)
BigDecimal#remainder	(n)
BigDecimal#round	(n[,b])
BigDecimal#sign	
BigDecimal#split	
BigDecimal#sqrt	(n)
BigDecimal#sub	(b,n)
BigDecimal#to_digits	->String
BigDecimal#to_f	
BigDecimal#to_i	
BigDecimal#to_int	
BigDecimal#to_r	
BigDecimal#to_s	([n])
BigDecimal#truncate	
BigDecimal#zero?	
BigDecimal._load	(str)
BigDecimal.double_fig	
BigDecimal.limit	([n])
BigDecimal.mode	(s[,v])
BigDecimal.new	(s[,n])
BigDecimal.ver	
BigMath#E	(prec)->BigDecimal
BigMath#PI	(prec)->BigDecimal
BigMath#atan	(x,prec)->BigDecimal
BigMath#cos	(x,prec)->BigDecimal
BigMath#exp	(x,prec)->BigDecimal
BigMath#log	(x,prec)->BigDecimal
BigMath#sin	(x,prec)->BigDecimal
BigMath#sqrt	(x,prec)->BigDecimal
Bignum#%	(other)->Fixnum|Bignum|Float
Bignum#&	(other)->Fixnum|Bignum
Bignum#*	(other)->Fixnum|Bignum|Float
Bignum#**	(other)->Fixnum|Bignum|Float
Bignum#+	(other)->Fixnum|Bignum|Float
Bignum#-	(other)->Fixnum|Bignum|Float
Bignum#/	(other)->Fixnum|Bignum|Float	(other)
Bignum#<<	(bits)->Fixnum|Bignum
Bignum#<=>	(other)->Fixnum|nil
Bignum#==	(other)->bool
Bignum#>>	(bits)->Fixnum|Bignum
Bignum#[]	(nth)->Fixnum
Bignum#^	(other)->Fixnum|Bignum
Bignum#size	->Fixnum
Bignum#to_f	->Float
Bignum#|	(other)->Fixnum|Bignum
Bignum#~	->Fixnum|Bignum
Binding#eval	(expr,fname=__FILE__,lineno=1)->object
CGI#header	(options="text/html")->string
CGI#out	(options="text/html"){....}
CGI#print	(*strings)
CGI.escape	(string)->string
CGI.escapeElement	(string,*elements)->string
CGI.escapeHTML	(string)->string
CGI.parse	(query)->object
CGI.pretty	(string,shift="")->string
CGI.rfc1123_date	(time)->string
CGI.unescape	(string)->string
CGI.unescapeElement	(string,*element)->string
CGI.unescapeHTML	(string)->string
CGI::Cookie#domain	
CGI::Cookie#domain=	(value)
CGI::Cookie#expires	
CGI::Cookie#expires=	(value)
CGI::Cookie#name	
CGI::Cookie#name=	(value)
CGI::Cookie#path	
CGI::Cookie#path=	(value)
CGI::Cookie#secure	
CGI::Cookie#secure=	(val)
CGI::Cookie#to_s	
CGI::Cookie#value	
CGI::Cookie#value=	(value)
CGI::Cookie.new	(name="",*value)
CGI::Cookie.parse	(raw_cookie)
CGI::Html3#doctype	
CGI::Html3#element_init	
CGI::Html4#doctype	
CGI::Html4#element_init	
CGI::Html4Fr#doctype	
CGI::Html4Fr#element_init	
CGI::Html4Tr#doctype	
CGI::Html4Tr#element_init	
CGI::HtmlExtension#a	(href="")
CGI::HtmlExtension#base	(href="")
CGI::HtmlExtension#blockquote	(cite=nil)
CGI::HtmlExtension#caption	(align=nil)
CGI::HtmlExtension#checkbox	(name="",value=nil,checked=nil)
CGI::HtmlExtension#checkbox_group	(name="",*values)
CGI::HtmlExtension#file_field	(name="",size=20,maxlength=nil)
CGI::HtmlExtension#form	(method="post",action=nil,enctype="application/x-www-form-urlencoded")
CGI::HtmlExtension#hidden	(name="",value=nil)
CGI::HtmlExtension#html	(attributes={})
CGI::HtmlExtension#image_button	(src="",name=nil,alt=nil)
CGI::HtmlExtension#img	(src="",alt="",width=nil,height=nil)
CGI::HtmlExtension#multipart_form	(action=nil,enctype="multipart/form-data")
CGI::HtmlExtension#password_field	(name="",value=nil,size=40,maxlength=nil)
CGI::HtmlExtension#popup_menu	(name="",*values)
CGI::HtmlExtension#radio_button	(name="",value=nil,checked=nil)
CGI::HtmlExtension#radio_group	(name="",*values)
CGI::HtmlExtension#reset	(value=nil,name=nil)
CGI::HtmlExtension#scrolling_list	(name="",*values)
CGI::HtmlExtension#submit	(value=nil,name=nil)
CGI::HtmlExtension#text_field	(name="",value=nil,size=40,maxlength=nil)
CGI::HtmlExtension#textarea	(name="",cols=70,rows=10)
CGI::QueryExtension#[]	(key)
CGI::QueryExtension#accept	
CGI::QueryExtension#accept_charset	
CGI::QueryExtension#accept_encoding	
CGI::QueryExtension#accept_language	
CGI::QueryExtension#auth_type	
CGI::QueryExtension#cache_control	
CGI::QueryExtension#content_length	
CGI::QueryExtension#content_type	
CGI::QueryExtension#cookies	
CGI::QueryExtension#cookies=	(value)
CGI::QueryExtension#from	
CGI::QueryExtension#gateway_interface	
CGI::QueryExtension#has_key?	(*args)
CGI::QueryExtension#host	
CGI::QueryExtension#include?	(*args)
CGI::QueryExtension#key?	(*args)
CGI::QueryExtension#keys	(*args)
CGI::QueryExtension#multipart?	
CGI::QueryExtension#negotiate	
CGI::QueryExtension#params	
CGI::QueryExtension#params=	(hash)
CGI::QueryExtension#path_info	
CGI::QueryExtension#path_translated	
CGI::QueryExtension#pragma	
CGI::QueryExtension#query_string	
CGI::QueryExtension#raw_cookie	
CGI::QueryExtension#raw_cookie2	
CGI::QueryExtension#referer	
CGI::QueryExtension#remote_addr	
CGI::QueryExtension#remote_host	
CGI::QueryExtension#remote_ident	
CGI::QueryExtension#remote_user	
CGI::QueryExtension#request_method	
CGI::QueryExtension#script_name	
CGI::QueryExtension#server_name	
CGI::QueryExtension#server_port	
CGI::QueryExtension#server_protocol	
CGI::QueryExtension#server_software	
CGI::QueryExtension#user_agent	
CGI::QueryExtension::Value#[]	(idx,*args)
CGI::QueryExtension::Value#first	
CGI::QueryExtension::Value#last	
CGI::QueryExtension::Value#set_params	(params)
CGI::QueryExtension::Value#to_a	
CGI::QueryExtension::Value#to_ary	
CGI::Session#[]	(key)
CGI::Session#[]=	(key,val)
CGI::Session#close	
CGI::Session#delete	
CGI::Session#new_session	
CGI::Session#session_id	
CGI::Session#update	
CGI::Session.callback	(dbman)
CGI::Session.new	(cgi[,aHash])
CGI::Session::PStore#close	
CGI::Session::PStore#delete	
CGI::Session::PStore#restore	
CGI::Session::PStore#update	
CGI::Session::PStore.new	(session,option={})
CGI::TagMaker#nOE_element_def	(element,append=nil)
CGI::TagMaker#nO_element_def	(element)
CGI::TagMaker#nn_element_def	(element)
CSV.foreach	(path,rs=nil){|row|...}
CSV.generate	(path,fs=nil,rs=nil)->CSV::BasicWriter	(path,fs=nil,rs=nil){|writer|...}
CSV.generate_line	(row,fs=nil,rs=nil)->String	(row,fs=nil,rs=nil){|s|...}
CSV.open	(path,mode,fs=nil,rs=nil){|row|...}	(path,mode,fs=nil,rs=nil)->CSV::Reader	(path,mode,fs=nil,rs=nil)->CSV::Writer
CSV.parse	(str_or_readable,fs=nil,rs=nil)->Array	(str_or_readable,fs=nil,rs=nil){|rows|...}
CSV.parse_line	(src,fs=nil,rs=nil)->Array	(src,fs=nil,rs=nil){|row|...}
CSV.read	(path,length=nil,offset=nil)->Array
CSV.readlines	(path,rs=nil)->Array
CSV::IOBuf#close	
CSV::IOBuf#new	(s)->self
CSV::IOBuf#read	(size)
CSV::IOBuf#terminate	
CSV::IOReader#close_on_terminate	->True
CSV::IOReader#get_row	(row)->Fixnum
CSV::IOReader#terminate	
CSV::IOReader.new	(io,fs=',',rs=nil)->CSV::IOReader
CSV::Reader#close	
CSV::Reader#each	{|row|...}
CSV::Reader#get_row	(row)
CSV::Reader#initialize	(dev)
CSV::Reader#shift	->Array
CSV::Reader#terminate	
CSV::Reader.create	(str_or_readable,fs=',',rs=nil)->CSV::StringReader
CSV::Reader.parse	(str_or_readable,fs=',',rs=nil)->CSV::StringReader	(str_or_readable,fs=',',rs=nil){|row|...}
CSV::StreamBuf#[]	(idx,n=nil)->String
CSV::StreamBuf#add_buf	->bool
CSV::StreamBuf#buf_size	(idx)->Fixnum
CSV::StreamBuf#drop	(n)->Fixnum
CSV::StreamBuf#idx_is_eos?	(idx)
CSV::StreamBuf#is_eos?	->bool
CSV::StreamBuf#read	(size)->[]
CSV::StreamBuf#rel_buf	->bool
CSV::StreamBuf#terminate	
CSV::StreamBuf.new	->self
CSV::StringReader#get_row	(row)->Fixnum
CSV::StringReader.new	(string,fs=',',rs=nil)->CSV::StringReader
CSV::Writer#<<	(row)->CSV::BasicWriter
CSV::Writer#add_row	(row)->CSV::BasicWriter
CSV::Writer#close	
CSV::Writer#terminate	
CSV::Writer.create	(str_or_writable,fs=',',rs=nil)->CSV::BasicWriter
CSV::Writer.generate	(str_or_writable,fs=',',rs=nil)->CSV::BasicWriter	(str_or_writable,fs=',',rs=nil){|row|...}
Class#_load	(str)->Class
Class#allocate	->object
Class#inherited	(subclass)
Class#json_creatable?	->bool
Class#new	(*args,&block)->object
Class#superclass	->Class|nil
Class#to_yaml	(opts={})
Class.new	(superclass=Object)->Class	(superclass=Object){|klass|...}->Class
Comparable#<	(other)->bool
Comparable#<=	(other)->bool
Comparable#==	(other)->bool|nil
Comparable#>	(other)->bool
Comparable#>=	(other)->bool
Comparable#between?	(min,max)->bool
Complex#*	(other)
Complex#**	(other)
Complex#+	(other)
Complex#-	(other)
Complex#-@	
Complex#/	(other)
Complex#==	(other)
Complex#abs	
Complex#abs2	
Complex#angle	
Complex#arg	
Complex#coerce	(other)
Complex#conj	
Complex#conjugate	
Complex#denominator	
Complex#eql?	
Complex#fdiv	
Complex#hash	
Complex#imag	
Complex#imaginary	
Complex#inspect	
Complex#magnitude	
Complex#marshal_dump	
Complex#marshal_load	
Complex#numerator	
Complex#phase	
Complex#polar	
Complex#quo	(other)
Complex#real	
Complex#real?	
Complex#rect	
Complex#rectangular	
Complex#to_f	
Complex#to_i	
Complex#to_r	
Complex#to_s	
Complex.polar	(r,theta)
Complex.rect	
Complex.rectangular	
ConditionVariable#broadcast	
ConditionVariable#signal	
ConditionVariable#wait	(mutex)
ConditionVariable.new	
Config.expand	(val)
Continuation#[]	(*ret)
Continuation#call	(*ret)
Coverage.result	->Hash
Coverage.start	
Curses.ESCDELAY	->Integer
Curses.ESCDELAY=	(val)
Curses.TABSIZE	->Integer
Curses.TABSIZE=	(val)
Curses.addch	(ch)
Curses.addstr	(str)
Curses.attroff	(attrs)
Curses.attron	(attron)
Curses.attrset	(attrs)
Curses.beep	
Curses.bkgd	(ch)
Curses.bkgdset	(ch)
Curses.can_change_color?	
Curses.cbreak	
Curses.clear	
Curses.close_screen	
Curses.closed?	->bool
Curses.clrtoeol	
Curses.color_content	(color)
Curses.color_pair	(attr)
Curses.cols	
Curses.crmode	
Curses.curs_set	(visibility)
Curses.def_prog_mode	
Curses.delch	
Curses.deleteln	
Curses.doupdate	
Curses.echo	
Curses.flash	
Curses.getch	
Curses.getmouse	
Curses.getstr	
Curses.has_colors?	
Curses.inch	
Curses.init_color	(color,r,g,b)
Curses.init_pair	(pair,f,b)
Curses.init_screen	->Curses::Window
Curses.insch	(ch)
Curses.insertln	
Curses.keyname	(c)
Curses.lines	
Curses.mouseinterval	(interval)
Curses.mousemask	(mask)
Curses.nl	
Curses.nocbreak	
Curses.nocrmode	
Curses.noecho	
Curses.nonl	
Curses.noraw	
Curses.pair_content	(pair)
Curses.pair_number	(attrs)
Curses.raw	
Curses.refresh	
Curses.reset_prog_mode	
Curses.resize	(lin,col)
Curses.resizeterm	(lin,col)
Curses.scrl	(n)
Curses.setpos	(y,x)
Curses.setscrreg	(top,bottom)
Curses.standend	
Curses.standout	
Curses.start_color	
Curses.stdscr	->Curses::Window
Curses.timeout=	
Curses.ungetch	(ch)
Curses.ungetmouse	(mevent)
Curses.use_default_colors	
Curses::MouseEvent#bstate	->Integer
Curses::MouseEvent#eid	->Integer
Curses::MouseEvent#x	->Integer
Curses::MouseEvent#y	->Integer
Curses::MouseEvent#z	->Integer
Curses::Window#<<	(str)
Curses::Window#addch	(ch)
Curses::Window#addstr	(str)
Curses::Window#attroff	(attrs)
Curses::Window#attron	(attrs)
Curses::Window#attrset	(attrs)
Curses::Window#begx	
Curses::Window#begy	
Curses::Window#bkgd	(ch)
Curses::Window#bkgdset	(ch)
Curses::Window#box	(ver_char,hor_char)
Curses::Window#clear	
Curses::Window#close	
Curses::Window#clrtoeol	(color)
Curses::Window#color_set	(color)
Curses::Window#curx	
Curses::Window#cury	
Curses::Window#delch	
Curses::Window#deleteln	
Curses::Window#getbkgd	
Curses::Window#getch	
Curses::Window#getstr	
Curses::Window#idlok	(bf)
Curses::Window#inch	
Curses::Window#insch	(ch)
Curses::Window#insertln	
Curses::Window#keypad	(val)
Curses::Window#keypad=	(val)
Curses::Window#maxx	
Curses::Window#maxy	
Curses::Window#move	(y,x)
Curses::Window#nodelay=	(val)
Curses::Window#noutrefresh	
Curses::Window#refresh	
Curses::Window#resize	(lin,col)
Curses::Window#scrl	(n)
Curses::Window#scroll	
Curses::Window#scrollok	(bf)
Curses::Window#setpos	(y,x)
Curses::Window#setscrreg	(top,bottom)
Curses::Window#standend	
Curses::Window#standout	
Curses::Window#subwin	(height,width,y,x)
Curses::Window#timeout=	(delay)
Curses::Window.new	(height,width,y,x)
DBM#[]	(key)->String
DBM#[]=	(key,value)
DBM#clear	->self
DBM#close	
DBM#closed?	->bool
DBM#delete	(key)->String
DBM#delete_if	{|key,value|...}->self
DBM#each	{|key,value|...}->self
DBM#each_key	{|key|...}->self
DBM#each_pair	{|key,value|...}->self
DBM#each_value	{|value|...}->self
DBM#empty?	()->bool
DBM#fetch	(key,ifnone=nil)->String
DBM#has_key?	(key)->bool
DBM#has_value?	(value)->bool
DBM#include?	(key)->bool
DBM#index	(value)->String|nil
DBM#invert	->Hash
DBM#key	(value)->String
DBM#key?	(key)->bool
DBM#keys	->[String]
DBM#length	->Integer
DBM#member?	(key)->bool
DBM#reject	{|key,value|...}->Hash
DBM#reject!	{|key,value|...}->self
DBM#replace	(other)->self
DBM#select	{|key,value|...}->[Array]
DBM#shift	->String
DBM#size	->Integer
DBM#store	(key,value)->String
DBM#to_a	->[Array]
DBM#to_hash	->Hash
DBM#update	(other){|key,value|...}->self
DBM#value?	(value)->bool
DBM#values	->[String]
DBM#values_at	(*keys)->[String]
DBM.new	(dbname,mode=0666,flags=nil)->DBM
DBM.open	(dbname,mode=0666,flags=nil)->DBM	(dbname,mode=0666,flags=nil){|db|...}
DL.dlopen	(lib)->DL::Handle	(lib){|handle|...}->DL::Handle
DL.dlunwrap	(addr)->object
DL.dlwrap	(obj)->Integer
DL.free	(addr)
DL.malloc	(size)->Integer
DL.realloc	(addr,size)->Integer
DL::CFunc#[]	(arry)->Integer|Float|nil
DL::CFunc#call	(arry)->Integer|Float|nil
DL::CFunc#calltype	->Symbol
DL::CFunc#calltype=	(sym)
DL::CFunc#ctype	->Integer
DL::CFunc#ctype=	(type)
DL::CFunc#inspect	->String
DL::CFunc#name	->String
DL::CFunc#ptr	->Integer
DL::CFunc#ptr=	(addr)
DL::CFunc#to_i	->Integer
DL::CFunc#to_s	->String
DL::CFunc.last_error	->Integer
DL::CFunc.new	(addr,type=DL::TYPE_VOID,name='',calltype=:cdecl)
DL::CPtr#+	(n)->DL::CPtr
DL::CPtr#+@	->DL::CPtr
DL::CPtr#-	(n)->DL::CPtr
DL::CPtr#-@	->DL::CPtr
DL::CPtr#<=>	(other)->Integer
DL::CPtr#==	(other)->bool
DL::CPtr#[]	(offset)->Integer	(offset,len)->String
DL::CPtr#[]=	(offset,n)	(offset,len,v)
DL::CPtr#eql?	(other)->bool
DL::CPtr#free	->DL::CFunc
DL::CPtr#free=	(cfunc)
DL::CPtr#inspect	
DL::CPtr#null?	->bool
DL::CPtr#ptr	->DL::CPtr
DL::CPtr#ref	->DL::CPtr
DL::CPtr#size	->Integer
DL::CPtr#size=	(s)
DL::CPtr#to_i	->Integer
DL::CPtr#to_s	->String	(len)->String
DL::CPtr#to_str	->String	(len)->String
DL::CPtr#to_value	->object
DL::CPtr.[]	(val)->DL::CPtr
DL::CPtr.malloc	(size,free=nil)->DL::CPtr
DL::CPtr.new	(addr,size=0,free=nil)->DL::CPtr
DL::CPtr.to_ptr	(val)->DL::CPtr
DL::Function#bind	{|*args|...}
DL::Function#call	(*arg)->DL::CPtr|Integer|Float|nil	(*arg){|*v|...}->DL::CPtr|Integer|Float|nil
DL::Function#name	->String
DL::Function#to_i	->Integer
DL::Function#unbind	
DL::Function.new	(cfunc,argtypes)->DL::Function	(cfunc,argtypes){|*arg|...}->DL::Function
DL::Handle#[]	(func)->Integer
DL::Handle#close	->Integer
DL::Handle#disable_close	
DL::Handle#enable_close	
DL::Handle#sym	(func)->Integer
DL::Handle#to_i	->Integer
DL::Handle.new	(lib)->DL::Handle	(lib){|handle|...}->DL::Handle
DL::Importer#[]	
DL::Importer#bind	
DL::Importer#dlload	
DL::Importer#extern	
DL::Importer#sizeof	
DL::Importer#struct	
DL::Importer#typealias	
DL::Importer#union	
DL::Importer#value	
DRb.config	
DRb.current_server	
DRb.fetch_server	(uri)
DRb.front	
DRb.here?	(uri)
DRb.install_acl	(acl)
DRb.install_id_conv	(idconv)
DRb.regist_server	(server)
DRb.remove_server	(server)
DRb.start_service	(uri=nil,front=nil,config=nil)
DRb.stop_service	
DRb.thread	
DRb.to_id	(obj)
DRb.to_obj	(ref)
DRb.uri	
DRb::DRbIdConv#to_id	(obj)
DRb::DRbIdConv#to_obj	(ref)
DRb::DRbObject#==	(other)
DRb::DRbObject#__drbref	
DRb::DRbObject#__drburi	
DRb::DRbObject#eql?	(other)
DRb::DRbObject#method_missing	(msg_id,*a,&b)
DRb::DRbObject._load	(s)
DRb::DRbObject.new	(obj,uri=nil)
DRb::DRbObject.new_with_uri	(uri)
DRb::DRbProtocol.add_protocol	(prot)
DRb::DRbServer#alive?	
DRb::DRbServer#check_insecure_method	(obj,msg_id)
DRb::DRbServer#config	
DRb::DRbServer#front	
DRb::DRbServer#safe_level	
DRb::DRbServer#stop_service	()
DRb::DRbServer#thread	
DRb::DRbServer#to_id	(obj)
DRb::DRbServer#to_obj	(ref)
DRb::DRbServer#uri	
DRb::DRbServer#verbose	
DRb::DRbServer#verbose=	
DRb::DRbServer.default_acl	(acl)
DRb::DRbServer.default_argc_limit	(argc)
DRb::DRbServer.default_id_conv	(idconv)
DRb::DRbServer.default_load_limit	(sz)
DRb::DRbServer.default_safe_level	(level)
DRb::DRbServer.new	(uri=nil,front=nil,config_or_acl=nil)
DRb::DRbServer.verbose	
DRb::DRbServer.verbose=	
DRb::DRbUnknown#exception	()
DRb::DRbUnknown#reload	()
DRb::DRbUnknown.new	(err,buf)
DRb::ExtServ#alive?	
DRb::ExtServ#front	
DRb::ExtServ#server	
DRb::ExtServ#stop_service	
DRb::ExtServ.new	(there,name,server=nil)
DRb::ExtServManager#regist	(name,ro)
DRb::ExtServManager#service	(name)
DRb::ExtServManager#unregist	(name)
DRb::ExtServManager.command	
DRb::ExtServManager.command=	(cmd)
DRb::ExtServManager.new	
DRb::GW#[]	(key)
DRb::GW#[]=	(key,v)
DRb::GW.new	
DRb::TimerIdConv#to_id	(obj)
DRb::TimerIdConv#to_obj	(ref)
DRb::TimerIdConv.new	(timeout=600)
Date#+	(n)->Date
Date#-	(x)->Rational|Date
Date#<<	(n)->Date
Date#<=>	(other)->Integer
Date#===	(other)->bool
Date#>>	(n)->Date
Date#ajd	->Rational
Date#amjd	->Rational
Date#asctime	->String
Date#ctime	->String
Date#cwday	->Integer
Date#cweek	->Integer
Date#cwyear	->Integer
Date#day	->Integer
Date#downto	(min){|date|...}->self	(min)->Enumerator
Date#england	->Date
Date#friday?	->bool
Date#gregorian	->Date
Date#gregorian?	->bool
Date#httpdate	->String
Date#iso8601	->String
Date#italy	->Date
Date#jd	->Integer
Date#jisx0301	->String
Date#julian	->Date
Date#julian?	->bool
Date#ld	->Integer
Date#leap?	->bool
Date#mday	->Integer
Date#mjd	->Integer
Date#mon	->Integer
Date#monday?	->bool
Date#month	->Integer
Date#new_start	(start=Date::ITALY)->Date
Date#next	->Date
Date#next_day	(n=1)->Date
Date#next_month	(n=1)->Date
Date#next_year	(n=1)->Date
Date#prev_day	(n=1)->Date
Date#prev_month	(n=1)->Date
Date#prev_year	(n=1)->Date
Date#rfc2822	->String
Date#rfc3339	->String
Date#rfc822	->String
Date#saturday?	->bool
Date#start	->Integer
Date#step	(limit,step=1){|date|...}->self	(limit,step=1)->Enumerator
Date#strftime	(format='%F')->String
Date#succ	->Date
Date#sunday?	->bool
Date#thursday?	->bool
Date#to_date	->Date
Date#to_datetime	->DateTime
Date#to_json	(*args)->String
Date#to_s	->String
Date#to_time	->Time
Date#tuesday?	->bool
Date#upto	(max){|date|...}->self	(max)->Enumerator
Date#wday	->Integer
Date#wednesday?	->bool
Date#xmlschema	->String
Date#yday	->Integer
Date#year	->Integer
Date._httpdate	(str)->Hash
Date._iso8601	(str)->Hash
Date._jisx0301	(str)->Hash
Date._parse	(str,complete=true)->Hash
Date._rfc2822	(str)->Hash
Date._rfc3339	(str)->Hash
Date._rfc822	(str)->Hash
Date._strptime	(str,format='%F')->Hash
Date._xmlschema	(str)->Hash
Date.civil	(year=-4712,mon=1,mday=1,start=Date::ITALY)->Date
Date.commercial	(cwyear=-4712,cweek=1,cwday=1,start=Date::ITALY)->Date
Date.gregorian_leap?	(year)->bool
Date.httpdate	(str='Mon,01Jan-471200:00:00GMT',start=Date::ITALY)->Date
Date.iso8601	(str='-4712-01-01',start=Date::ITALY)->Date
Date.jd	(jd=0,start=Date::ITALY)->Date
Date.jisx0301	(str='-4712-01-01',start=Date::ITALY)->Date
Date.json_create	(hash)->Date
Date.julian_leap?	(year)->bool
Date.leap?	(year)->bool
Date.new	(year=-4712,mon=1,mday=1,start=Date::ITALY)->Date
Date.ordinal	(year=-4712,yday=1,start=Date::ITALY)->Date
Date.parse	(str='-4712-01-01',complete=true,start=Date::ITALY)->Date
Date.rfc2822	(str='Mon,1Jan-471200:00:00+0000',start=Date::ITALY)->Date
Date.rfc3339	(str='-4712-01-01T00:00:00+00:00',start=Date::ITALY)->Date
Date.rfc822	(str='Mon,1Jan-471200:00:00+0000',start=Date::ITALY)->Date
Date.strptime	(str='-4712-01-01',format='%F',start=Date::ITALY)->Date
Date.today	(start=Date::ITALY)->Date
Date.valid_civil?	(year,mon,mday,start=Date::GREGORIAN)->bool
Date.valid_commercial?	(cwyear,cweek,cwday,start=Date::GREGORIAN)->bool
Date.valid_date?	(year,mon,mday,start=Date::GREGORIAN)->bool
Date.valid_jd?	(jd,start=Date::GREGORIAN)->bool
Date.valid_ordinal?	(year,yday,start=Date::GREGORIAN)->bool
Date.xmlschema	(str='-4712-01-01',start=Date::ITALY)->Date
DateTime#hour	->Integer
DateTime#iso8601	(n=0)->String
DateTime#jisx0301	(n=0)->String
DateTime#min	->Integer
DateTime#new_offset	(offset=0)->DateTime
DateTime#offset	->Rational
DateTime#rfc3339	(n=0)->String
DateTime#sec	->Integer
DateTime#to_json	(*args)->String
DateTime#xmlschema	(n=0)->String
DateTime#zone	->String
DateTime._strptime	(str,format='%FT%T%z')->Hash
DateTime.civil	(year=-4712,mon=1,mday=1,hour=0,min=0,sec=0,offset=0,start=Date::ITALY)->DateTime
DateTime.commercial	(cwyear=-4712,cweek=1,cwday=1,hour=0,min=0,sec=0,offset=0,start=Date::ITALY)->DateTime
DateTime.httpdate	(str='Mon,01Jan-471200:00:00GMT',start=Date::ITALY)->DateTime
DateTime.iso8601	(str='-4712-01-01T00:00:00+00:00',start=Date::ITALY)->DateTime
DateTime.jd	(jd=0,hour=0,min=0,sec=0,offset=0,start=Date::ITALY)->DateTime
DateTime.jisx0301	(str='-4712-01-01T00:00:00+00:00',start=Date::ITALY)->DateTime
DateTime.json_create	(hash)->DateTime
DateTime.new	(year=-4712,mon=1,mday=1,hour=0,min=0,sec=0,offset=0,start=Date::ITALY)->DateTime
DateTime.now	(start=Date::ITALY)->DateTime
DateTime.ordinal	(year=-4712,yday=1,hour=0,min=0,sec=0,offset=0,start=Date::ITALY)->DateTime
DateTime.parse	(str='-4712-01-01T00:00:00+00:00',complete=true,start=Date::ITALY)->DateTime
DateTime.rfc2822	(str='Mon,1Jan-471200:00:00+0000',start=Date::ITALY)->DateTime
DateTime.rfc3339	(str='-4712-01-01T00:00:00+00:00',start=Date::ITALY)->DateTime
DateTime.rfc822	(str='Mon,1Jan-471200:00:00+0000',start=Date::ITALY)->DateTime
DateTime.strptime	(str='-4712-01-01T00:00:00+00:00',format='%FT%T%z',start=Date::ITALY)->DateTime
DateTime.today	(start=Date::ITALY)->Date
DateTime.xmlschema	(str='-4712-01-01T00:00:00+00:00',start=Date::ITALY)->DateTime
Delegator#==	(obj)->bool
Delegator#__getobj__	->object
Delegator#__setobj__	(obj)
Delegator#clone	->object
Delegator#dup	->object
Delegator#marshal_dump	->object
Delegator#marshal_load	(obj)->object
Delegator#method_missing	(m,*args)->object
Delegator#respond_to?	(m)->bool
Delegator::MethodDelegation#==	(obj)
Delegator::MethodDelegation#__getobj__	->object
Delegator::MethodDelegation#__setobj__	(obj)->object
Delegator::MethodDelegation#clone	->object
Delegator::MethodDelegation#dup	->object
Delegator::MethodDelegation#equal?	(obj)
Delegator::MethodDelegation#marshal_dump	->object
Delegator::MethodDelegation#marshal_load	(obj)->object
Delegator::MethodDelegation#method_missing	(m,*args)->object
Delegator::MethodDelegation#respond_to?	(m)->bool
Delegator::MethodDelegation.new	(obj)->object
Digest.bubblebabble	(string)
Digest.hexencode	(string)->String
Digest::Base#<<	(str)
Digest::Base#==	(md)	(str)
Digest::Base#block_length	->Integer
Digest::Base#clone	
Digest::Base#digest	->String
Digest::Base#digest!	->String
Digest::Base#digest_length	->Integer
Digest::Base#dup	
Digest::Base#file	(path)->self
Digest::Base#hexdigest	->String
Digest::Base#hexdigest!	->String
Digest::Base#length	->Integer
Digest::Base#reset	->self
Digest::Base#size	->Integer
Digest::Base#to_s	->String
Digest::Base#update	(str)
Digest::Base.digest	(str)
Digest::Base.file	(path)->object
Digest::Base.hexdigest	(str)
Digest::Base.new	
Digest::MD5#<<	(str)
Digest::MD5#==	(md)	(str)
Digest::MD5#clone	
Digest::MD5#digest	
Digest::MD5#dup	
Digest::MD5#hexdigest	
Digest::MD5#to_s	
Digest::MD5#update	(str)
Digest::MD5.digest	(str)
Digest::MD5.hexdigest	(str)
Digest::MD5.new	([str])
Digest::RMD160#<<	(str)
Digest::RMD160#==	(md)	(str)
Digest::RMD160#clone	
Digest::RMD160#digest	
Digest::RMD160#dup	
Digest::RMD160#hexdigest	
Digest::RMD160#to_s	
Digest::RMD160#update	(str)
Digest::RMD160.digest	(str)
Digest::RMD160.hexdigest	(str)
Digest::RMD160.new	([str])
Digest::SHA2.new	(bitlen=256)
Dir#close	
Dir#each	{|item|...}->self	->Enumerator
Dir#path	->String
Dir#pos	->Integer
Dir#pos=	(pos)
Dir#read	->String|nil
Dir#rewind	->self
Dir#seek	(pos)->self
Dir#tell	->Integer
Dir.[]	(*pattern)->[String]
Dir.chdir	->0	(path)->0	{|path|...}->object	(path){|path|...}->object
Dir.chroot	(path)->0
Dir.delete	(path)->0
Dir.entries	(path)->[String]
Dir.exist?	(file_name)->bool
Dir.exists?	(file_name)->bool
Dir.foreach	(path){|file|...}	->Enumerator
Dir.getwd	->String
Dir.glob	(pattern,flags=0)->[String]	(pattern,flags=0){|file|...}
Dir.mkdir	(path,mode=0777)->0
Dir.mktmpdir	(prefix_suffix=nil,tmpdir=nil)->String	(prefix_suffix=nil,tmpdir=nil){|dir|...}->object
Dir.new	(path)->Dir
Dir.open	(path)->Dir	(path){|dir|...}->object
Dir.pwd	->String
Dir.rmdir	(path)->0
Dir.tmpdir	->String
Dir.unlink	(path)->0
DublinCoreModel#dc_contributor	
DublinCoreModel#dc_contributor=	
DublinCoreModel#dc_contributors	
DublinCoreModel#dc_coverage	
DublinCoreModel#dc_coverage=	
DublinCoreModel#dc_coverages	
DublinCoreModel#dc_creator	
DublinCoreModel#dc_creator=	
DublinCoreModel#dc_creators	
DublinCoreModel#dc_date	
DublinCoreModel#dc_date=	
DublinCoreModel#dc_dates	
DublinCoreModel#dc_description	
DublinCoreModel#dc_description=	
DublinCoreModel#dc_descriptions	
DublinCoreModel#dc_format	
DublinCoreModel#dc_format=	
DublinCoreModel#dc_formats	
DublinCoreModel#dc_identifier	
DublinCoreModel#dc_identifier=	
DublinCoreModel#dc_identifiers	
DublinCoreModel#dc_language	
DublinCoreModel#dc_language=	
DublinCoreModel#dc_languages	
DublinCoreModel#dc_publisher	
DublinCoreModel#dc_publisher=	
DublinCoreModel#dc_publishers	
DublinCoreModel#dc_relation	
DublinCoreModel#dc_relation=	
DublinCoreModel#dc_relations	
DublinCoreModel#dc_rights	
DublinCoreModel#dc_rights=	
DublinCoreModel#dc_rightses	
DublinCoreModel#dc_source	
DublinCoreModel#dc_source=	
DublinCoreModel#dc_sources	
DublinCoreModel#dc_subject	
DublinCoreModel#dc_subject=	
DublinCoreModel#dc_subjects	
DublinCoreModel#dc_title	
DublinCoreModel#dc_title=	
DublinCoreModel#dc_titles	
DublinCoreModel#dc_type	
DublinCoreModel#dc_type=	
DublinCoreModel#dc_types	
ENV.[]	(key)->String
ENV.[]=	(key,value)
ENV.assoc	(key)->Array|nil
ENV.clear	->self
ENV.delete	(key)->String|nil	(key){|key|...}->String|nil
ENV.delete_if	{|key,value|...}->ENV	->Enumerator
ENV.each	->Enumerator	{|key,value|...}->self
ENV.each_key	->Enumerator	{|key|...}->self
ENV.each_pair	->Enumerator	{|key,value|...}->self
ENV.each_value	->Enumerator	{|value|...}->self
ENV.empty?	->bool
ENV.fetch	(key)->String	(key,default)->String	(key){|key|...}->String
ENV.has_key?	(key)->bool
ENV.has_value?	(val)->bool
ENV.include?	(key)->bool
ENV.index	(val)->String|nil
ENV.indexes	(*key)->[String]
ENV.indices	(*key)->[String]
ENV.inspect	->String
ENV.invert	->Hash
ENV.key	(val)->String|nil
ENV.key?	(key)->bool
ENV.keys	->[String]
ENV.length	->Fixnum
ENV.member?	(key)->bool
ENV.rassoc	(value)->Array|nil
ENV.rehash	
ENV.reject	->Enumerator	{|key,value|...}->Hash
ENV.reject!	{|key,value|...}->ENV|nil	->Enumerator
ENV.replace	(hash)->ENV
ENV.select	->Enumerator	{|key,value|...}->[[String,String]]
ENV.shift	->[String,String]
ENV.size	->Fixnum
ENV.store	(key,value)->String
ENV.to_a	->[[String,String]]
ENV.to_hash	->Hash
ENV.to_s	->String
ENV.update	(other)->ENV
ENV.value?	(val)->bool
ENV.values	->[String]
ENV.values_at	(*key)->[String]
ERB#def_class	(suplerklass=Object,methodname='erb')->Class
ERB#def_method	(mod,methodname,fname='(ERB)')
ERB#def_module	(methodname='erb')->Module
ERB#filename	->String
ERB#filename=	->String
ERB#result	(b=TOPLEVEL_BINDING)->String
ERB#run	(b=TOPLEVEL_BINDING)
ERB#set_eoutvar	(compiler,eoutvar='_erbout')->Array
ERB#src	->String
ERB.new	(eruby_script,safe_level=nil,trim_mode=nil,eoutvar='_erbout')->ERB
ERB.version	->String
ERB::DefMethod.def_erb_method	(methodname,erb)
ERB::Util.h	(s)->String
ERB::Util.html_escape	(s)->String
ERB::Util.u	(s)->String
ERB::Util.url_encode	(s)->String
Encoding#dummy?	->bool
Encoding#inspect	->String
Encoding#name	->String
Encoding#names	->String
Encoding#to_s	->String
Encoding.aliases	->Hash
Encoding.compatible?	(str1,str2)->Encoding|nil	(enc1,enc2)->Encoding|nil
Encoding.default_external	->Encoding
Encoding.default_external=	(encoding)
Encoding.default_internal	->Encoding|nil
Encoding.default_internal=	(encoding)
Encoding.find	(name)->Encoding
Encoding.list	->[Encoding]
Encoding.locale_charmap	->String|nil
Encoding.name_list	->[String]
Encoding::Converter#convert	(source_string)->String
Encoding::Converter#convpath	->Array
Encoding::Converter#destination_encoding	->Encoding
Encoding::Converter#finish	->String
Encoding::Converter#insert_output	(string)
Encoding::Converter#inspect	->String
Encoding::Converter#last_error	->Exception|nil
Encoding::Converter#primitive_convert	(source_buffer,destination_buffer)->Symbol	(source_buffer,destination_buffer,destination_byteoffset)->Symbol	(source_buffer,destination_buffer,destination_byteoffset,destination_bytesize)->Symbol	(source_buffer,destination_buffer,destination_byteoffset,destination_bytesize,options)->Symbol
Encoding::Converter#primitive_errinfo	->Array
Encoding::Converter#putback	->String	(max_numbytes)->String
Encoding::Converter#replacement	->String
Encoding::Converter#replacement=	(string)
Encoding::Converter#source_encoding	->Encoding
Encoding::Converter.asciicompat_encoding	(string)->Encoding|nil	(encoding)->Encoding|nil
Encoding::Converter.new	(source_encoding,destination_encoding)	(source_encoding,destination_encoding,options)	(convpath)
Enumerable#all?	->bool	{|item|...}->bool
Enumerable#any?	->bool	{|item|...}->bool
Enumerable#collect	->Enumerator	{|item|...}->[object]
Enumerable#count	->Integer	(item)->Integer	{|obj|...}->Integer
Enumerable#cycle	->Enumerator	{|obj|...}->object|nil
Enumerable#detect	(ifnone=nil)->Enumerator	(ifnone=nil){|item|...}->object
Enumerable#drop	(n)->Array
Enumerable#drop_while	->Enumerator	{|element|...}->Array
Enumerable#each_cons	(n)->Enumerator	(n){|list|...}
Enumerable#each_slice	(n)->Enumerator	(n){|list|...}
Enumerable#each_with_index	->Enumerator	{|item,index|...}->self
Enumerable#each_with_object	(obj)->Enumerator	(obj){|(*args),memo_obj|...}->object
Enumerable#entries	->[object]
Enumerable#find	(ifnone=nil)->Enumerator	(ifnone=nil){|item|...}->object
Enumerable#find_all	->Enumerator	{|item|...}->[object]
Enumerable#find_index	->Enumerator	{|obj|...}->Integer|nil
Enumerable#first	->object|nil	(n)->Array
Enumerable#grep	(pattern)->[object]	(pattern){|item|...}->[object]
Enumerable#group_by	->Enumerator	{|obj|...}->Hash
Enumerable#include?	(val)->bool
Enumerable#inject	(init=self.first){|result,item|...}->object	(sym)->object	(init,sym)->object
Enumerable#map	->Enumerator	{|item|...}->[object]
Enumerable#max	->object	{|a,b|...}->object
Enumerable#max_by	->Enumerator	{|item|...}->object
Enumerable#member?	(val)->bool
Enumerable#min	->object	{|a,b|...}->object
Enumerable#min_by	->Enumerator	{|item|...}->object
Enumerable#minmax	->[object,object]	{|a,b|...}->[object,object]
Enumerable#minmax_by	->Enumerator	{|obj|...}->[object,object]
Enumerable#none?	->bool	{|obj|...}->bool
Enumerable#one?	->bool	{|obj|...}->bool
Enumerable#partition	->Enumerator	{|item|...}->[[object],[object]]
Enumerable#reduce	(init=self.first){|result,item|...}->object	(sym)->object	(init,sym)->object
Enumerable#reject	->Enumerator	{|item|...}->[object]
Enumerable#reverse_each	->Enumerator	{|element|...}->self
Enumerable#select	->Enumerator	{|item|...}->[object]
Enumerable#sort	->[object]	{|a,b|...}->[object]
Enumerable#sort_by	->Enumerator	{|item|...}->[object]
Enumerable#take	(n)->Array
Enumerable#take_while	->Enumerator	{|element|...}->Array
Enumerable#to_a	->[object]
Enumerable#to_set	(klass=Set,*args)->Set	(klass=Set,*args){|o|...}->Set
Enumerable#zip	(*lists)->[[object]]	(*lists){|v1,v2,...|...}
Enumerator#each	{...}->object
Enumerator#next	->object
Enumerator#rewind	->self
Enumerator#with_index	{|(*args),idx|...}->object	->Enumerator
Enumerator#with_object	(obj)->Enumerator	(obj){|(*args),memo_obj|...}->object
Enumerator.new	(obj,method=:each,*args)->Enumerator	{|y|...}->Enumerator
Errno::EXXX.===	(other)->bool
Errno::EXXX.new	()->Errno::EXXX	(error_message)->Errno::EXXX
Etc.endgrent	
Etc.endpwent	
Etc.getgrent	->Struct::Group|nil
Etc.getgrgid	(gid)->Struct::Group
Etc.getgrnam	(name)->Struct::Group
Etc.getlogin	->String|nil
Etc.getpwent	->Struct::Passwd|nil
Etc.getpwnam	(name)->Struct::Passwd
Etc.getpwuid	(uid=getuid)->Struct::Passwd
Etc.group	->Struct::Group|nil	{|gr|...}
Etc.passwd	->Struct::Passwd|nil	{|pw|...}
Etc.setgrent	
Etc.setpwent	
Exception#==	(other)->bool
Exception#backtrace	->[String]
Exception#exception	->self	(error_message)->Exception
Exception#message	->String
Exception#set_backtrace	(errinfo)->nil|String|[String]
Exception#to_json	(*args)->String
Exception#to_s	->String
Exception.exception	(error_message=nil)
Exception.json_create	(hash)->Exception
Exception.new	(error_message=nil)
Exception2MessageMapper#Fail	(exception_class=nil,*rest)
Exception2MessageMapper#Raise	(exception_class=nil,*rest)
Exception2MessageMapper#bind	(cl)
Exception2MessageMapper#def_e2message	(exception_class,message_format)->Class
Exception2MessageMapper#def_exception	(exception_name,message_format,superclass=StandardError)->Class
Exception2MessageMapper#fail	(exception_class=nil,*rest)
Exception2MessageMapper.Fail	(klass=E2MM,exception_class=nil,*rest)
Exception2MessageMapper.Raise	(klass=E2MM,exception_class=nil,*rest)
Exception2MessageMapper.def_e2message	(klass,exception_class,message_format)->Class
Exception2MessageMapper.def_exception	(klass,exception_name,message_format,superklass=StandardError)->Class
Exception2MessageMapper.e2mm_message	(klass,exp)->String|nil
Exception2MessageMapper.extend_object	(cl)
Exception2MessageMapper.message	(klass,exp)->String|nil
FalseClass#&	(other)->false
FalseClass#^	(other)->bool
FalseClass#to_s	->String
FalseClass#|	(other)->bool
Fiber#alive?	->bool
Fiber#resume	(*arg=nil)->object
Fiber#transfer	(*args)->object
Fiber.current	->Fiber
Fiber.new	{|obj|...}->Fiber
Fiber.yield	(*arg=nil)->object
File#atime	->Time
File#chmod	(mode)->0
File#chown	(owner,group)->0
File#ctime	->Time
File#flock	(operation)->0|false
File#lstat	->File::Stat
File#mtime	->Time
File#path	->String
File#to_path	->String
File#truncate	(length)->0
File.atime	(filename)->Time
File.basename	(filename,suffix="")->String
File.blockdev?	(path)->bool
File.chardev?	(path)->bool
File.chmod	(mode,*filename)->Integer
File.chown	(owner,group,*filename)->Integer
File.ctime	(filename)->Time
File.delete	(*filename)->Integer
File.directory?	(path)->bool
File.dirname	(filename)->String
File.executable?	(path)->bool
File.executable_real?	(path)->bool
File.exist?	(path)->bool
File.exists?	(path)->bool
File.expand_path	(path,default_dir='.')->String
File.extname	(filename)->String
File.file?	(path)->bool
File.fnmatch	(pattern,path,flags=0)->bool	?(pattern,path,flags=0)->bool
File.fnmatch?	(pattern,path,flags=0)->bool
File.ftype	(filename)->String
File.grpowned?	(path)->bool
File.identical?	(filename1,filename2)->bool
File.join	(*item)->String
File.lchmod	(mode,*filename)->Integer
File.lchown	(owner,group,*filename)->Integer
File.link	(old,new)->0
File.lstat	(filename)->File::Stat
File.mtime	(filename)->Time
File.new	(path,mode="r",perm=0666)->File
File.open	(path,mode="r",perm=0666)->File	(path,mode="r",perm=0666){|file|...}->object
File.owned?	(path)->bool
File.path	(filename)->String
File.pipe?	(path)->bool
File.readable?	(path)->bool
File.readable_real?	(path)->bool
File.readlink	(path)->String
File.rename	(from,to)->0
File.setgid?	(path)->bool
File.setuid?	(path)->bool
File.size	(path)->Integer
File.size?	(path)->bool
File.socket?	(path)->bool
File.split	(pathname)->[String]
File.stat	(filename)->File::Stat
File.sticky?	(path)->bool
File.symlink	(old,new)->0
File.symlink?	(path)->bool
File.truncate	(path,length)->0
File.umask	->Integer	(umask)->Integer
File.unlink	(*filename)->Integer
File.utime	(atime,mtime,*filename)->Integer
File.world_readable?	(path)->Integer|nil
File.world_writable?	(path)->bool
File.writable?	(path)->bool
File.writable_real?	(path)->bool
File.zero?	(path)->bool
File::Stat#<=>	(o)->Fixnum|nil
File::Stat#atime	->Time
File::Stat#blksize	->Integer
File::Stat#blockdev?	->bool
File::Stat#blocks	->Integer
File::Stat#chardev?	->bool
File::Stat#ctime	->Time
File::Stat#dev	->String
File::Stat#dev_major	->Integer
File::Stat#dev_minor	->Integer
File::Stat#directory?	->bool
File::Stat#executable?	->bool
File::Stat#executable_real?	->bool
File::Stat#file?	->bool
File::Stat#ftype	->String
File::Stat#gid	->Integer
File::Stat#grpowned?	->bool
File::Stat#ino	->Integer
File::Stat#mode	->Integer
File::Stat#mtime	->Time
File::Stat#nlink	->Integer
File::Stat#owned?	->bool
File::Stat#pipe?	->bool
File::Stat#rdev	->Integer
File::Stat#rdev_major	->Integer
File::Stat#rdev_minor	->Integer
File::Stat#readable?	->bool
File::Stat#readable_real?	->bool
File::Stat#setgid?	->bool
File::Stat#setuid?	->bool
File::Stat#size	->Integer
File::Stat#size?	->Integer|nil
File::Stat#socket?	->bool
File::Stat#sticky?	->bool
File::Stat#symlink?	->false
File::Stat#uid	->Integer
File::Stat#world_readable?	->Fixnum|nil
File::Stat#world_writable?	->Fixnum|nil
File::Stat#writable?	->bool
File::Stat#writable_real?	->bool
File::Stat#zero?	->bool
File::Stat.new	(path)->File::Stat
FileTest.blockdev?	(file)->bool
FileTest.chardev?	(file)->bool
FileTest.directory?	(file)->bool
FileTest.executable?	(file)->bool
FileTest.executable_real?	(file)->bool
FileTest.exist?	(file)->bool
FileTest.exists?	(file)->bool
FileTest.file?	(file)->bool
FileTest.grpowned?	(file)->bool
FileTest.identical?	(file1,file2)->bool
FileTest.owned?	(file)->bool
FileTest.pipe?	(file)->bool
FileTest.readable?	(file)->bool
FileTest.readable_real?	(file)->bool
FileTest.setgid?	(file)->bool
FileTest.setuid?	(file)->bool
FileTest.size	(file)->Integer
FileTest.size?	(file)->Integer|nil
FileTest.socket?	(file)->bool
FileTest.sticky?	(file)->bool
FileTest.symlink?	(file)->bool
FileTest.world_readable?	(path)->Integer|nil
FileTest.world_writable?	(path)->bool
FileTest.writable?	(file)->bool
FileTest.writable_real?	(file)->bool
FileTest.zero?	(file)->bool
FileUtils#ruby	(*args){...}
FileUtils#safe_ln	(*args)
FileUtils#sh	(*cmd){|result,status|...}
FileUtils#split_all	(path)->Array
FileUtils.cd	(dir,options={})	(dir,options={}){|dir|....}
FileUtils.chdir	(dir,options={})	(dir,options={}){|dir|....}
FileUtils.chmod	(mode,list,options={})->Array
FileUtils.chmod_R	(mode,list,options={})->Array
FileUtils.chown	(user,group,list,options={})->Array
FileUtils.chown_R	(user,group,list,options={})->Array
FileUtils.cmp	(file_a,file_b)->bool
FileUtils.collect_method	(opt)->Array
FileUtils.commands	->Array
FileUtils.compare_file	(file_a,file_b)->bool
FileUtils.compare_stream	(io_a,io_b)->bool
FileUtils.copy	(src,dest,options={})
FileUtils.copy_entry	(src,dest,preserve=false,dereference_root=false)
FileUtils.copy_file	(src,dest,preserve=false,dereference_root=true)
FileUtils.copy_stream	(src,dest)
FileUtils.cp	(src,dest,options={})
FileUtils.cp_r	(src,dest,options={})
FileUtils.getwd	->String
FileUtils.have_option?	(mid,opt)->bool
FileUtils.identical?	(file_a,file_b)->bool
FileUtils.install	(src,dest,options={})
FileUtils.link	(src,dest,options={})
FileUtils.ln	(src,dest,options={})
FileUtils.ln_s	(src,dest,options={})
FileUtils.ln_sf	(src,dest,options={})
FileUtils.makedirs	(list,options={})->String|Array
FileUtils.mkdir	(dir,options={})
FileUtils.mkdir_p	(list,options={})->String|Array
FileUtils.mkpath	(list,options={})->String|Array
FileUtils.move	(src,dest,options={})
FileUtils.mv	(src,dest,options={})
FileUtils.options	->Array
FileUtils.options_of	(mid)->Array
FileUtils.pwd	->String
FileUtils.remove	(list,options={})
FileUtils.remove_dir	(path,force=false)
FileUtils.remove_entry	(path,force=false)
FileUtils.remove_entry_secure	(path,force=false)
FileUtils.remove_file	(path,force=false)
FileUtils.rm	(list,options={})
FileUtils.rm_f	(list,options={})
FileUtils.rm_r	(list,options={})
FileUtils.rm_rf	(list,options={})
FileUtils.rmdir	(dir,options={})
FileUtils.rmtree	(list,options={})
FileUtils.safe_unlink	(list,options={})
FileUtils.symlink	(src,dest,options={})
FileUtils.touch	(list,options={})
FileUtils.uptodate?	(newer,older_list,options=nil)->bool
Find.find	(*dirs){|file|...}
Find.prune	
Fixnum#%	(other)->Fixnum|Bignum|Float
Fixnum#&	(other)->Fixnum|Bignum
Fixnum#*	(other)->Fixnum|Bignum|Float
Fixnum#**	(other)->Fixnum|Bignum|Float
Fixnum#+	(other)->Fixnum|Bignum|Float
Fixnum#-	(other)->Fixnum|Bignum|Float
Fixnum#/	(other)->Fixnum|Bignum|Float	(other)
Fixnum#<	(other)->bool
Fixnum#<<	(bits)->Fixnum|Bignum
Fixnum#<=	(other)->bool
Fixnum#<=>	(other)->Fixnum
Fixnum#==	(other)->bool
Fixnum#>	(other)->bool
Fixnum#>=	(other)->bool
Fixnum#>>	(bits)->Fixnum|Bignum
Fixnum#[]	(nth)->Fixnum
Fixnum#^	(other)->Fixnum|Bignum
Fixnum#id2name	->String|nil
Fixnum#size	->Fixnum
Fixnum#to_f	->Float
Fixnum#to_sym	->Symbol|nil
Fixnum#|	(other)->Fixnum|Bignum
Fixnum#~	->Fixnum|Bignum
Float#%	(other)->Float
Float#*	(other)->Float
Float#**	(other)->Float
Float#+	(other)->Float
Float#-	(other)->Float
Float#/	(other)->Float
Float#<	(other)->bool
Float#<=	(other)->bool
Float#<=>	(other)->nil|1|0|-1
Float#==	(other)->bool
Float#>	(other)->bool
Float#>=	(other)->bool
Float#abs	->Float
Float#ceil	->Integer
Float#denominator	->Integer
Float#divmod	(other)->[Numeric]
Float#eql?	(other)->bool
Float#finite?	->bool
Float#floor	->Integer
Float#hash	->Fixnum
Float#infinite?	->1|-1|nil
Float#modulo	(other)->Float
Float#nan?	->bool
Float#numerator	->Integer
Float#round	->Fixnum
Float#to_d	->BigDecimal
Float#to_f	->self
Float#to_i	->Integer
Float#to_r	->Rational
Float#to_s	->String
Float#truncate	->Integer
Float#zero?	->bool
Forwardable#def_delegator	(accessor,method,ali=method)
Forwardable#def_delegators	(accessor,*methods)
Forwardable#def_instance_delegator	(accessor,method,ali=method)
Forwardable#def_instance_delegators	(accessor,*methods)
Forwardable.debug	->bool
Forwardable.debug=	->bool
GC#garbage_collect	
GC.disable	->bool
GC.enable	->bool
GC.start	
GC.stress	->bool
GC.stress=	(value)
GC::Profiler.clear	
GC::Profiler.disable	
GC::Profiler.enable	
GC::Profiler.enabled?	->bool
GC::Profiler.report	(out=$stdout)
GC::Profiler.result	->String
GDBM#[]	(key)->String
GDBM#[]=	(key,value)
GDBM#cachesize=	(size)
GDBM#clear	->self
GDBM#close	
GDBM#closed?	->bool
GDBM#delete	(key)->object|nil	(key){|key|...}->object
GDBM#delete_if	{|key,value|...}->self
GDBM#each	{|key,value|...}->self
GDBM#each_key	{|key|...}->self
GDBM#each_pair	{|key,value|...}->self
GDBM#each_value	{|value|...}->self
GDBM#empty?	->bool
GDBM#fastmode=	(bool)
GDBM#fetch	(key,ifnone=nil){|key|...}->object
GDBM#has_key?	(key)->bool
GDBM#has_value?	(value)->bool
GDBM#include?	(key)->bool
GDBM#index	(val)->String
GDBM#invert	->Hash
GDBM#key	(value)->String
GDBM#key?	(key)->bool
GDBM#keys	->[String]
GDBM#length	->Integer
GDBM#member?	(key)->bool
GDBM#reject	{|key,value|...}->Hash
GDBM#reject!	{|key,value|...}->self
GDBM#reorganize	->self
GDBM#replace	(other)->self
GDBM#select	{|key,value|...}->[[String]]
GDBM#shift	->[String]
GDBM#size	->Integer
GDBM#store	(key,val)->[String]
GDBM#sync	->self
GDBM#syncmode=	(bool)
GDBM#to_a	->[[String]]
GDBM#to_hash	->Hash
GDBM#update	(other)->self
GDBM#value?	(value)->bool
GDBM#values	->[String]
GDBM#values_at	(*keys)->[String]
GDBM.new	(dbname,mode=0666,flags=0)->GDBM
GDBM.open	(dbname,mode=0666,flags=0)->GDBM	(dbname,mode=0666,flags=0){|db|...}->object
GServer#audit	->bool
GServer#audit=	(bool)
GServer#connecting	(client)->true
GServer#connections	()->Fixnum
GServer#debug	->bool
GServer#debug=	(bool)
GServer#disconnecting	(clientPort)
GServer#error	(detail)
GServer#host	->String
GServer#join	
GServer#log	(msg)
GServer#maxConnections	->Fixnum
GServer#port	->Fixnum
GServer#serve	(io)
GServer#shutdown	->true
GServer#start	(maxConnections=-1)->self
GServer#starting	
GServer#stdlog	->IO
GServer#stdlog=	(io)
GServer#stop	
GServer#stopped?	->bool
GServer#stopping	
GServer.in_service?	(port,host=GServer::DEFAULT_HOST)->bool
GServer.new	(port,host=GServer::DEFAULT_HOST,maxConnections=4,stdlog=$stderr,audit=false,debug=false)
GServer.stop	(port,host=DEFAULT_HOST)
Gem.clear_paths	
Gem.default_bindir	->String
Gem.default_dir	->String
Gem.default_exec_format	->String
Gem.default_path	->[String]
Gem.default_sources	->[String]
Gem.default_system_source_cache_dir	->String
Gem.default_user_source_cache_dir	->String
Gem.dir	->String
Gem.ensure_gem_subdirectories	
Gem.ensure_ssl_available	
Gem.marshal_version	->String
Gem.path	->Array
Gem.prefix	->String
Gem.ruby_engine	->String
Gem.set_home	
Gem.set_paths	
Gem.source_index	->Gem::SourceIndex
Gem.ssl_available?	->bool
Gem.user_dir	->String
Gem.win_platform?	->bool
Gem::Builder#build	->String
Gem::Builder#success	->String
Gem::Builder.new	(spec)->Gem::Builder
Gem::Command#add_extra_args	(args)->Array
Gem::Command#add_option	(*opts){|value,options|...}
Gem::Command#arguments	->String
Gem::Command#begins?	(long,short)->bool
Gem::Command#command	->String
Gem::Command#defaults	->Hash
Gem::Command#defaults=	(hash)
Gem::Command#defaults_str	->String
Gem::Command#description	->String
Gem::Command#execute	
Gem::Command#get_all_gem_names	->Array
Gem::Command#get_one_gem_name	->String
Gem::Command#get_one_optional_argument	->String
Gem::Command#handle_options	(args)
Gem::Command#handles?	(args)->bool
Gem::Command#invoke	(*args)
Gem::Command#merge_options	(new_options)
Gem::Command#options	->Hash
Gem::Command#program_name	->String
Gem::Command#program_name=	(name)
Gem::Command#remove_option	(name)
Gem::Command#show_help	
Gem::Command#summary	->String
Gem::Command#summary=	(description)
Gem::Command#usage	->String
Gem::Command#when_invoked	
Gem::Command.add_common_option	(*args){|value,options|...}
Gem::Command.add_specific_extra_args	(cmd,args)
Gem::Command.common_options	->Array
Gem::Command.extra_args	->Array
Gem::Command.extra_args=	(value)
Gem::Command.specific_extra_args	(cmd)->Array
Gem::Command.specific_extra_args_hash	->Hash
Gem::CommandManager#[]	(command_name)->Gem::Command|nil
Gem::CommandManager#command_names	->Array
Gem::CommandManager#find_command	(command_name)->Gem::Command|nil
Gem::CommandManager#find_command_possibilities	(command_name)->Array
Gem::CommandManager#process_args	(args)
Gem::CommandManager#register_command	(command_name)->false
Gem::CommandManager#run	(args)
Gem::CommandManager.instance	->Gem::CommandManager
Gem::Commands::BuildCommand#load_gemspecs	(filename)->Array
Gem::Commands::BuildCommand#usage	->String
Gem::Commands::BuildCommand#yaml?	(filename)->bool
Gem::Commands::DependencyCommand#find_gems	(name,source_index)->Hash
Gem::Commands::DependencyCommand#find_reverse_dependencies	(spec)->Array
Gem::Commands::DependencyCommand#print_dependencies	(spec,level=0)->String
Gem::Commands::LockCommand#complain	(message)
Gem::Commands::LockCommand#spec_path	(gem_full_name)->String
Gem::Commands::UnpackCommand#get_path	(gemname,version_req)->String|nil
Gem::Commands::UpdateCommand#do_rubygems_update	(version)
Gem::Commands::UpdateCommand#which_to_update	(highest_installed_gems,gem_names)
Gem::Commands::WhichCommand#find_paths	(package_name,dirs)->Array
Gem::Commands::WhichCommand#gem_paths	(spec)->Array
Gem::ConfigFile#[]	(key)->object
Gem::ConfigFile#[]=	(key,value)
Gem::ConfigFile#args	->Array
Gem::ConfigFile#backtrace	->bool
Gem::ConfigFile#backtrace=	(backtrace)
Gem::ConfigFile#benchmark	->bool
Gem::ConfigFile#benchmark=	(benchmark)
Gem::ConfigFile#bulk_threshold	->Integer
Gem::ConfigFile#bulk_threshold=	(bulk_threshold)
Gem::ConfigFile#config_file_name	->String
Gem::ConfigFile#each	{|key,value|...}
Gem::ConfigFile#handle_arguments	(arg_list)
Gem::ConfigFile#hash	->Hash
Gem::ConfigFile#load_file	(file_name)->object
Gem::ConfigFile#path	->String
Gem::ConfigFile#path=	(path)
Gem::ConfigFile#really_verbose	->bool
Gem::ConfigFile#update_sources	->bool
Gem::ConfigFile#update_sources=	(update_sources)
Gem::ConfigFile#verbose	->bool|Symbol
Gem::ConfigFile#verbose=	(verbose_level)
Gem::ConfigFile#write	
Gem::DefaultUserInteraction#ui	->Gem::ConsoleUI
Gem::DefaultUserInteraction#ui=	(new_ui)
Gem::DefaultUserInteraction#use_ui	(new_ui){...}
Gem::DefaultUserInteraction.ui	->Gem::ConsoleUI
Gem::DefaultUserInteraction.ui=	(new_ui)
Gem::DefaultUserInteraction.use_ui	(new_ui){...}
Gem::Dependency#<=>	(other)->Integer
Gem::Dependency#=~	(other)->bool
Gem::Dependency#name	->String
Gem::Dependency#name=	(name)
Gem::Dependency#normalize	
Gem::Dependency#requirement_list	->[String]
Gem::Dependency#requirements_list	->[String]
Gem::Dependency#type	->Symbol
Gem::Dependency#version_requirements	->Gem::Requirement
Gem::Dependency#version_requirements=	(version_requirements)
Gem::DependencyInstaller#find_gems_with_sources	(dep)
Gem::DependencyInstaller#find_spec_by_name_and_version	(gem_name,version=Gem::Requirement.default)->Array
Gem::DependencyInstaller#gather_dependencies	->Array
Gem::DependencyInstaller#gems_to_install	->Array
Gem::DependencyInstaller#install	(dep_or_name,version=Gem::Requirement.default)->Array
Gem::DependencyInstaller#installed_gems	->Array
Gem::DependencyInstaller.new	(options={})
Gem::DependencyList#add	(*gemspecs)
Gem::DependencyList#dependency_order	->[Gem::Specification]
Gem::DependencyList#find_name	(full_name)->Gem::Specification|nil
Gem::DependencyList#ok?	->bool
Gem::DependencyList#ok_to_remove?	(full_name)->bool
Gem::DependencyList#remove_by_name	(full_name)->Gem::Specification
Gem::DependencyList#spec_predecessors	->Hash
Gem::DependencyList.from_source_index	(src_index)->Gem::DependencyList
Gem::DigestAdapter#digest	(string)->String
Gem::DigestAdapter#hexdigest	(string)->String
Gem::DigestAdapter#new	->self
Gem::DigestAdapter.new	(digest_class)
Gem::DocManager#generate_rdoc	
Gem::DocManager#generate_ri	
Gem::DocManager#install_rdoc	
Gem::DocManager#install_ri	
Gem::DocManager#rdoc_installed?	->bool
Gem::DocManager#run_rdoc	(*args)
Gem::DocManager#setup_rdoc	
Gem::DocManager#uninstall_doc	
Gem::DocManager.configured_args	->Array
Gem::DocManager.configured_args=	(args)
Gem::DocManager.load_rdoc	
Gem::DocManager.new	(spec,rdoc_args="")
Gem::DocManager.update_ri_cache	
Gem::Ext::Builder.class_name	->String
Gem::Ext::Builder.make	(dest_path,results)
Gem::Ext::Builder.redirector	->String
Gem::Ext::Builder.run	(command,results)
Gem::Ext::ConfigureBuilder.build	(extension,directory,dest_path,results)->Array
Gem::Ext::ExtConfBuilder.build	(extension,directory,dest_path,results)->Array
Gem::Ext::RakeBuilder.build	(extension,directory,dest_path,results)->Array
Gem::FileOperations.new	(logger=nil)
Gem::Format#file_entries	->Array
Gem::Format#file_entries=	(file_entries)
Gem::Format#gem_path	->String
Gem::Format#gem_path=	(path)
Gem::Format#spec	->Gem::Specification
Gem::Format#spec=	(spec)
Gem::Format.from_file_by_path	(file_path,security_policy=nil)->Gem::Format
Gem::Format.from_io	(io,gem_path='(io)',security_policy=nil)->Gem::Format
Gem::Format.new	(gem_path)
Gem::GemPathSearcher#find	(path)->nil|Gem::Specification
Gem::GemPathSearcher#find_all	(path)
Gem::GemPathSearcher#init_gemspecs	->Array
Gem::GemPathSearcher#lib_dirs_for	(spec)->String
Gem::GemPathSearcher#matching_file?	(spec,path)->bool
Gem::GemPathSearcher#matching_files	->Array
Gem::GemPathSearcher.new	
Gem::GemRunner#run	(args)
Gem::Indexer#abbreviate	(spec)->Gem::Specification
Gem::Indexer#build_indicies	
Gem::Indexer#collect_specs	->Gem::SourceIndex
Gem::Indexer#compact_specs	(specs)->Array
Gem::Indexer#compress	(filename,extension)
Gem::Indexer#dest_directory	->String
Gem::Indexer#directory	->String
Gem::Indexer#gem_file_list	->Array
Gem::Indexer#generate_index	
Gem::Indexer#gzip	(filename)
Gem::Indexer#install_indicies	
Gem::Indexer#make_temp_directories	
Gem::Indexer#paranoid	(path,extension)
Gem::Indexer#sanitize	(spec)->Gem::Specification
Gem::Indexer#sanitize_string	(string)->String
Gem::Indexer.new	(directory)
Gem::Indexer::AbstractIndexBuilder#build	{...}
Gem::Indexer::AbstractIndexBuilder#cleanup	
Gem::Indexer::AbstractIndexBuilder#compress	(filename,ext='rz')
Gem::Indexer::AbstractIndexBuilder#directory	->String
Gem::Indexer::AbstractIndexBuilder#end_index	
Gem::Indexer::AbstractIndexBuilder#filename	->String
Gem::Indexer::AbstractIndexBuilder#files	->[String]
Gem::Indexer::AbstractIndexBuilder#start_index	
Gem::Indexer::AbstractIndexBuilder#unzip	(string)->String
Gem::Indexer::AbstractIndexBuilder#zip	(string)->String
Gem::Indexer::AbstractIndexBuilder.new	(filename,directory)
Gem::Indexer::LatestIndexBuilder#add	(spec)
Gem::Indexer::LatestIndexBuilder#cleanup	
Gem::Indexer::LatestIndexBuilder#end_index	
Gem::Indexer::LatestIndexBuilder#start_index	
Gem::Indexer::MarshalIndexBuilder#end_index	
Gem::Indexer::MasterIndexBuilder#add	(spec)
Gem::Indexer::MasterIndexBuilder#cleanup	
Gem::Indexer::MasterIndexBuilder#end_index	
Gem::Indexer::MasterIndexBuilder#start_index	
Gem::Indexer::QuickIndexBuilder#add	(spec)
Gem::Indexer::QuickIndexBuilder#add_marshal	(spec)
Gem::Indexer::QuickIndexBuilder#add_yaml	(spec)
Gem::Indexer::QuickIndexBuilder#cleanup	
Gem::InstallUpdateOptions#add_install_update_options	
Gem::InstallUpdateOptions#install_update_defaults_str	->String
Gem::Installer#app_script_text	->String
Gem::Installer#bin_dir	->String
Gem::Installer#build_extensions	
Gem::Installer#ensure_dependency	->true
Gem::Installer#extract_files	
Gem::Installer#formatted_program_filename	(filename)->String
Gem::Installer#gem_home	->String
Gem::Installer#generate_bin	
Gem::Installer#generate_bin_script	(filename,bindir)
Gem::Installer#generate_bin_symlink	(filename,bindir)
Gem::Installer#generate_windows_script	(bindir,filename)
Gem::Installer#install	->Gem::Specification
Gem::Installer#installation_satisfies_dependency?	(dependency)->bool
Gem::Installer#shebang	(bin_file_name)->String
Gem::Installer#spec	->Gem::Specification
Gem::Installer#unpack	(directory)
Gem::Installer#windows_stub_script	->String
Gem::Installer#write_spec	
Gem::Installer.exec_format	->String
Gem::Installer.exec_format=	(format)
Gem::Installer.home_install_warning	->bool
Gem::Installer.home_install_warning=	(flag)
Gem::Installer.new	(gem,options={})
Gem::Installer.path_warning	->bool
Gem::Installer.path_warning=	(flag)
Gem::LoadError#name	->String
Gem::LoadError#name=	(gem_name)
Gem::LoadError#version_requirement	->Get::Requirement
Gem::LoadError#version_requirement=	(version_requirement)
Gem::LocalRemoteOptions#accept_uri_http	
Gem::LocalRemoteOptions#add_bulk_threshold_option	
Gem::LocalRemoteOptions#add_local_remote_options	
Gem::LocalRemoteOptions#add_proxy_option	
Gem::LocalRemoteOptions#add_source_option	
Gem::LocalRemoteOptions#add_update_sources_option	
Gem::LocalRemoteOptions#both?	->bool
Gem::LocalRemoteOptions#local?	->bool
Gem::LocalRemoteOptions#remote?	->bool
Gem::OldFormat#file_entries	->Array
Gem::OldFormat#file_entries=	(file_entries)
Gem::OldFormat#gem_path	->String
Gem::OldFormat#gem_path=	(path)
Gem::OldFormat#spec	->Gem::Specification
Gem::OldFormat#spec=	(spec)
Gem::OldFormat.from_file_by_path	(file_path)->Gem::OldFormat
Gem::OldFormat.from_io	(io,gem_path='(io)')->Gem::OldFormat
Gem::OldFormat.new	(gem_path)
Gem::Package.open	(io,mode='r',signer=nil){|tar_io|...}
Gem::Package.pack	(src,destname,signer=nil)
Gem::Package::FSyncDir#fsync_dir	(dirname)
Gem::Package::TarHeader#==	
Gem::Package::TarHeader#checksum	
Gem::Package::TarHeader#devmajor	
Gem::Package::TarHeader#devminor	
Gem::Package::TarHeader#empty?	
Gem::Package::TarHeader#gid	
Gem::Package::TarHeader#gname	
Gem::Package::TarHeader#linkname	
Gem::Package::TarHeader#magic	
Gem::Package::TarHeader#mode	
Gem::Package::TarHeader#mtime	
Gem::Package::TarHeader#name	
Gem::Package::TarHeader#prefix	
Gem::Package::TarHeader#size	
Gem::Package::TarHeader#to_s	
Gem::Package::TarHeader#typeflag	
Gem::Package::TarHeader#uid	
Gem::Package::TarHeader#uname	
Gem::Package::TarHeader#update_checksum	
Gem::Package::TarHeader#version	
Gem::Package::TarHeader.from	
Gem::Package::TarInput#close	
Gem::Package::TarInput#each	{...}
Gem::Package::TarInput#extract_entry	(destdir,entry,expected_md5sum=nil)
Gem::Package::TarInput#load_gemspec	(io)->Gem::Specification
Gem::Package::TarInput#metadata	->Gem::Specification
Gem::Package::TarInput#zipped_stream	(entry)
Gem::Package::TarInput.new	(io,security_policy=nil)
Gem::Package::TarInput.open	(io,security_policy=nil){|is|...}
Gem::Package::TarOutput#add_gem_contents	
Gem::Package::TarOutput#add_metadata	
Gem::Package::TarOutput#add_signatures	
Gem::Package::TarOutput#close	
Gem::Package::TarOutput.new	(io,signer)
Gem::Package::TarOutput.open	
Gem::Package::TarReader#close	
Gem::Package::TarReader#each	
Gem::Package::TarReader#each_entry	
Gem::Package::TarReader#rewind	
Gem::Package::TarReader.new	
Gem::Package::TarReader::Entry#bytes_read	
Gem::Package::TarReader::Entry#check_closed	
Gem::Package::TarReader::Entry#close	
Gem::Package::TarReader::Entry#closed?	
Gem::Package::TarReader::Entry#directory?	
Gem::Package::TarReader::Entry#eof?	
Gem::Package::TarReader::Entry#file?	
Gem::Package::TarReader::Entry#full_name	
Gem::Package::TarReader::Entry#getc	
Gem::Package::TarReader::Entry#header	
Gem::Package::TarReader::Entry#pos	
Gem::Package::TarReader::Entry#read	
Gem::Package::TarReader::Entry#rewind	
Gem::Package::TarWriter#add_file	
Gem::Package::TarWriter#add_file_simple	
Gem::Package::TarWriter#check_closed	
Gem::Package::TarWriter#close	
Gem::Package::TarWriter#closed?	
Gem::Package::TarWriter#flush	
Gem::Package::TarWriter#mkdir	
Gem::Package::TarWriter#split_name	
Gem::Package::TarWriter.new	
Gem::Package::TarWriter::BoundedStream#limit	
Gem::Package::TarWriter::BoundedStream#write	
Gem::Package::TarWriter::BoundedStream#written	
Gem::Package::TarWriter::RestrictedStream#write	
Gem::Platform#==	(other)->bool
Gem::Platform#===	(other)->bool
Gem::Platform#=~	(other)->bool
Gem::Platform#cpu	->String
Gem::Platform#cpu=	(cpu)
Gem::Platform#os	->String
Gem::Platform#os=	(os)
Gem::Platform#to_a	->Array
Gem::Platform#to_s	->String
Gem::Platform#version	->String
Gem::Platform#version=	(version)
Gem::Platform.local	->Gem::Platform
Gem::Platform.match	->bool
Gem::Platform.new	(arch)
Gem::QuickLoader#calculate_integers_for_gem_version	
Gem::QuickLoader#const_missing	
Gem::QuickLoader#method_missing	
Gem::QuickLoader#push_all_highest_version_gems_on_load_path	
Gem::QuickLoader#push_gem_version_on_load_path	
Gem::QuickLoader.load_full_rubygems_library	
Gem::RemoteFetcher#connection_for	(uri)->Net::HTTP
Gem::RemoteFetcher#download	(spec,source_uri,install_dir=Gem.dir)->String
Gem::RemoteFetcher#escape	(str)->String
Gem::RemoteFetcher#fetch_path	(uri,mtime=nil,head=false)->String|Hash
Gem::RemoteFetcher#fetch_size	(uri)->Integer
Gem::RemoteFetcher#file_uri?	(uri)->bool
Gem::RemoteFetcher#get_file_uri_path	(uri)->String
Gem::RemoteFetcher#get_proxy_from_env	->URI|nil
Gem::RemoteFetcher#normalize_uri	(uri)->String
Gem::RemoteFetcher#open_uri_or_path	(uri,last_modified=nil,head=false,depth=0)
Gem::RemoteFetcher#request	(uri,request_class,last_modified=nil)->Net::HTTPResponse
Gem::RemoteFetcher#reset	(connection)->Net::HTTP
Gem::RemoteFetcher#unescape	(str)->String
Gem::RemoteFetcher.fetcher	->Gem::RemoteFetcher
Gem::RemoteFetcher.fetcher=	(fetcher)
Gem::RemoteFetcher::FetchError#to_s	->String
Gem::RemoteFetcher::FetchError#uri	->URI
Gem::RemoteFetcher::FetchError.new	(message,uri)->Gem::RemoteFetcher::FetchError
Gem::RequirePathsBuilder#write_require_paths_file_if_needed	(spec=@spec,gem_home=@gem_home)
Gem::Requirement#<=>	(other)->Integer
Gem::Requirement#as_list	->[String]
Gem::Requirement#marshal_dump	->Array
Gem::Requirement#marshal_load	(array)->Gem::Requirement
Gem::Requirement#normalize	
Gem::Requirement#parse	(obj)->Array
Gem::Requirement#requirements	->Array
Gem::Requirement#satisfied_by?	(version)->bool
Gem::Requirement#satisfy?	(op,version,required_version)->bool
Gem::Requirement#to_s	
Gem::Requirement.create	->Gem::Requirement
Gem::Requirement.default	->Gem::Requirement
Gem::Requirement.new	(requirements)->Gem::Requirement
Gem::Security.add_trusted_cert	(cert,options={})
Gem::Security.build_cert	(name,key,options={})->OpenSSL::X509::Certificate
Gem::Security.build_self_signed_cert	(email_addr,options={})->Hash
Gem::Security.sign_cert	(cert,signing_key,signing_cert,options={})->OpenSSL::X509::Certificate
Gem::Security.verify_trust_dir	(path,perms)
Gem::Security::Policy#only_signed	->bool
Gem::Security::Policy#only_signed=	(flag)
Gem::Security::Policy#only_trusted	->bool
Gem::Security::Policy#only_trusted=	(flag)
Gem::Security::Policy#verify_chain	->bool
Gem::Security::Policy#verify_chain=	(flag)
Gem::Security::Policy#verify_data	->bool
Gem::Security::Policy#verify_data=	(flag)
Gem::Security::Policy#verify_gem	(signature,data,chain,time=Time.now)
Gem::Security::Policy#verify_root	->bool
Gem::Security::Policy#verify_root=	(flag)
Gem::Security::Policy#verify_signer	->bool
Gem::Security::Policy#verify_signer=	(flag)
Gem::Security::Policy.new	(policy={},options={})
Gem::Security::Policy.trusted_cert_path	(cert,options)->String
Gem::Security::Signer#cert_chain	->Array
Gem::Security::Signer#cert_chain=	(cert_chain)
Gem::Security::Signer#key	->OpenSSL::PKey::PKey
Gem::Security::Signer#key=	(key)
Gem::Security::Signer#sign	(data)
Gem::Security::Signer.new	(key,cert_chain)
Gem::Server#Marshal	(request,response)
Gem::Server#latest_specs	(request,response)
Gem::Server#quick	(request,response)
Gem::Server#root	(request,response)
Gem::Server#run	
Gem::Server#specs	(request,response)
Gem::Server#yaml	(request,response)
Gem::Server.new	(gem_dir,port,daemon)->Gem::Server
Gem::Server.run	(options)->Gem::Server
Gem::SourceIndex#add_spec	(gem_spec)->Gem::Specification
Gem::SourceIndex#add_specs	(*gem_specs)->Hash
Gem::SourceIndex#dump	
Gem::SourceIndex#each	{|full_name,gem|...}->Hash	->Enumerator
Gem::SourceIndex#find_name	(gem_name,version_requirement=Gem::Requirement.default)->Gem::Specification
Gem::SourceIndex#gem_signature	(gem_full_name)->String
Gem::SourceIndex#index_signature	->String
Gem::SourceIndex#latest_specs	->Array
Gem::SourceIndex#length	->Integer
Gem::SourceIndex#load_gems_in	(*spec_dirs)->self
Gem::SourceIndex#outdated	->Array
Gem::SourceIndex#refresh!	->self
Gem::SourceIndex#remove_spec	(full_name)->Gem::Specification
Gem::SourceIndex#search	(gem_pattern,platform_only=false)->[Gem::Specification]
Gem::SourceIndex#size	->Integer	->Integer
Gem::SourceIndex#spec_dirs	->[String]
Gem::SourceIndex#spec_dirs=	(dirs)
Gem::SourceIndex#specification	(full_name)->Gem::Specification|nil
Gem::SourceIndex#update	(source_uri,all)->bool
Gem::SourceIndex.from_gems_in	(*spec_dirs)->Gem::SourceIndex
Gem::SourceIndex.from_installed_gems	(*deprecated)->Gem::SourceIndex
Gem::SourceIndex.installed_spec_directories	->[String]
Gem::SourceIndex.load_specification	(file_name)->Gem::Specification|nil
Gem::SourceIndex.new	(specifications={})->Gem::SourceIndex
Gem::SourceInfoCache#cache_data	->Hash
Gem::SourceInfoCache#cache_file	->String
Gem::SourceInfoCache#flush	->false
Gem::SourceInfoCache#latest_cache_data	->Hash
Gem::SourceInfoCache#latest_cache_file	->String
Gem::SourceInfoCache#latest_system_cache_file	->String
Gem::SourceInfoCache#latest_user_cache_file	->String
Gem::SourceInfoCache#read_all_cache_data	
Gem::SourceInfoCache#read_cache_data	(file)->Hash
Gem::SourceInfoCache#refresh	(all)->false
Gem::SourceInfoCache#reset_cache_data	->true
Gem::SourceInfoCache#reset_cache_file	
Gem::SourceInfoCache#reset_cache_for	(url,cache_data)->Hash
Gem::SourceInfoCache#search	(pattern,platform_only=false,all=false)->[Gem::Specification]
Gem::SourceInfoCache#search_with_source	(pattern,only_platform=false,all=false)->Array
Gem::SourceInfoCache#set_cache_data	(hash)->true
Gem::SourceInfoCache#system_cache_file	->String
Gem::SourceInfoCache#try_file	(path)->String|nil
Gem::SourceInfoCache#update	->true
Gem::SourceInfoCache#user_cache_file	->String
Gem::SourceInfoCache#write_cache	
Gem::SourceInfoCache.cache	(all=false)->Gem::SourceInfoCache
Gem::SourceInfoCache.cache_data	->Hash
Gem::SourceInfoCache.latest_system_cache_file	->String
Gem::SourceInfoCache.latest_user_cache_file	->String
Gem::SourceInfoCache.reset	
Gem::SourceInfoCache.search	(*args)->[Gem::Specification]
Gem::SourceInfoCache.search_with_source	(*args)->Array
Gem::SourceInfoCache.system_cache_file	->String
Gem::SourceInfoCache.user_cache_file	->String
Gem::SourceInfoCacheEntry#refresh	(source_uri,all)->Gem::SourceIndex
Gem::SourceInfoCacheEntry#size	->Fixnum
Gem::SourceInfoCacheEntry#source_index	->Gem::SourceIndex
Gem::SourceInfoCacheEntry.new	(si,size)
Gem::SpecFetcher#cache_dir	(uri)->String
Gem::SpecFetcher#dir	->String
Gem::SpecFetcher#fetch	(dependency,all=false,matching_platform=true)->Array
Gem::SpecFetcher#fetch_spec	(spec,source_uri)->object
Gem::SpecFetcher#find_matching	(dependency,all=false,matching_platform=true)->Array
Gem::SpecFetcher#latest_specs	->Hash
Gem::SpecFetcher#legacy_repos	->Array
Gem::SpecFetcher#list	(all=false)->Array
Gem::SpecFetcher#load_specs	(source_uri,file)->object
Gem::SpecFetcher#specs	->Hash
Gem::SpecFetcher#warn_legacy	(exception){...}->bool
Gem::SpecFetcher.fetcher	->Gem::SpecFetcher
Gem::SpecFetcher.fetcher=	(fetcher)
Gem::Specification#_dump	->String
Gem::Specification#add_bindir	(executables)->Array|nil
Gem::Specification#add_dependency	
Gem::Specification#add_development_dependency	(gem,*requirements)->Array
Gem::Specification#add_runtime_dependency	(gem,*requirements)->Array
Gem::Specification#assign_defaults	
Gem::Specification#author	->String
Gem::Specification#author=	(name)
Gem::Specification#authors	->Array
Gem::Specification#authors=	(names)
Gem::Specification#autorequire	->String
Gem::Specification#autorequire=	(lib)
Gem::Specification#bindir	->String
Gem::Specification#bindir=	(dir)
Gem::Specification#cert_chain	->Array
Gem::Specification#cert_chain=	(arr)
Gem::Specification#date	->Time
Gem::Specification#date=	(date)
Gem::Specification#default_executable	->String|nil
Gem::Specification#default_executable=	(executable)
Gem::Specification#dependencies	->Array
Gem::Specification#dependent_gems	->Array
Gem::Specification#description	->String
Gem::Specification#description=	(desc)
Gem::Specification#development_dependencies	->Array
Gem::Specification#email	->String
Gem::Specification#email=	(email)
Gem::Specification#executable	->String
Gem::Specification#executable=	(executable)
Gem::Specification#executables	->[String]
Gem::Specification#executables=	(executables)
Gem::Specification#extensions	->[String]
Gem::Specification#extensions=	(paths)
Gem::Specification#extra_rdoc_files	->[String]
Gem::Specification#extra_rdoc_files=	(paths)
Gem::Specification#file_name	->String
Gem::Specification#files	->[String]
Gem::Specification#files=	(files)
Gem::Specification#full_gem_path	->String
Gem::Specification#full_name	->String
Gem::Specification#has_rdoc	->bool
Gem::Specification#has_rdoc=	(flag)
Gem::Specification#has_rdoc?	->bool
Gem::Specification#has_test_suite?	->bool
Gem::Specification#has_unit_tests?	->bool
Gem::Specification#homepage	->String
Gem::Specification#homepage=	(uri)
Gem::Specification#installation_path	->String
Gem::Specification#lib_files	->[String]
Gem::Specification#loaded=	(flag)
Gem::Specification#loaded?	->bool
Gem::Specification#loaded_from	->String
Gem::Specification#loaded_from=	(path)
Gem::Specification#mark_version	->String
Gem::Specification#name	->String
Gem::Specification#name=	(name)
Gem::Specification#normalize	->[String]
Gem::Specification#original_name	->String
Gem::Specification#original_platform	->String
Gem::Specification#original_platform=	(platform)
Gem::Specification#platform	->String
Gem::Specification#platform=	(platform)
Gem::Specification#post_install_message	->String
Gem::Specification#post_install_message=	(message)
Gem::Specification#rdoc_options	->[String]
Gem::Specification#rdoc_options=	(options)
Gem::Specification#require_path	->String
Gem::Specification#require_path=	(path)
Gem::Specification#require_paths	->[String]
Gem::Specification#require_paths=	(paths)
Gem::Specification#required_ruby_version	->Gem::Requirement
Gem::Specification#required_ruby_version=	(requirement)
Gem::Specification#required_rubygems_version	->Gem::Requirement
Gem::Specification#required_rubygems_version=	(requirement)
Gem::Specification#requirements	->Array
Gem::Specification#requirements=	(informations)
Gem::Specification#rubyforge_project	->String
Gem::Specification#rubyforge_project=	(project_name)
Gem::Specification#rubygems_version	->String
Gem::Specification#rubygems_version=	(version)
Gem::Specification#runtime_dependencies	->Array
Gem::Specification#satisfies_requirement?	(dependency)->bool
Gem::Specification#signing_key	->String
Gem::Specification#signing_key=	(key)
Gem::Specification#specification_version	->Integer
Gem::Specification#specification_version=	(version)
Gem::Specification#summary	->String
Gem::Specification#summary=	(summary)
Gem::Specification#test_file	->String
Gem::Specification#test_file=	(file)
Gem::Specification#test_files	->[String]
Gem::Specification#test_files=	(files)
Gem::Specification#test_suite_file	->String
Gem::Specification#test_suite_file=	(file)
Gem::Specification#to_ruby	->String
Gem::Specification#validate	->bool
Gem::Specification#version	->Gem::Version
Gem::Specification#version=	(version)
Gem::Specification#yaml_initialize	
Gem::Specification._load	(str)->Gem::Specification
Gem::Specification.array_attribute	(name)
Gem::Specification.array_attributes	->Array
Gem::Specification.attribute	(name)
Gem::Specification.attribute_alias_singular	(singular,plural)
Gem::Specification.attribute_defaults	->Array
Gem::Specification.attribute_names	->Array
Gem::Specification.attributes	(*args)
Gem::Specification.default_value	(name)->object
Gem::Specification.from_yaml	(input)->Gem::Specification
Gem::Specification.list	->Array
Gem::Specification.load	(filename)->Gem::Specification
Gem::Specification.normalize_yaml_input	(input)->String
Gem::Specification.overwrite_accessor	(name){...}
Gem::Specification.read_only	(*names)
Gem::Specification.required_attribute	(name,default=nil)
Gem::Specification.required_attribute?	(name)->bool
Gem::Specification.required_attributes	->Array
Gem::StreamUI#alert	(statement,question=nil)->String|nil
Gem::StreamUI#alert_error	(statement,question=nil)->String|nil
Gem::StreamUI#alert_warning	(statement,question=nil)->String|nil
Gem::StreamUI#ask	(question)->String|nil
Gem::StreamUI#ask_yes_no	(question)->bool
Gem::StreamUI#choose_from_list	(question,list)->Array
Gem::StreamUI#errs	->IO
Gem::StreamUI#ins	->IO
Gem::StreamUI#outs	->IO
Gem::StreamUI#progress_reporter	(*args)->SilentProgressReporter|SimpleProgressReporter|VerboseProgressReporter
Gem::StreamUI#say	(statement='')
Gem::StreamUI#terminate_interaction	(status=0)
Gem::StreamUI.new	(in_stream,out_stream,err_stream=STDERR)
Gem::StreamUI::SilentProgressReporter#count	
Gem::StreamUI::SilentProgressReporter#done	
Gem::StreamUI::SilentProgressReporter#updated	(message)
Gem::StreamUI::SilentProgressReporter.new	(out_stream,size,initial_message,terminal_message=nil)
Gem::StreamUI::SimpleProgressReporter#count	->Integer
Gem::StreamUI::SimpleProgressReporter#done	
Gem::StreamUI::SimpleProgressReporter#updated	(message)
Gem::StreamUI::SimpleProgressReporter.new	(out_stream,size,initial_message,terminal_message=nil)
Gem::StreamUI::VerboseProgressReporter#count	->Integer
Gem::StreamUI::VerboseProgressReporter#done	
Gem::StreamUI::VerboseProgressReporter#updated	(message)
Gem::StreamUI::VerboseProgressReporter.new	(out_stream,size,initial_message,terminal_message=nil)
Gem::Uninstaller#ask_if_ok	(spec)->bool
Gem::Uninstaller#bin_dir	->String
Gem::Uninstaller#dependencies_ok?	(spec)->bool
Gem::Uninstaller#gem_home	->String
Gem::Uninstaller#path_ok?	(spec)->bool
Gem::Uninstaller#remove	(spec,list)
Gem::Uninstaller#remove_all	(list)
Gem::Uninstaller#remove_executables	(gemspec)
Gem::Uninstaller#spec	->Gem::Specification
Gem::Uninstaller#uninstall	
Gem::Uninstaller#uninstall_gem	(spec,specs)
Gem::Uninstaller.new	(gem,options={})
Gem::UserInteraction#alert	(*args)
Gem::UserInteraction#alert_error	(*args)
Gem::UserInteraction#alert_warning	(*args)
Gem::UserInteraction#ask	(*args)->String
Gem::UserInteraction#ask_yes_no	(*args)->bool
Gem::UserInteraction#choose_from_list	(*args)->Array
Gem::UserInteraction#say	(*args)
Gem::UserInteraction#terminate_interaction	(*args)
Gem::Validator#alien	->[Gem::Validator.ErrorData]
Gem::Validator#remove_leading_dot_dir	(path)->String
Gem::Validator#unit_test	(gem_spec)
Gem::Validator#verify_gem	(gem_data)
Gem::Validator#verify_gem_file	(gem_path)
Gem::Version#<=>	(other)->-1|0|1|nil
Gem::Version#bump	->Gem::Version
Gem::Version#eql?	(other)->bool
Gem::Version#ints	->[Integer]
Gem::Version#marshal_dump	->[String]
Gem::Version#marshal_load	(array)->self
Gem::Version#normalize	
Gem::Version#to_ints	->[Integer]
Gem::Version#to_s	->String
Gem::Version#to_yaml_properties	->[String]
Gem::Version#version	->String
Gem::Version#version=	(version)
Gem::Version#yaml_initialize	
Gem::Version.correct?	(version)->bool
Gem::Version.create	(input)->Gem::Version|nil
Gem::VersionOption#add_platform_option	(task=command,*wrap)
Gem::VersionOption#add_version_option	(task=command,*wrap)
GetoptLong#each	{|optname,optarg|...}
GetoptLong#each_option	{|optname,optarg|...}
GetoptLong#error	->Class|nil	?->Class|nil
GetoptLong#error?	->Class|nil
GetoptLong#error_message	->String|nil
GetoptLong#get	->[String,String]
GetoptLong#get_option	->[String,String]
GetoptLong#ordering	->Fixnum
GetoptLong#ordering=	(ordering)
GetoptLong#quiet	->true|false	?->true|false
GetoptLong#quiet=	(flag)
GetoptLong#quiet?	->true|false
GetoptLong#set_error	(type,message)
GetoptLong#set_options	(*arguments)->self
GetoptLong#terminate	->self
GetoptLong#terminated?	->true|false
GetoptLong.new	(*arguments)
Hash#==	(other)->bool
Hash#===	(other)->bool
Hash#[]	(key)->object|nil
Hash#[]=	(key,value)
Hash#assoc	(key)->Array|nil
Hash#clear	->self
Hash#clone	->Hash
Hash#compare_by_identity	->self
Hash#compare_by_identity?	->bool
Hash#default	->object|nil	(key)->object|nil
Hash#default=	(value)
Hash#default_proc	->Proc|nil
Hash#delete	(key)->object|nil	(key){|key|...}->object
Hash#delete_if	->Enumerator	{|key,value|...}->self
Hash#dup	->Hash
Hash#each	{|key,value|...}->self	->Enumerator
Hash#each_key	{|key|...}->self	->Enumerator
Hash#each_pair	{|key,value|...}->self	->Enumerator
Hash#each_value	{|value|...}->self	->Enumerator
Hash#empty?	->bool
Hash#eql?	(other)->bool
Hash#equal?	(other)->bool
Hash#fetch	(key,default=nil){|key|...}->object
Hash#flatten	(level=1)->Array
Hash#has_key?	(key)->bool
Hash#has_value?	(value)->bool
Hash#hash	->Integer
Hash#include?	(key)->bool
Hash#index	(val)->object
Hash#inspect	->String
Hash#invert	->Hash
Hash#key	(val)->object
Hash#key?	(key)->bool
Hash#keys	->[object]
Hash#length	->Integer
Hash#member?	(key)->bool
Hash#merge	(other)->Hash	(other){|key,self_val,other_val|...}->Hash	!(other)->self	!(other){|key,self_val,other_val|...}->self
Hash#merge!	(other)->self	(other){|key,self_val,other_val|...}->self
Hash#rassoc	(value)->Array|nil
Hash#rehash	->self
Hash#reject	{|key,value|...}->Hash	->Enumerable::Enumerator
Hash#reject!	->Enumerator	{|key,value|...}->self|nil
Hash#replace	(other)->self
Hash#select	->Enumerator	{|key,value|...}->Hash
Hash#shift	->[object,object]
Hash#size	->Integer
Hash#sort	->Array	{|a,b|...}->Array
Hash#store	(key,value)->object
Hash#to_a	->[Array]
Hash#to_hash	->self
Hash#to_s	->String
Hash#update	(other)->self	(other){|key,self_val,other_val|...}->self
Hash#value?	(value)->bool
Hash#values	->[object]
Hash#values_at	(*keys)->[object]
Hash.[]	(other)->Hash	(*key_and_value)->Hash
Hash.new	(ifnone=nil)->Hash	{|hash,key|...}->Hash
Hash.try_convert	(obj)->Hash|nil
IO#<<	(object)->self
IO#binmode	->self
IO#binmode?	->bool
IO#bytes	->Enumerator
IO#chars	{|c|...}->self	->Enumerator
IO#clone	->IO
IO#close	
IO#close_on_exec=	(bool)
IO#close_on_exec?	->bool
IO#close_read	
IO#close_write	
IO#closed?	->bool
IO#dup	->IO
IO#each	(rs=$/){|line|...}->self	(rs=$/)->Enumerator
IO#each_byte	{|ch|...}->self	->Enumerator
IO#each_char	{|c|...}->self	->Enumerator
IO#each_line	(rs=$/){|line|...}->self	(rs=$/)->Enumerator
IO#eof	->bool	?->bool
IO#eof?	->bool
IO#expect	(pattern,timeout=9999999)->Array|nil	(pattern,timeout=9999999){|array|...}
IO#external_encoding	->Encoding|nil
IO#fcntl	(cmd,arg=0)->Integer
IO#fileno	->Integer
IO#flush	->self
IO#fsync	->0|nil
IO#getbyte	->Integer|nil
IO#getc	->String|nil
IO#gets	(rs=$/,limit)->String|nil
IO#internal_encoding	->Encoding|nil
IO#ioctl	(cmd,arg=0)->Integer
IO#isatty	->bool
IO#lineno	->Integer
IO#lineno=	(number)
IO#lines	(rs=$/)->Enumerator
IO#nonblock	(bool=true){...}->object
IO#nonblock=	(bool)
IO#nonblock?	->bool
IO#nread	->Integer
IO#pid	->Integer|nil
IO#pos	->Integer
IO#pos=	(n)
IO#print	(*arg)
IO#printf	(format,*arg)
IO#putc	(ch)->object
IO#puts	(*obj)
IO#read	(length=nil,outbuf="")->String|nil
IO#read_nonblock	(maxlen,outbuf="")->String
IO#readbyte	->Integer
IO#readchar	->String
IO#readline	(rs=$/)->String
IO#readlines	(rs=$/)->[String]
IO#readpartial	(maxlen,outbuf="")->String
IO#ready?	->bool|nil
IO#reopen	(io)->self	(path)->self	(path,mode)->self
IO#rewind	->0
IO#scanf	(format)->Array	(format){|*ary|...}->Array
IO#seek	(offset,whence=IO::SEEK_SET)->0
IO#set_encoding	(enc_str)->self	(ext_enc)->self	(ext_enc,int_enc)->self
IO#stat	->File::Stat
IO#sync	->bool
IO#sync=	(newstate)
IO#sysread	(maxlen,outbuf="")->String
IO#sysseek	(offset,whence=IO::SEEK_SET)->Integer
IO#syswrite	(string)->Integer
IO#tell	->Integer
IO#to_i	->Integer
IO#to_io	->self
IO#tty?	->bool
IO#ungetbyte	(c)
IO#ungetc	(char)
IO#wait	(timeout=nil)->bool|self|nil
IO#write	(str)->Integer
IO#write_nonblock	(string)->Integer
IO.binread	(path,length=nil,offset=0)->String|nil
IO.copy_stream	(src,dst,copy_length=nil)->Integer	(src,dst,copy_length,src_offset)->Integer
IO.for_fd	(fd,mode="r")->IO
IO.foreach	(path,rs=$/){|line|...}	(path,rs=$/)->Enumerator
IO.new	(fd,mode="r")->IO
IO.open	(fd,mode="r")->IO	(fd,mode="r"){|io|...}->object
IO.pipe	->[IO]	(enc_str)->[IO]	(ext_enc)->[IO]	(ext_enc,int_enc)->[IO]
IO.popen	(command,mode="r")->IO	(command,mode="r"){|io|...}->object	("-",mode="r")->IO	("-",mode="r"){|io|...}->object
IO.read	(path,opt={})->String|nil	(path,length=nil,opt={})->String|nil	(path,length=nil,offset=0,opt={})->String|nil
IO.readlines	(path,rs=$/)->[String]
IO.select	(reads,writes=[],excepts=[],timeout=nil)->[[IO]]|nil
IO.sysopen	(path,mode="r",perm=0666)->Integer
IO.try_convert	(obj)->IO|nil
IPAddr#&	(ipaddr)->IPAddr
IPAddr#<<	(num)->IPAddr
IPAddr#<=>	(other)->nil|Integer
IPAddr#==	(ipaddr)->bool
IPAddr#===	(ipaddr)->bool
IPAddr#>>	(num)->IPAddr
IPAddr#family	->Integer
IPAddr#hton	->String
IPAddr#include?	(ipaddr)->bool
IPAddr#inspect	->String
IPAddr#ip6_arpa	->String
IPAddr#ip6_int	->String
IPAddr#ipv4?	->bool
IPAddr#ipv4_compat	->IPAddr
IPAddr#ipv4_compat?	->bool
IPAddr#ipv4_mapped	->IPAddr
IPAddr#ipv4_mapped?	->bool
IPAddr#ipv6?	->bool
IPAddr#mask	(prefixlen)->IPAddr
IPAddr#mask!	(mask)->self
IPAddr#native	->self|IPAddr
IPAddr#reverse	->String
IPAddr#set	(addr,*family)->self
IPAddr#succ	->IPAddr
IPAddr#to_i	->Integer
IPAddr#to_range	->Range
IPAddr#to_s	->String
IPAddr#to_string	->String
IPAddr#|	(ipaddr)->IPAddr
IPAddr#~	->IPAddr
IPAddr.new	(addr='::',family=Socket::AF_UNSPEC)->IPAddr
IPAddr.new_ntoh	(addr)->IPAddr
IPAddr.ntop	(addr)
IPSocket#addr	->Array
IPSocket#peeraddr	->Array
IPSocket#recvfrom	(maxlen,flags=0)->Array
IPSocket.getaddress	(host)->String	(host)->String
IRB::Context#back_trace_limit	
IRB::Context#debug_level=	(n)
IRB::Context#eval_history=	(n)
IRB::Context#ignore_eof	
IRB::Context#ignore_eof=	(bool)
IRB::Context#ignore_sigint	
IRB::Context#ignore_sigint=	(bool)
IRB::Context#inf_ruby_mode	
IRB::Context#inf_ruby_mode=	(bool)
IRB::Context#inspect_mode=	(val)
IRB::Context#math_mode	
IRB::Context#prompt_c	
IRB::Context#prompt_i	
IRB::Context#prompt_s	
IRB::Context#rc	
IRB::Context#use_loader	
IRB::Context#use_loader=	(bool)
IRB::Context#use_prompt	
IRB::Context#use_prompt=	(bool)
IRB::Context#use_readline=	(val)
IRB::Frame.bottom	(n=0)
IRB::Frame.sender	
IRB::Frame.top	(n=0)
Iconv#close	->String
Iconv#conv	(str)->String
Iconv#discard_ilseq=	
Iconv#discard_ilseq?	
Iconv#iconv	(str,start=0,length=-1)->String
Iconv#transliterate=	
Iconv#transliterate?	
Iconv#trivial?	
Iconv.charset_map	->Hash
Iconv.conv	(to,from,str)->String
Iconv.ctlmethods	->Array
Iconv.iconv	(to,from,*strs)->Array
Iconv.list	->Array	{|*aliases|...}->Array
Iconv.new	(to,from)->Iconv
Iconv.open	(to,from)->Iconv	(to,from){|cd|...}->object
Iconv::Failure#failed	->String|Array
Iconv::Failure#inspect	->String
Iconv::Failure#success	->String|Array
Integer#%	(other)->Fixnum|Bignum|Float
Integer#&	(other)->Fixnum|Bignum
Integer#*	(other)->Fixnum|Bignum|Float
Integer#**	(other)->Fixnum|Bignum|Float
Integer#+	(other)->Fixnum|Bignum|Float
Integer#-	(other)->Fixnum|Bignum|Float
Integer#/	(other)->Fixnum|Bignum|Float
Integer#<	(other)->bool
Integer#<<	(bits)->Fixnum|Bignum
Integer#<=	(other)->bool
Integer#<=>	(other)->Fixnum
Integer#==	(other)->bool
Integer#>	(other)->bool
Integer#>=	(other)->bool
Integer#>>	(bits)->Fixnum|Bignum
Integer#[]	(nth)->Fixnum
Integer#^	(other)->Fixnum|Bignum
Integer#chr	->String
Integer#denominator	->Integer
Integer#downto	(min){|n|...}->self	(min)->Enumerator
Integer#even?	->bool
Integer#gcd	(n)->Integer
Integer#gcdlcm	(n)->[Integer]
Integer#integer?	->true
Integer#lcm	(n)->Integer
Integer#next	->Fixnum|Bignum
Integer#numerator	->Integer
Integer#odd?	->bool
Integer#ord	->Integer
Integer#pred	->Integer
Integer#prime?	->bool
Integer#prime_division	(generator=Prime::Generator23.new)->[[Integer,Integer]]
Integer#size	->Fixnum
Integer#succ	->Fixnum|Bignum
Integer#times	{|n|...}->self	->Enumerator
Integer#to_f	->Float
Integer#to_i	->self
Integer#to_int	->self
Integer#to_r	->Rational
Integer#to_s	->String	(base)->String
Integer#upto	(max){|n|...}->Fixnum|Bignum	(max)->Enumerator
Integer#|	(other)->Fixnum|Bignum
Integer#~	->Fixnum|Bignum
Integer.each_prime	(upper_bound){|prime|...}->object	(upper_bound)->Enumerator
Integer.from_prime_division	(pd)->Integer
IrbCommands#_	
IrbCommands#__	
IrbCommands#chws	([obj])
IrbCommands#conf	
IrbCommands#cws	([obj])
IrbCommands#exit	
IrbCommands#fg	(n)
IrbCommands#irb	([obj])
IrbCommands#irb_change_workspace	([obj])
IrbCommands#irb_chws	([obj])
IrbCommands#irb_context	
IrbCommands#irb_cws	([obj])
IrbCommands#irb_exit	
IrbCommands#irb_fg	(n)
IrbCommands#irb_jobs	
IrbCommands#irb_kill	(n)
IrbCommands#irb_load	(path,prev)
IrbCommands#irb_pop_workspace	
IrbCommands#irb_popws	
IrbCommands#irb_push_workspace	([obj])
IrbCommands#irb_pushws	([obj])
IrbCommands#irb_source	(path)
IrbCommands#jobs	
IrbCommands#kill	(n)
IrbCommands#popws	
IrbCommands#pushws	([obj])
IrbCommands#quit	
IrbCommands#souce	(path)
JSON.[]	(object,options)->object
JSON.create_id	->String
JSON.create_id=	(identifier)
JSON.dump	(object,io=nil,limit=nil)->String|IO
JSON.fast_generate	(object)->String
JSON.fast_unparse	(object)->String
JSON.generate	(object,state=nil)->String
JSON.generator	->JSON::Ext::Generator
JSON.load	(source,proc=nil)->object
JSON.parse	(source,options={})->object
JSON.parse!	(source,options={})->object
JSON.parser	->JSON::Ext::Parser
JSON.pretty_generate	(object,options=nil)->String
JSON.pretty_unparse	(object,options=nil)->String
JSON.restore	(source,proc=nil)->object
JSON.state	->JSON::Ext::Generator::State
JSON.unparse	(object,state=nil)->String
JSON::Generator::GeneratorMethods::Array#to_json	(state=nil,depth=0)->String
JSON::Generator::GeneratorMethods::FalseClass#to_json	->String
JSON::Generator::GeneratorMethods::Float#to_json	->String
JSON::Generator::GeneratorMethods::Hash#to_json	(state=nil,depth=0)->String
JSON::Generator::GeneratorMethods::Integer#to_json	->String
JSON::Generator::GeneratorMethods::NilClass#to_json	->String
JSON::Generator::GeneratorMethods::Object#to_json	->String
JSON::Generator::GeneratorMethods::String#to_json	->String
JSON::Generator::GeneratorMethods::String#to_json_raw	->String
JSON::Generator::GeneratorMethods::String#to_json_raw_object	->Hash
JSON::Generator::GeneratorMethods::String::Extend.json_create	(hash)->String
JSON::Generator::GeneratorMethods::TrueClass#to_json	->String
JSON::Parser#parse	->object
JSON::Parser#source	->String
JSON::Parser.new	(source,options=>{})
JSON::State#allow_nan?	->bool
JSON::State#array_nl	->String
JSON::State#array_nl=	(str)
JSON::State#check_circular?	->bool
JSON::State#configure	(options={})->self
JSON::State#forget	(object)->object
JSON::State#indent	->String
JSON::State#indent=	(string)
JSON::State#max_nesting	->Integer
JSON::State#max_nesting=	(depth)
JSON::State#object_nl	->String
JSON::State#object_nl=	(string)
JSON::State#remember	(object)->true
JSON::State#seen?	(object)->bool
JSON::State#space	->String
JSON::State#space=	(string)
JSON::State#space_before	->String
JSON::State#space_before=	(string)
JSON::State#to_h	->Hash
JSON::State.from_state	(options)->JSON::State
JSON::State.new	(options={})->JSON::State
Jacobian#dfdxi	(f,fx,x,i)
Jacobian#isEqual	(a,b,zero=0.0,e=1.0e-8)
Jacobian#jacobian	(f,fx,x)
Kconv.guess	(str)->Encoding|nil
Kconv.iseuc	(str)->bool
Kconv.isjis	(str)->bool
Kconv.issjis	(str)->bool
Kconv.isutf8	(str)->bool
Kconv.kconv	(str,out_code,in_code=Kconv::AUTO)->String
Kconv.toeuc	(str)->String
Kconv.tojis	(str)->String
Kconv.tolocale	(str)
Kconv.tosjis	(str)->String
Kconv.toutf16	(str)->String
Kconv.toutf32	(str)
Kconv.toutf8	(str)->String
Kernel#BigDecimal	(s[,n])
Kernel#DelegateClass	(superclass)->object
Kernel#Digest	(name)->object
Kernel#JSON	(object,options={})->object
Kernel#Mainloop	
Kernel#Pathname	(path)->Pathname
Kernel#TkGrid	(*args)
Kernel#TkPack	(*args)
Kernel#TkPlace	(*args)
Kernel#append_library	(libs,lib)
Kernel#arg_config	(config[,default])
Kernel#check_sizeof	(type,headers=nil,&b)
Kernel#checking_for	
Kernel#chmod	
Kernel#cp	
Kernel#create_header	
Kernel#create_makefile	(target[,srcdir])
Kernel#desc	(description)
Kernel#describe	(desc){...}
Kernel#dir_config	(target[,default])	(target[,idefault,ldefault])
Kernel#directory	(dir)
Kernel#egrep_cpp	(pat,src[,opt])
Kernel#enable_config	(config[,default])
Kernel#file	(*args){...}->Rake::FileTask
Kernel#file_create	(*args){...}->Rake::FileCreationTask
Kernel#find_header	(header,*paths)
Kernel#find_library	(lib,func,*pathes)
Kernel#gem	(gem_name,*version_requirements)->bool
Kernel#have_func	(func[,header])
Kernel#have_header	(header)
Kernel#have_library	(lib[,func])
Kernel#have_macro	(macro,headers=nil,opt="",&b)
Kernel#have_struct_member	(type,member,headers=nil,&b)
Kernel#have_type	(type,headers=nil,opt="",&b)
Kernel#have_var	(var,headers=nil,&b)
Kernel#help	
Kernel#httpd	
Kernel#import	(*filenames)
Kernel#install	
Kernel#install_rb	(mfile,dest,srcdir='.')
Kernel#j	(*objects)
Kernel#jj	(*objects)
Kernel#ln	
Kernel#mkdir	
Kernel#mkmf	
Kernel#multitask	(args){...}->Rake::MultiTask
Kernel#mv	
Kernel#namespace	(name=nil){...}->Rake::NameSpace
Kernel#pkg_config	(pkg)
Kernel#require	(path)->bool
Kernel#rm	
Kernel#rmdir	
Kernel#rule	(*args){|t|...}
Kernel#scanf	(format)->Array	(format){|*ary|...}->Array
Kernel#task	(*args){...}->Rake::Task
Kernel#time	(msg,width=25){...}->object
Kernel#timeout	(sec){|i|....}	(sec,exception_class=nil){|i|....}
Kernel#touch	
Kernel#try_compile	
Kernel#try_cpp	(src[,opt])
Kernel#try_link	(src[,opt])
Kernel#try_run	
Kernel#try_static_assert	
Kernel#wait_writable	
Kernel#what_type?	
Kernel#with_config	(config[,default])
Kernel#xmp	
Kernel#y	(obj)
Kernel.Array	(arg)->Array
Kernel.BigDecimal	(s[,n])
Kernel.Float	(arg)->Float
Kernel.Integer	(arg)->Integer
Kernel.Rational	(x,y=1)->Rational
Kernel.String	(arg)->String
Kernel.URI	(uri_str)->object
Kernel.__callee__	->Symbol|nil
Kernel.__method__	->Symbol	->Symbol|nil
Kernel.`	(command)->String
Kernel.abort	(message=$!.message)
Kernel.at_exit	{...}->Proc
Kernel.autoload	(const_name,feature)
Kernel.autoload?	(const_name)->String|nil
Kernel.binding	->Binding
Kernel.block_given?	->bool
Kernel.caller	(level_num=1)->[String]|nil
Kernel.catch	{|tag|....}->object	(tag){|tag|....}->object
Kernel.eval	(expr)->object	(expr,bind,fname=__FILE__,lineno=1)->object
Kernel.exec	(command)	(program,*args)
Kernel.exit	(status=true)
Kernel.exit!	(status=false)
Kernel.fail		(message)	(error_type,message=nil,backtrace=caller(0))
Kernel.fork	->Integer|nil	{...}->Integer|nil
Kernel.format	(format,*arg)->String
Kernel.gets	(rs=$/)->String|nil
Kernel.global_variables	->[Symbol]
Kernel.iterator?	->bool
Kernel.lambda	{...}->Proc	->Proc
Kernel.load	(file,priv=false)->true
Kernel.local_variables	->[Symbol]
Kernel.loop	{...}->object
Kernel.open	(file,mode_enc="r",perm=0666)->IO	(file,mode_enc="r",perm=0666){|io|...}->object	(name,mode='r',perm=nil,options={})->StringIO|File	(name,mode='r',perm=nil,options={}){|ouri|...}
Kernel.p	(*arg)->object|Array
Kernel.pp	(*obj)
Kernel.print	(*arg)
Kernel.printf	(format,*arg)	(port,format,*arg)
Kernel.proc	{...}->Proc	->Proc
Kernel.putc	(ch)->object
Kernel.puts	(*arg)
Kernel.raise		(message)	(error_type,message=nil,backtrace=caller(0))
Kernel.rand	(max=0)->Integer|Float
Kernel.readline	(rs=$/)->String
Kernel.readlines	(rs=$/)->[String]|nil
Kernel.require	(feature)->bool
Kernel.require_relative	(relative_feature)->bool
Kernel.select	(reads,writes=[],excepts=[],timeout=nil)->[[IO]]|nil
Kernel.set_trace_func	(proc)->object	{|event,file,line,id,binding,klass|...}->Proc
Kernel.sleep	([sec])->Integer
Kernel.spawn	(command)->Integer	(env,command)->Integer	(program,*arg)->Integer	(env,program,*arg)->Integer	(env,program,*arg,option)->Integer
Kernel.sprintf	(format,*arg)->String
Kernel.srand	->Integer	(seed)->Integer
Kernel.syscall	(num,*arg)->Integer
Kernel.system	(command)->bool	(program,*args)->bool
Kernel.test	(cmd,file)->bool|Time|Integer|nil	(cmd,file1,file2)->bool
Kernel.throw	(tag,value=nil)
Kernel.trace_var	(varname,hook)	(varname){|new_val|....}	(varname,hook)->[String|Proc]
Kernel.trap	(signal,command)->object	(signal){...}->object
Kernel.untrace_var	(varname,hook=nil)->[String|Proc]
Kernel.warn	(message)
LUSolve#ludecomp	(a,n,zero=0,one=1)
LUSolve#lusolve	(a,b,ps,zero=0.0)
LocalJumpError#exit_value	->object
LocalJumpError#reason	->Symbol
Logger#<<	(msg)->Integer|nil
Logger#add	(severity,message=nil,progname=nil)->true	(severity,message=nil,progname=nil){...}->true
Logger#close	
Logger#datetime_format	->String
Logger#datetime_format=	(format)
Logger#debug	(progname=nil)->true	(progname=nil){...}->true
Logger#debug?	->bool
Logger#error	(progname=nil){...}->true	(progname=nil)->true
Logger#error?	->bool
Logger#fatal	(progname=nil){...}->true	(progname=nil)->true
Logger#fatal?	->bool
Logger#formatter	->String
Logger#formatter=	(formatter)
Logger#info	(progname=nil){...}->true	(progname=nil)->true
Logger#info?	->bool
Logger#level	->Integer
Logger#level=	(level)
Logger#log	(severity,message=nil,progname=nil)->true	(severity,message=nil,progname=nil){...}->true
Logger#progname	->String
Logger#progname=	(name)
Logger#sev_threshold	->Integer
Logger#sev_threshold=	(level)
Logger#unknown	(progname=nil){...}->true	(progname=nil)->true
Logger#warn	(progname=nil){...}->true	(progname=nil)->true
Logger#warn?	->bool
Logger.new	(logdev,shift_age=0,shift_size=1048576)->Logger
Logger::Application#appname	->String
Logger::Application#level=	(level)
Logger::Application#log	(severity,message=nil)->true	(severity,message=nil){...}->true
Logger::Application#log=	(logdev)
Logger::Application#set_log	(logdev,shift_age=0,shift_size=1024000)->Integer
Logger::Application#start	
Logger::Application.new	(appname=nil)->Logger::Application
Logger::Formatter#call	(severity,time,progname,msg)->String
Logger::Formatter#datetime_format	->String
Logger::Formatter#datetime_format=	(format)
Logger::LogDevice#close	
Logger::LogDevice#dev	->IO
Logger::LogDevice#filename	->String|nil
Logger::LogDevice#write	(message)->Integer
Logger::LogDevice.new	(log=nil,opt={})->Logger::LogDevice
Marshal.dump	(obj,port='',limit=-1)->IO|String
Marshal.load	(port,proc=nil)->object
Marshal.restore	(port,proc=nil)->object
MatchData#[]	(n)->String|nil	(range)->[String]	(start,length)->[String]
MatchData#begin	(n)->Fixnum|nil
MatchData#captures	->[String]
MatchData#end	(n)->Fixnum|nil
MatchData#length	->Fixnum
MatchData#names	->Array
MatchData#offset	(n)->[Fixnum]
MatchData#post_match	->String
MatchData#pre_match	->String
MatchData#regexp	->Regexp
MatchData#size	->Fixnum
MatchData#string	->String
MatchData#to_a	->[String]
MatchData#to_s	->String
MatchData#values_at	(*index)->[String]
Math.acos	(x)->Float
Math.acosh	(x)->Float
Math.asin	(x)->Float
Math.asinh	(x)->Float
Math.atan	(x)->Float
Math.atan2	(x,y)->Float
Math.atanh	(x)->Float
Math.cos	(x)->Float
Math.cosh	(x)->Float
Math.erf	(x)->Float
Math.erfc	(x)->Float
Math.exp	(x)->Float
Math.frexp	(x)->[Float,Fixnum]
Math.hypot	(x,y)->Float
Math.ldexp	(x,exp)->Float
Math.log	(x)->Float
Math.log10	(x)->Float
Math.log2	(x)->Float
Math.rsqrt	(a)->Numeric
Math.sin	(x)->Float
Math.sinh	(x)->Float
Math.sqrt	(a)->Numeric	(x)->Float
Math.tan	(x)->Float
Math.tanh	(x)->Float
Matrix#*	(m)->Matrix
Matrix#**	(n)->Matrix
Matrix#+	(m)->Matrix
Matrix#-	(m)->Matrix
Matrix#/	(m)->Matrix
Matrix#==	(other)->bool
Matrix#[]	(i,j)
Matrix#clone	->Matrix
Matrix#coerce	(other)->Array
Matrix#collect	{|x|...}->Matrix
Matrix#column	(j)->Vector	(j){|x|...}
Matrix#column_size	->Fixnum
Matrix#column_vectors	->Array
Matrix#compare_by_row_vectors	(rows)->bool
Matrix#component	(i,j)
Matrix#det	->Rational|Float
Matrix#det_e	->Rational|Float
Matrix#determinant	->Rational|Float
Matrix#determinant_e	->Rational|Float
Matrix#element	(i,j)
Matrix#elements_to_f	->Array
Matrix#elements_to_i	->Array
Matrix#elements_to_r	->Array
Matrix#eql?	(other)->bool
Matrix#hash	->Fixnum
Matrix#inspect	->String
Matrix#inv	->Matrix
Matrix#inverse	->Matrix
Matrix#inverse_from	(src)->Matrix
Matrix#map	{|x|...}->Matrix
Matrix#minor	(from_row,row_size,from_col,col_size)->Matrix	(from_row..to_row,from_col..to_col)->Matrix
Matrix#rank	->Fixnum
Matrix#rank_e	->Fixnum
Matrix#regular?	->bool
Matrix#row	(i)->Vector	(i){|x|...}
Matrix#row_size	->Fixnum
Matrix#row_vectors	->Array
Matrix#singular?	->bool
Matrix#square?	->bool
Matrix#t	->Matrix
Matrix#to_a	->Array
Matrix#to_s	->String
Matrix#tr	->Fixnum|Float|Rational
Matrix#trace	->Fixnum|Float|Rational
Matrix#transpose	->Matrix
Matrix.I	(n)->Matrix
Matrix.[]	(rows)->Matrix
Matrix.column_vector	(column)->Matrix
Matrix.columns	(columns)->Matrix
Matrix.diagonal	(values)->Matrix
Matrix.identity	(n)->Matrix
Matrix.row_vector	(row)->Matrix
Matrix.rows	(rows,copy=true)->Matrix
Matrix.scalar	(n,value)->Matrix
Matrix.unit	(n)->Matrix
Matrix.zero	(n)->Matrix
Method#==	(other)->bool
Method#===	(other)->bool
Method#[]	(*args)->object
Method#arity	->Fixnum
Method#call	(*args)->object	(*args){...}->object
Method#eql?	(other)->bool
Method#equal?	(other)->bool
Method#hash	->Integer
Method#inspect	->String
Method#name	->Symbol
Method#owner	->Class|Module
Method#receiver	->object
Method#to_proc	->Proc
Method#unbind	->UnboundMethod
MiniTest.filter_backtrace	(backtrace)->Array
MiniTest::Assertions#_assertions	->Fixnum
MiniTest::Assertions#_assertions=	(count)
MiniTest::Assertions#assert	(test,message=nil)->true
MiniTest::Assertions#assert_block	(message=nil){...}->true
MiniTest::Assertions#assert_empty	(object,message=nil)->true
MiniTest::Assertions#assert_equal	(expected,actual,message=nil)->true
MiniTest::Assertions#assert_in_delta	(expected,actual,delta=0.001,message=nil)->true
MiniTest::Assertions#assert_in_epsilon	(acual,expected,epsilon=0.001,message=nil)->true
MiniTest::Assertions#assert_includes	(collection,object,message=nil)->true
MiniTest::Assertions#assert_instance_of	(klass,object,message=nil)->true
MiniTest::Assertions#assert_kind_of	(klass,object,message)->true
MiniTest::Assertions#assert_match	(regexp,str,message=nil)->true
MiniTest::Assertions#assert_nil	(object,message=nil)->true
MiniTest::Assertions#assert_operator	(operand1,operator,operand2,message=nil)->true
MiniTest::Assertions#assert_raises	(*args){...}->true
MiniTest::Assertions#assert_respond_to	(object,method_name,message=nil)->true
MiniTest::Assertions#assert_same	(expected,actual,message=nil)->true
MiniTest::Assertions#assert_send	(array,message=nil)->true
MiniTest::Assertions#assert_throws	(tag,message=nil){...}->true
MiniTest::Assertions#capture_io	{...}->Array
MiniTest::Assertions#exception_details	(exception,message)->String
MiniTest::Assertions#flunk	(message=nil)
MiniTest::Assertions#message	(message){...}->Proc
MiniTest::Assertions#mu_pp	(object)->String
MiniTest::Assertions#pass	(message=nil)->true
MiniTest::Assertions#refute	(test,message=nil)->true
MiniTest::Assertions#refute_empty	(object,message=nil)->true
MiniTest::Assertions#refute_equal	(expected,actual,message=nil)->true
MiniTest::Assertions#refute_in_delta	(expected,actual,delta=0.001,message=nil)->true
MiniTest::Assertions#refute_in_epsilon	(acual,expected,epsilon=0.001,message=nil)->true
MiniTest::Assertions#refute_includes	(collection,object,message=nil)->true
MiniTest::Assertions#refute_instance_of	(klass,object,message=nil)->true
MiniTest::Assertions#refute_kind_of	(klass,object,message=nil)->true
MiniTest::Assertions#refute_match	(regexp,str,message=nil)->true
MiniTest::Assertions#refute_nil	(object,message=nil)->true
MiniTest::Assertions#refute_operator	(operand1,operator,operand2,message=nil)->true
MiniTest::Assertions#refute_respond_to	(object,method_name)->true
MiniTest::Assertions#refute_same	(expected,actual,message=nil)->true
MiniTest::Assertions#skip	(message=nil,backtrace=caller)
MiniTest::Mock#expect	(name,retval,args=[])->self
MiniTest::Mock#verify	->true
MiniTest::Mock.new	
MiniTest::Spec.after	(type=:each){...}->Proc
MiniTest::Spec.before	(type=:each){...}->Proc
MiniTest::Spec.current	->MiniTest::Spec
MiniTest::Spec.it	(desc){...}
MiniTest::Spec.new	(name)
MiniTest::Unit#assertion_count	->Fixnum
MiniTest::Unit#assertion_count=	(count)
MiniTest::Unit#errors	->Fixnum
MiniTest::Unit#errors=	(count)
MiniTest::Unit#failures	->Fixnum
MiniTest::Unit#failures=	(count)
MiniTest::Unit#location	(exception)->String
MiniTest::Unit#puke	(klass,method_name,exception)->String
MiniTest::Unit#report	->Array
MiniTest::Unit#report=	(list)
MiniTest::Unit#run	(args=[])->Fixnum|nil
MiniTest::Unit#run_test_suites	(filter=/./)->Array
MiniTest::Unit#skips	->Fixnum
MiniTest::Unit#skips=	(count)
MiniTest::Unit#test_count	->Fixnum
MiniTest::Unit#test_count=	(count)
MiniTest::Unit.autorun	->true
MiniTest::Unit.output=	(stream)
MiniTest::Unit::TestCase#name	->String
MiniTest::Unit::TestCase#passed?	->bool
MiniTest::Unit::TestCase#run	(runner)->String
MiniTest::Unit::TestCase#setup	
MiniTest::Unit::TestCase#teardown	
MiniTest::Unit::TestCase.inherited	(klass)
MiniTest::Unit::TestCase.new	(name)
MiniTest::Unit::TestCase.reset	
MiniTest::Unit::TestCase.test_methods	->Array
MiniTest::Unit::TestCase.test_order	->Symbol
MiniTest::Unit::TestCase.test_suites	->Array
Module#<	(other)->bool|nil
Module#<=	(other)->bool|nil
Module#<=>	(other)->Integer|nil
Module#===	(obj)->bool
Module#>	(other)->bool|nil
Module#>=	(other)->bool|nil
Module#alias_method	(new,original)->self
Module#ancestors	->[Class,Module]
Module#append_features	(module_or_class)->self
Module#attr	(name,assignable=false)
Module#attr_accessor	(*name)
Module#attr_reader	(*name)
Module#attr_writer	(*name)
Module#autoload	(const_name,feature)
Module#autoload?	(const_name)->String|nil
Module#class_eval	(expr,fname="(eval)",lineno=1)->object	{|mod|...}->object
Module#class_exec	(*args){|*vars|...}->object
Module#class_variable_defined?	(name)->bool
Module#class_variable_get	(name)->object
Module#class_variable_set	(name,val)->object
Module#class_variables	->[Symbol]
Module#const_defined?	(name,inherit=true)->bool
Module#const_get	(name,inherit=true)->object
Module#const_missing	(name)
Module#const_set	(name,value)->object
Module#constants	(inherit=true)->[Symbol]
Module#define_method	(name,method)->Proc|Method|UnboundMethod	(name){...}->Proc
Module#extend_object	(module)->Module
Module#extended	(class_or_module)
Module#include	(*mod)->self
Module#include?	(mod)->bool
Module#included	(class_or_module)
Module#included_modules	->[Module]
Module#infect_with_assertions	(positive_prefix,negative_prefix,skip_regexp,map={})
Module#instance_method	(name)->UnboundMethod
Module#instance_methods	(inherited_too=true)->[Symbol]
Module#method_added	(name)
Module#method_defined?	(name,inherit=true)->bool
Module#method_removed	(name)
Module#method_undefined	(name)
Module#module_eval	(expr,fname="(eval)",lineno=1)->object	{|mod|...}->object
Module#module_exec	(*args){|*vars|...}->object
Module#module_function	(*name)->self
Module#name	->String
Module#private	(*name)->self
Module#private_class_method	(*name)->self
Module#private_instance_methods	(inherited_too=true)->[Symbol]
Module#private_method_defined?	(name)->bool
Module#protected	(*name)->self
Module#protected_instance_methods	(inherited_too=true)->[Symbol]
Module#protected_method_defined?	(name)->bool
Module#public	(*name)->self
Module#public_class_method	(*name)->self
Module#public_instance_methods	(inherited_too=true)->[Symbol]
Module#public_method_defined?	(name)->bool
Module#rake_extension	(method){...}
Module#remove_class_variable	(name)->object
Module#remove_const	(name)->object
Module#remove_method	(*name)->self
Module#to_s	->String
Module#undef_method	(*name)->self
Module.constants	->[Symbol]
Module.nesting	->[Class,Module]
Module.new	->Module	{|mod|...}->Module
Monitor#enter	
Monitor#exit	
Monitor#try_enter	->bool
Monitor.new	->Monitor
MonitorMixin#mon_enter	
MonitorMixin#mon_exit	
MonitorMixin#mon_synchronize	{...}->object
MonitorMixin#mon_try_enter	->bool
MonitorMixin#new_cond	->MonitorMixin::ConditionVariable
MonitorMixin#synchronize	{...}->object
MonitorMixin#try_mon_enter	->bool
MonitorMixin::ConditionVariable#broadcast	
MonitorMixin::ConditionVariable#count_waiters	->Integer
MonitorMixin::ConditionVariable#signal	
MonitorMixin::ConditionVariable#wait	(timeout=nil)->bool
MonitorMixin::ConditionVariable#wait_until	{...}
MonitorMixin::ConditionVariable#wait_while	{...}
MultiTkIp#__create_safe_slave_obj	(safe_opts,app_name,tk_opts)
MultiTkIp#__create_trusted_slave_obj	(name,keys)
MultiTkIp#__eval	(str)
MultiTkIp#__invoke	(*args)
MultiTkIp#__pseudo_toplevel	
MultiTkIp#__pseudo_toplevel=	(m)
MultiTkIp#__pseudo_toplevel_evaluable=	(mode)
MultiTkIp#__pseudo_toplevel_evaluable?	
MultiTkIp#_add_new_tables	
MultiTkIp#_add_tk_procs	(name,args,body)
MultiTkIp#_conv_listelement	(arg)
MultiTkIp#_create_slave_object	(keys={})
MultiTkIp#_default_delete_hook	(slave)
MultiTkIp#_destroy_slaves_of_slaveIP	(ip)
MultiTkIp#_eval	(str)
MultiTkIp#_eval_with_enc	(str)
MultiTkIp#_eval_without_enc	(str)
MultiTkIp#_fromUTF8	(str,encoding=nil)
MultiTkIp#_get_global_var	(var)
MultiTkIp#_get_global_var2	(var,idx)
MultiTkIp#_get_variable	(var,flag)
MultiTkIp#_get_variable2	(varmidx,flag)
MultiTkIp#_init_ip_env	(script)
MultiTkIp#_init_ip_internal	(init_ip_env,add_tk_procs)
MultiTkIp#_invoke	(*args)
MultiTkIp#_invoke_with_enc	(*args)
MultiTkIp#_invoke_without_enc	(*args)
MultiTkIp#_ip_id_	
MultiTkIp#_is_master_of?	(tcltkip_obj)
MultiTkIp#_make_menu_embeddable	
MultiTkIp#_merge_tklist	(*args)
MultiTkIp#_receiver_mainloop	(check_root)
MultiTkIp#_remove_tk_procs	(*names)
MultiTkIp#_return_value	
MultiTkIp#_set_global_var	(var,value)
MultiTkIp#_set_global_var2	(var,idx,value)
MultiTkIp#_set_variable	(var,value,flag)
MultiTkIp#_set_variable2	(var,idx,value,flag)
MultiTkIp#_split_tklist	(str)
MultiTkIp#_thread_tkwait	(mode,target)
MultiTkIp#_thread_vwait	(var)
MultiTkIp#_tk_cmd_tbl	
MultiTkIp#_tk_table_list	
MultiTkIp#_tk_windows	
MultiTkIp#_toUTF8	(str,encoding=nil)
MultiTkIp#_unset_global_var	(var)
MultiTkIp#_unset_global_var2	(var,idx)
MultiTkIp#_unset_variable	(var,flag)
MultiTkIp#_unset_variable2	(var,idx,flag)
MultiTkIp#abort	(msg=nil)
MultiTkIp#alias_delete	(slave,cmd_name)
MultiTkIp#alias_info	(slave,cmd_name)
MultiTkIp#alias_target	(aliascmd,slave='')
MultiTkIp#aliases	(slave='')
MultiTkIp#alive?	
MultiTkIp#allow_ruby_exit=	(mode)
MultiTkIp#allow_ruby_exit?	
MultiTkIp#background_call	(*args)
MultiTkIp#background_eval	(*args,&block)
MultiTkIp#background_eval_proc	(*args)
MultiTkIp#background_eval_str	(cmd,*eval_args)
MultiTkIp#background_eval_string	(cmd,*eval_args)
MultiTkIp#bg_call	(*args)
MultiTkIp#bg_eval	(*args,&block)
MultiTkIp#bg_eval_proc	(*args)
MultiTkIp#bg_eval_str	(cmd,*eval_args)
MultiTkIp#bg_eval_string	(cmd,*eval_args)
MultiTkIp#call	(*args)
MultiTkIp#cb_error	(e)
MultiTkIp#cb_eval	(cmd,*args)
MultiTkIp#def_alias	(slave,new_cmd,org_cmd,*args)
MultiTkIp#delete	(idx,&block)
MultiTkIp#delete_cmd	(slave,cmd)
MultiTkIp#delete_slaves	(*args)
MultiTkIp#deleted?	
MultiTkIp#encoding	
MultiTkIp#encoding=	(enc)
MultiTkIp#encoding_convert_from	(str,enc=Tk::None)
MultiTkIp#encoding_convert_to	(str,enc=Tk::None)
MultiTkIp#encoding_convertfrom	(str,enc=Tk::None)
MultiTkIp#encoding_convertto	(str,enc=Tk::None)
MultiTkIp#eval	(*args,&block)
MultiTkIp#eval_callback	(*args)
MultiTkIp#eval_proc	(*args)
MultiTkIp#eval_str	(cmd,*eval_args)
MultiTkIp#eval_string	(cmd,*eval_args)
MultiTkIp#exist?	(slave='')
MultiTkIp#exit	(st=true)
MultiTkIp#exit!	(st=false)
MultiTkIp#expose_cmd	(slave,cmd,aliasname=nil)
MultiTkIp#get_bgerror_handler	(slave='')
MultiTkIp#get_limit	(limit_type,slave='',slot=nil)
MultiTkIp#has_mainwindow?	
MultiTkIp#hidden_cmds	(slave='')
MultiTkIp#hide_cmd	(slave,cmd,aliasname=nil)
MultiTkIp#inspect	
MultiTkIp#invalid_namespace?	
MultiTkIp#invoke_hidden	(slave,cmd,*args)
MultiTkIp#invoke_hidden_on_global	(slave,cmd,*args)
MultiTkIp#invoke_hidden_on_namespace	(slave,ns,cmd,*args)
MultiTkIp#ip_name	
MultiTkIp#mainloop	(check_root=true,restart_on_dead=true)
MultiTkIp#make_safe	
MultiTkIp#manipulable?	
MultiTkIp#mark_trusted	(slave='')
MultiTkIp#master?	
MultiTkIp#path	
MultiTkIp#recursion_limit	(slave='',limit=Tk::None)
MultiTkIp#restart	(*args)
MultiTkIp#running_mainloop?	
MultiTkIp#safe?	
MultiTkIp#safe_base?	
MultiTkIp#safe_level	
MultiTkIp#safe_level=	(safe)
MultiTkIp#safeip_add_to_access_path	(dir)
MultiTkIp#safeip_configinfo	(slot=nil)
MultiTkIp#safeip_configure	(slot,value=Tk::None)
MultiTkIp#safeip_delete	
MultiTkIp#safeip_find_in_access_path	(dir)
MultiTkIp#safeip_set_log_cmd	(cmd=Proc.new)
MultiTkIp#set_bgerror_handler	(cmd=Proc.new,slave=nil,&block)
MultiTkIp#set_cb_error	(cmd=Proc.new)
MultiTkIp#set_limit	(limit_type,slave='',opts={})
MultiTkIp#set_safe_level	(safe)
MultiTkIp#share_stderr	(dist,src='')
MultiTkIp#share_stdin	(dist,src='')
MultiTkIp#share_stdio	(dist,src='')
MultiTkIp#share_stdout	(dist,src='')
MultiTkIp#slave?	
MultiTkIp#slaves	(all=false)
MultiTkIp#thread_eval_proc	(*args)
MultiTkIp#to_eval	
MultiTkIp#transfer_stderr	(dist,src='')
MultiTkIp#transfer_stdin	(dist,src='')
MultiTkIp#transfer_stdio	(dist,src='')
MultiTkIp#transfer_stdout	(dist,src='')
MultiTkIp#wait_on_mainloop=	(bool)
MultiTkIp#wait_on_mainloop?	
MultiTkIp.__getip	
MultiTkIp._conv_listelement	(arg)
MultiTkIp._create_console	
MultiTkIp._eval	(str)
MultiTkIp._eval_with_enc	(str)
MultiTkIp._eval_without_enc	(str)
MultiTkIp._fromUTF8	(str,encoding=nil)
MultiTkIp._get_global_var	(var)
MultiTkIp._get_global_var2	(var,idx)
MultiTkIp._get_variable	(var,flag)
MultiTkIp._get_variable2	(var,idx,flag)
MultiTkIp._invoke	(*args)
MultiTkIp._invoke_with_enc	(*args)
MultiTkIp._invoke_without_enc	(*args)
MultiTkIp._ip_id_	
MultiTkIp._make_menu_embeddable	(menu_path)
MultiTkIp._merge_tklist	(*args)
MultiTkIp._return_value	
MultiTkIp._set_global_var	(var,value)
MultiTkIp._set_global_var2	(var,idx,value)
MultiTkIp._set_variable	(var,value,flag)
MultiTkIp._set_variable2	(var,idx,value,flag)
MultiTkIp._split_tklist	(str)
MultiTkIp._thread_tkwait	(mode,target)
MultiTkIp._thread_vwait	(var)
MultiTkIp._toUTF8	(str,encoding=nil)
MultiTkIp._unset_global_var	(var)
MultiTkIp._unset_global_var2	(var,idx)
MultiTkIp._unset_variable	(var,flag)
MultiTkIp._unset_variable2	(var,idx,flag)
MultiTkIp.abort	(msg=nil)
MultiTkIp.add_tk_procs	(name,args=nil,body=nil)
MultiTkIp.alias_delete	(slave,cmd_name)
MultiTkIp.alias_info	(slave,cmd_name)
MultiTkIp.alias_target	(aliascmd,slave='')
MultiTkIp.aliases	(slave='')
MultiTkIp.alive?	
MultiTkIp.allow_ruby_exit=	(mode)
MultiTkIp.allow_ruby_exit?	
MultiTkIp.background_call	(*args)
MultiTkIp.background_eval	(*args,&block)
MultiTkIp.background_eval_proc	(*args)
MultiTkIp.background_eval_str	(cmd,*eval_args)
MultiTkIp.background_eval_string	(cmd,*eval_args)
MultiTkIp.bg_call	(*args)
MultiTkIp.bg_eval	(*args,&block)
MultiTkIp.bg_eval_proc	(*args)
MultiTkIp.bg_eval_str	(cmd,*eval_args)
MultiTkIp.bg_eval_string	(cmd,*eval_args)
MultiTkIp.bgerror	(cmd=Proc.new,slave=nil,&block)
MultiTkIp.call	
MultiTkIp.cb_entry_class	
MultiTkIp.create_table	
MultiTkIp.def_alias	(slave,new_cmd,org_cmd,*args)
MultiTkIp.delete	
MultiTkIp.delete_cmd	(slave,cmd)
MultiTkIp.delete_slaves	(*args)
MultiTkIp.deleted?	
MultiTkIp.deleteed?	
MultiTkIp.do_one_event	(flag=TclTkLib::EventFlag::ALL)
MultiTkIp.eval	(*args,&block)
MultiTkIp.eval_proc	
MultiTkIp.eval_str	(cmd,*eval_args)
MultiTkIp.eval_string	(cmd,*eval_args)
MultiTkIp.exist?	(slave='')
MultiTkIp.exit	(st=true)
MultiTkIp.exit!	(st=false)
MultiTkIp.expose_cmd	(slave,cmd,aliasname=nil)
MultiTkIp.get_cb_entry	(cmd)
MultiTkIp.get_eventloop_tick	
MultiTkIp.get_eventloop_weight	
MultiTkIp.get_limit	(limit_type,slave='',slot=nil)
MultiTkIp.get_no_event_wait	
MultiTkIp.has_mainwindow?	
MultiTkIp.hidden_cmds	(slave='')
MultiTkIp.hide_cmd	(slave,cmd,aliasname=nil)
MultiTkIp.inherited	(subclass)
MultiTkIp.init_ip_env	(script=Proc.new)
MultiTkIp.init_ip_internal	
MultiTkIp.invalid_namespace?	
MultiTkIp.invoke_hidden	(slave,cmd,*args)
MultiTkIp.invoke_hidden_on_global	(slave,cmd,*args)
MultiTkIp.invoke_hidden_on_namespace	(slave,ns,cmd,*args)
MultiTkIp.ip_name	
MultiTkIp.mainloop	(check_root=true)
MultiTkIp.mainloop_abort_on_exception	
MultiTkIp.mainloop_abort_on_exception=	(mode)
MultiTkIp.mainloop_watchdog	(check_root=true)
MultiTkIp.make_safe	
MultiTkIp.manipulable?	
MultiTkIp.mark_trusted	(slave='')
MultiTkIp.master?	
MultiTkIp.method_missing	
MultiTkIp.new	(safe=nil,keys={})
MultiTkIp.new_master	(safe=nil,keys={})
MultiTkIp.new_safeTk	(safe=4,keys={})
MultiTkIp.new_safe_slave	(safe=4,keys={})
MultiTkIp.new_slave	(safe=nil,keys={})
MultiTkIp.new_trusted_slave	(safe=nil,keys={})
MultiTkIp.path	
MultiTkIp.recursion_limit	(slave='',limit=Tk::None)
MultiTkIp.remove_tk_procs	(*names)
MultiTkIp.restart	(app_name=nil,keys={})
MultiTkIp.safe?	
MultiTkIp.safe_base?	
MultiTkIp.safe_level	
MultiTkIp.safe_level=	(safe)
MultiTkIp.set_eventloop_tick	(tick)
MultiTkIp.set_eventloop_weight	(loop_max,no_event_tick)
MultiTkIp.set_limit	(limit_type,slave='',opts={})
MultiTkIp.set_no_event_wait	(tick)
MultiTkIp.set_safe_level	(safe)
MultiTkIp.share_stderr	(dist,src='')
MultiTkIp.share_stdin	(dist,src='')
MultiTkIp.share_stdio	(dist,src='')
MultiTkIp.share_stdout	(dist,src='')
MultiTkIp.slave?	
MultiTkIp.slaves	(all=false)
MultiTkIp.thread_eval_proc	(*args)
MultiTkIp.tk_cmd_tbl	
MultiTkIp.tk_object_table	(id)
MultiTkIp.tk_windows	
MultiTkIp.to_eval	
MultiTkIp.transfer_stderr	(dist,src='')
MultiTkIp.transfer_stdin	(dist,src='')
MultiTkIp.transfer_stdio	(dist,src='')
MultiTkIp.transfer_stdout	(dist,src='')
MultiTkIp_OK#return_value	
MultiTkIp_OK#value	
MultiTkIp_OK.new	(ret=nil)
MultiTkIp_OK.send	(thread,ret=nil)
MultiTkIp_PseudoToplevel_Evaluable#pseudo_toplevel_evaluable=	(mode)
MultiTkIp_PseudoToplevel_Evaluable#pseudo_toplevel_evaluable?	
MultiTkIp_PseudoToplevel_Evaluable.extend	(mod)
Mutex#lock	
Mutex#locked?	
Mutex#sleep	(timeout=nil)->self
Mutex#synchronize	{...}
Mutex#try_lock	
Mutex#unlock	->self|nil
Mutex.new	
Mutex_m#lock	
Mutex_m#locked?	->bool
Mutex_m#mu_extended	->Mutex
Mutex_m#mu_lock	
Mutex_m#mu_locked?	->bool
Mutex_m#mu_synchronize	{...}->object
Mutex_m#mu_try_lock	->bool
Mutex_m#mu_unlock	
Mutex_m#synchronize	{...}->object
Mutex_m#try_lock	->bool
Mutex_m#unlock	
Mutex_m.append_features	(klass)->Class|nil
Mutex_m.define_aliases	(klass)->Class
Mutex_m.extend_object	(module)->Module
MutiTkIp._DEFAULT_MASTER	
NKF.guess	(str)->Encoding
NKF.nkf	(opt,str)->String
NameError#name	->Symbol
NameError#to_s	->String
NameError.new	(error_message="",name=nil)->NameError
Net::FTP#abort	->String
Net::FTP#acct	(account)
Net::FTP#binary	->bool
Net::FTP#binary=	(bool)
Net::FTP#chdir	(dirname)
Net::FTP#close	
Net::FTP#closed?	->bool
Net::FTP#connect	(host,port=FTP_PORT)
Net::FTP#debug_mode	->bool
Net::FTP#debug_mode=	(boolean)
Net::FTP#delete	(filename)
Net::FTP#dir	(*args)->[String]	(*args){|line|...}
Net::FTP#get	(remotefile,localfile=File.basename(remotefile),blocksize=DEFAULT_BLOCKSIZE)	(remotefile,localfile=File.basename(remotefile),blocksize=DEFAULT_BLOCKSIZE){|data|....}
Net::FTP#getbinaryfile	(remotefile,localfile=File.basename(remotefile),blocksize=DEFAULT_BLOCKSIZE){|data|...}	(remotefile,localfile=File.basename(remotefile),blocksize=DEFAULT_BLOCKSIZE)
Net::FTP#getdir	->String
Net::FTP#gettextfile	(remotefile,localfile=File.basename(remotefile))	(remotefile,localfile=File.basename(remotefile)){|line|...}
Net::FTP#help	(arg=nil)->String
Net::FTP#last_response	->String
Net::FTP#last_response_code	->String
Net::FTP#lastresp	->String
Net::FTP#list	(*args)->[String]	(*args){|line|...}
Net::FTP#login	(user="anonymous",passwd=nil,acct=nil)
Net::FTP#ls	(*args)->[String]	(*args){|line|...}
Net::FTP#mdtm	(filename)->String
Net::FTP#mkdir	(dirname)->String
Net::FTP#mtime	(filename,local=false)->Time
Net::FTP#nlst	(dir=nil)->[String]
Net::FTP#noop	
Net::FTP#passive	->bool
Net::FTP#passive=	(bool)
Net::FTP#put	(localfile,remotefile=File.basename(localfile),blocksize=DEFAULT_BLOCKSIZE)	(localfile,remotefile=File.basename(localfile),blocksize=DEFAULT_BLOCKSIZE){|data|....}
Net::FTP#putbinaryfile	(localfile,remotefile=File.basename(localfile),blocksize=DEFAULT_BLOCKSIZE)	(localfile,remotefile=File.basename(localfile),blocksize=DEFAULT_BLOCKSIZE){|data|...}
Net::FTP#puttextfile	(localfile,remotefile=File.basename(localfile))	(localfile,remotefile=File.basename(localfile)){|line|...}
Net::FTP#pwd	->String
Net::FTP#quit	
Net::FTP#rename	(fromname,toname)
Net::FTP#resume	->bool
Net::FTP#resume=	(boolean)
Net::FTP#retrbinary	(cmd,blocksize,rest_offset=nil)	(cmd,blocksize,rest_offset=nil){|data|...}
Net::FTP#retrlines	(cmd){|line|...}
Net::FTP#return_code	->String
Net::FTP#return_code=	(string)
Net::FTP#rmdir	(dirname)
Net::FTP#sendcmd	(cmd)->String
Net::FTP#set_socket	(sock,get_greeting=true)
Net::FTP#site	(arg)
Net::FTP#size	(filename)->Integer
Net::FTP#status	->String
Net::FTP#storbinary	(cmd,file,blocksize,rest_offset=nil)	(cmd,file,blocksize,rest_offset=nil){|data|...}
Net::FTP#storlines	(cmd,file)	(cmd,file){|line|...}
Net::FTP#system	->String
Net::FTP#voidcmd	(cmd)
Net::FTP#welcome	->String
Net::FTP.new	(host=nil,user=nil,passwd=nil,acct=nil)->Net::FTP
Net::FTP.open	(host,user=nil,passwd=nil,acct=nil)->Net::FTP	(host,user=nil,passwd=nil,acct=nil){|ftp|...}->object
Net::HTTP#active?	->bool
Net::HTTP#address	->String
Net::HTTP#ca_file	
Net::HTTP#ca_file=	(path)
Net::HTTP#ca_path	
Net::HTTP#ca_path=	(path)
Net::HTTP#cert	
Net::HTTP#cert=	(certificate)
Net::HTTP#cert_store	
Net::HTTP#cert_store=	(store)
Net::HTTP#close_on_empty_response	->bool
Net::HTTP#close_on_empty_response=	(bool)
Net::HTTP#copy	(path,initheader=nil)->Net::HTTPResponse
Net::HTTP#delete	(path,initheader=nil)->Net::HTTPResponse
Net::HTTP#finish	
Net::HTTP#get	(path,header=nil,dest=nil)->Net::HTTPResponse	(path,header=nil,dest=nil){|body_segment|....}->Net::HTTPResponse
Net::HTTP#get2	(path,header=nil)->Net::HTTPResponse	(path,header=nil){|response|....}->Net::HTTPResponse
Net::HTTP#head	(path,header=nil)->Net::HTTPResponse
Net::HTTP#head2	(path,header=nil)->Net::HTTPResponse	(path,header=nil){|response|....}->Net::HTTPResponse
Net::HTTP#key	
Net::HTTP#key=	(key)
Net::HTTP#lock	(path,body,initheader=nil)->Net::HTTPResponse
Net::HTTP#mkcol	(path,body,initheader=nil)->Net::HTTPResponse
Net::HTTP#move	(path,body,initheader=nil)->Net::HTTPResponse
Net::HTTP#open_timeout	->Integer
Net::HTTP#open_timeout=	(seconds)
Net::HTTP#options	(path,initheader=nil)->Net::HTTPResponse
Net::HTTP#peer_cert	
Net::HTTP#port	->Integer
Net::HTTP#post	(path,data,header=nil,dest=nil)->Net::HTTPResponse	(path,data,header=nil,dest=nil){|body_segment|....}->Net::HTTPResponse
Net::HTTP#post2	(path,data,header=nil)->Net::HTTPResponse	(path,data,header=nil){|response|....}->Net::HTTPResponse
Net::HTTP#propfind	(path,body,initheader={'Depth'=>'0'})->Net::HTTPResponse
Net::HTTP#proppatch	(path,body,initheader=nil)->Net::HTTPResponse
Net::HTTP#proxy?	->bool
Net::HTTP#proxy_address	->String|nil
Net::HTTP#proxy_pass	->String|nil
Net::HTTP#proxy_port	->Integer|nil
Net::HTTP#proxy_user	->String|nil
Net::HTTP#proxyaddr	->String|nil
Net::HTTP#proxyport	->Integer|nil
Net::HTTP#put	(path,data,initheader=nil)->Net::HTTPResponse
Net::HTTP#put2	(path,data,initheader=nil)->Net::HTTPResponse	(path,data,initheader=nil){|response|....}->Net::HTTPResponse
Net::HTTP#read_timeout	->Integer
Net::HTTP#read_timeout=	(seconds)
Net::HTTP#request	(request[,data])->Net::HTTPResponse	(request[,data]){|response|....}->Net::HTTPResponse
Net::HTTP#request_get	(path,header=nil)->Net::HTTPResponse	(path,header=nil){|response|....}->Net::HTTPResponse
Net::HTTP#request_head	(path,header=nil)->Net::HTTPResponse	(path,header=nil){|response|....}->Net::HTTPResponse
Net::HTTP#request_post	(path,data,header=nil)->Net::HTTPResponse	(path,data,header=nil){|response|....}->Net::HTTPResponse
Net::HTTP#request_put	(path,data,initheader=nil)->Net::HTTPResponse	(path,data,initheader=nil){|response|....}->Net::HTTPResponse
Net::HTTP#send_request	(name,path,data=nil,header=nil)->Net::HTTPResponse
Net::HTTP#set_debug_output	(io)
Net::HTTP#ssl_timeout	
Net::HTTP#ssl_timeout=	(sec)
Net::HTTP#start	->self	{|http|....}->object
Net::HTTP#started?	->bool
Net::HTTP#timeout=	(sec)
Net::HTTP#trace	(path,initheader=nil)->Net::HTTPResponse
Net::HTTP#unlock	(path,body,initheader=nil)->Net::HTTPResponse
Net::HTTP#use_ssl=	(bool)
Net::HTTP#use_ssl?	->bool
Net::HTTP#verify_callback	
Net::HTTP#verify_callback=	(proc)
Net::HTTP#verify_depth	
Net::HTTP#verify_depth=	(depth)
Net::HTTP#verify_mode	
Net::HTTP#verify_mode=	(mode)
Net::HTTP.Proxy	(address,port=80)->Class
Net::HTTP.default_port	->Integer
Net::HTTP.get	(uri)->String	(host,path,port=80)->String
Net::HTTP.get_print	(uri)	(host,path,port=80)
Net::HTTP.get_response	(uri)->Net::HTTPResponse	(host,path=nil,port=nil)->Net::HTTPResponse
Net::HTTP.http_default_port	->Integer
Net::HTTP.https_default_port	->Integer
Net::HTTP.is_version_1_1?	->bool
Net::HTTP.is_version_1_2?	->bool
Net::HTTP.new	(address,port=80,proxy_addr=nil,proxy_port=nil,proxy_user=nil,proxy_pass=nil)->Net::HTTP
Net::HTTP.post_form	(uri,params)->Net::HTTPResponse
Net::HTTP.proxy_address	->String|nil
Net::HTTP.proxy_class?	->bool
Net::HTTP.proxy_pass	->String|nil
Net::HTTP.proxy_port	->Integer|nil
Net::HTTP.proxy_user	->String|nil
Net::HTTP.start	(address,port=80,proxy_addr=nil,proxy_port=nil,proxy_user=nil,proxy_pass=nil)->Net::HTTP	(address,port=80,proxy_addr=nil,proxy_port=nil,proxy_user=nil,proxy_pass=nil){|http|....}->object
Net::HTTP.version_1_1	
Net::HTTP.version_1_1?	->bool
Net::HTTP.version_1_2	
Net::HTTP.version_1_2?	->bool
Net::HTTPExceptions#data	->Net::HTTPResponse
Net::HTTPExceptions#response	->Net::HTTPResponse
Net::HTTPGenericRequest#body	->String
Net::HTTPGenericRequest#body=	(body)
Net::HTTPGenericRequest#body_exist?	->bool
Net::HTTPGenericRequest#body_stream	->object
Net::HTTPGenericRequest#body_stream=	(f)
Net::HTTPGenericRequest#method	->String
Net::HTTPGenericRequest#path	->String
Net::HTTPGenericRequest#request_body_permitted?	->bool
Net::HTTPGenericRequest#response_body_permitted?	->bool
Net::HTTPHeader#[]	(key)->String|nil
Net::HTTPHeader#[]=	(key,val)
Net::HTTPHeader#add_field	(key,val)
Net::HTTPHeader#basic_auth	(account,password)
Net::HTTPHeader#canonical_each	{|name,value|....}
Net::HTTPHeader#chunked?	->bool
Net::HTTPHeader#content_length	->Integer|nil
Net::HTTPHeader#content_length=	(len)
Net::HTTPHeader#content_range	->Range|nil
Net::HTTPHeader#content_type	->String|nil
Net::HTTPHeader#content_type=	(type)
Net::HTTPHeader#delete	(key)->String|nil
Net::HTTPHeader#each	{|name,val|....}
Net::HTTPHeader#each_capitalized	{|name,value|....}
Net::HTTPHeader#each_capitalized_name	{|name|....}
Net::HTTPHeader#each_header	{|name,val|....}
Net::HTTPHeader#each_key	{|name|...}
Net::HTTPHeader#each_name	{|name|...}
Net::HTTPHeader#each_value	{|value|....}
Net::HTTPHeader#fetch	(key)->String	(key,default)->String	(key){|hash|....}->String
Net::HTTPHeader#form_data=	(params)
Net::HTTPHeader#get_fields	(key)->[String]
Net::HTTPHeader#key?	(key)->bool
Net::HTTPHeader#length	->Integer
Net::HTTPHeader#main_type	->String|nil
Net::HTTPHeader#method	->String
Net::HTTPHeader#proxy_basic_auth	(account,password)
Net::HTTPHeader#range	->Range|nil
Net::HTTPHeader#range=	(r)	(n)
Net::HTTPHeader#range_length	->Integer|nil
Net::HTTPHeader#set_content_type	(type,params={})
Net::HTTPHeader#set_form_data	(params,sep='&')
Net::HTTPHeader#set_range	(i,len)	(r)	(n)
Net::HTTPHeader#size	->Integer
Net::HTTPHeader#sub_type	->String|nil
Net::HTTPHeader#type_params	->Hash
Net::HTTPRequest.new	(path,initheader=nil)->Net::HTTPRequest
Net::HTTPResponse#body	->String|()|nil
Net::HTTPResponse#code	->String
Net::HTTPResponse#entity	->String|()|nil
Net::HTTPResponse#header	->self
Net::HTTPResponse#http_version	->String
Net::HTTPResponse#message	->String
Net::HTTPResponse#msg	->String
Net::HTTPResponse#read_body	(dest=nil)->String|nil	{|str|....}
Net::HTTPResponse#reader_header	->self
Net::HTTPResponse#response	->self
Net::HTTPResponse#to_ary	->[Net::HTTPResponse,String]
Net::HTTPResponse#value	
Net::HTTPResponse.body_permitted?	->bool
Net::IMAP#add_response_handler	(handler=Proc.new)
Net::IMAP#append	(mailbox,message,flags=nil,date_time=nil)
Net::IMAP#authenticate	(auth_type,arg...)
Net::IMAP#capability	
Net::IMAP#check	
Net::IMAP#client_thread	
Net::IMAP#client_thread=	(th)
Net::IMAP#close	
Net::IMAP#copy	(set,mailbox)
Net::IMAP#create	(mailbox)
Net::IMAP#delete	(mailbox)
Net::IMAP#disconnect	
Net::IMAP#disconnected?	
Net::IMAP#examine	(mailbox)
Net::IMAP#expunge	
Net::IMAP#fetch	(set,attr)
Net::IMAP#getacl	(mailbox)
Net::IMAP#getquota	(mailbox)
Net::IMAP#getquotaroot	(mailbox)
Net::IMAP#greeting	
Net::IMAP#list	(refname,mailbox)
Net::IMAP#login	(user,password)
Net::IMAP#logout	
Net::IMAP#lsub	(refname,mailbox)
Net::IMAP#noop	
Net::IMAP#remove_response_handler	(handler)
Net::IMAP#rename	(mailbox,newname)
Net::IMAP#response_handlers	
Net::IMAP#responses	
Net::IMAP#search	(keys,charset=nil)
Net::IMAP#select	(mailbox)
Net::IMAP#setacl	(mailbox,user,rights)
Net::IMAP#setquota	(mailbox,quota)
Net::IMAP#sort	(sort_keys,search_keys,charset)
Net::IMAP#starttls	(cxt=nil)
Net::IMAP#status	(mailbox,attr)
Net::IMAP#store	(set,attr,flags)
Net::IMAP#subscribe	(mailbox)
Net::IMAP#thread	(algorithm,search_keys,charset)
Net::IMAP#uid_copy	(set,mailbox)
Net::IMAP#uid_fetch	(set,attr)
Net::IMAP#uid_search	(keys,charset=nil)
Net::IMAP#uid_sort	(sort_keys,search_keys,charset)
Net::IMAP#uid_store	(set,attr,flags)
Net::IMAP#uid_thread	(algorithm,search_keys,charset)
Net::IMAP#unsubscribe	(mailbox)
Net::IMAP.add_authenticator	(auth_type,authenticator)
Net::IMAP.debug	
Net::IMAP.debug=	(val)
Net::IMAP.decode_utf7	
Net::IMAP.encode_utf7	
Net::IMAP.new	(host,port=143,usessl=false,certs=nil,verify=false)
Net::IMAP::Address#host	
Net::IMAP::Address#mailbox	
Net::IMAP::Address#name	
Net::IMAP::Address#route	
Net::IMAP::BodyTypeBasic#content_id	
Net::IMAP::BodyTypeBasic#description	
Net::IMAP::BodyTypeBasic#disposition	
Net::IMAP::BodyTypeBasic#encoding	
Net::IMAP::BodyTypeBasic#extension	
Net::IMAP::BodyTypeBasic#language	
Net::IMAP::BodyTypeBasic#md5	
Net::IMAP::BodyTypeBasic#media_subtype	
Net::IMAP::BodyTypeBasic#media_type	
Net::IMAP::BodyTypeBasic#multipart?	
Net::IMAP::BodyTypeBasic#param	
Net::IMAP::BodyTypeBasic#size	
Net::IMAP::BodyTypeBasic#subtype	
Net::IMAP::BodyTypeMessage#body	
Net::IMAP::BodyTypeMessage#content_id	
Net::IMAP::BodyTypeMessage#description	
Net::IMAP::BodyTypeMessage#disposition	
Net::IMAP::BodyTypeMessage#encoding	
Net::IMAP::BodyTypeMessage#envelope	
Net::IMAP::BodyTypeMessage#extension	
Net::IMAP::BodyTypeMessage#language	
Net::IMAP::BodyTypeMessage#lines	
Net::IMAP::BodyTypeMessage#md5	
Net::IMAP::BodyTypeMessage#media_subtype	
Net::IMAP::BodyTypeMessage#media_type	
Net::IMAP::BodyTypeMessage#multipart?	
Net::IMAP::BodyTypeMessage#param	
Net::IMAP::BodyTypeMessage#size	
Net::IMAP::BodyTypeMessage#subtype	
Net::IMAP::BodyTypeMultipart#disposition	
Net::IMAP::BodyTypeMultipart#extension	
Net::IMAP::BodyTypeMultipart#language	
Net::IMAP::BodyTypeMultipart#media_subtype	
Net::IMAP::BodyTypeMultipart#media_type	
Net::IMAP::BodyTypeMultipart#multipart?	
Net::IMAP::BodyTypeMultipart#param	
Net::IMAP::BodyTypeMultipart#parts	
Net::IMAP::BodyTypeMultipart#subtype	
Net::IMAP::BodyTypeText#content_id	
Net::IMAP::BodyTypeText#description	
Net::IMAP::BodyTypeText#disposition	
Net::IMAP::BodyTypeText#encoding	
Net::IMAP::BodyTypeText#extension	
Net::IMAP::BodyTypeText#language	
Net::IMAP::BodyTypeText#lines	
Net::IMAP::BodyTypeText#md5	
Net::IMAP::BodyTypeText#media_subtype	
Net::IMAP::BodyTypeText#media_type	
Net::IMAP::BodyTypeText#multipart?	
Net::IMAP::BodyTypeText#param	
Net::IMAP::BodyTypeText#size	
Net::IMAP::BodyTypeText#subtype	
Net::IMAP::ContentDisposition#dsp_type	
Net::IMAP::ContentDisposition#param	
Net::IMAP::ContinuationRequest#data	
Net::IMAP::ContinuationRequest#raw_data	
Net::IMAP::CramMD5Authenticator#process	(challenge)
Net::IMAP::CramMD5Authenticator.new	(user,password)
Net::IMAP::DigestMD5Authenticator#process	(challenge)
Net::IMAP::DigestMD5Authenticator.new	(user,password,authname=nil)
Net::IMAP::Envelope#bcc	
Net::IMAP::Envelope#cc	
Net::IMAP::Envelope#date	
Net::IMAP::Envelope#from	
Net::IMAP::Envelope#in_reply_to	
Net::IMAP::Envelope#message_id	
Net::IMAP::Envelope#reply_to	
Net::IMAP::Envelope#sender	
Net::IMAP::Envelope#subject	
Net::IMAP::Envelope#to	
Net::IMAP::FetchData#attr	
Net::IMAP::FetchData#seqno	
Net::IMAP::LoginAuthenticator#process	(data)
Net::IMAP::LoginAuthenticator.new	(user,password)
Net::IMAP::MailboxACLItem#rights	
Net::IMAP::MailboxACLItem#user	
Net::IMAP::MailboxList#attr	
Net::IMAP::MailboxList#delim	
Net::IMAP::MailboxList#name	
Net::IMAP::MailboxQuota#mailbox	
Net::IMAP::MailboxQuota#quota	
Net::IMAP::MailboxQuota#usage	
Net::IMAP::MailboxQuotaRoot#mailbox	
Net::IMAP::MailboxQuotaRoot#quotaroots	
Net::IMAP::PlainAuthenticator#process	(data)
Net::IMAP::PlainAuthenticator.new	(user,password)
Net::IMAP::ResponseCode#data	
Net::IMAP::ResponseCode#name	
Net::IMAP::ResponseText#code	
Net::IMAP::ResponseText#text	
Net::IMAP::StatusData#attr	
Net::IMAP::StatusData#mailbox	
Net::IMAP::TaggedResponse#data	
Net::IMAP::TaggedResponse#name	
Net::IMAP::TaggedResponse#raw_data	
Net::IMAP::TaggedResponse#tag	
Net::IMAP::ThreadMember#children	
Net::IMAP::ThreadMember#seqno	
Net::IMAP::UntaggedResponse#data	
Net::IMAP::UntaggedResponse#name	
Net::IMAP::UntaggedResponse#raw_data	
Net::POP3#active?	
Net::POP3#address	
Net::POP3#apop?	
Net::POP3#auth_only	(account,password)
Net::POP3#delete_all		{|popmail|....}
Net::POP3#disable_ssl	
Net::POP3#each	{|popmail|....}
Net::POP3#each_mail	{|popmail|....}
Net::POP3#enable_ssl	(verify,certs)
Net::POP3#finish	
Net::POP3#inspect	
Net::POP3#mails	
Net::POP3#n_bytes	
Net::POP3#n_mails	
Net::POP3#open_timeout	
Net::POP3#open_timeout=	(n)
Net::POP3#port	
Net::POP3#read_timeout	
Net::POP3#read_timeout=	(n)
Net::POP3#reset	
Net::POP3#set_debug_output	(f)
Net::POP3#start	(account,password)	(account,password){|pop|....}
Net::POP3#started?	
Net::POP3#use_ssl?	
Net::POP3.APOP	(is_apop)
Net::POP3.auth_only	(address,port=110,account,password)
Net::POP3.certs	
Net::POP3.default_pop3_port	
Net::POP3.default_pop3s_port	
Net::POP3.default_port	
Net::POP3.delete_all	(address,port=110,account,password)	(address,port=110,account,password){|mail|....}
Net::POP3.disable_ssl	
Net::POP3.enable_ssl	(verify,certs)
Net::POP3.foreach	(address,port=110,account,password){|mail|....}
Net::POP3.new	(address,port=110,apop=false)
Net::POP3.socket_type	
Net::POP3.start	(address,port=110,account,password)	(address,port=110,account,password){|pop|....}
Net::POP3.use_ssl?	
Net::POP3.verify	
Net::POPMail#all		{|str|....}
Net::POPMail#delete		!
Net::POPMail#delete!	
Net::POPMail#deleted?	
Net::POPMail#header	
Net::POPMail#mail		{|str|....}
Net::POPMail#number	
Net::POPMail#pop		{|str|....}
Net::POPMail#size	
Net::POPMail#top	(lines)
Net::POPMail#uidl	
Net::POPMail#unique_id	
Net::SMTP#address	
Net::SMTP#auth_cram_md5	(user,secret)
Net::SMTP#auth_login	(user,secret)
Net::SMTP#auth_plain	(user,secret)
Net::SMTP#authenticate	(user,secret,authtype)
Net::SMTP#data	(message)	{|f|....}
Net::SMTP#debug_output=	(f)
Net::SMTP#disable_ssl	
Net::SMTP#disable_tls	
Net::SMTP#ehlo	(domain)
Net::SMTP#enable_ssl	
Net::SMTP#enable_tls	
Net::SMTP#esmtp	
Net::SMTP#esmtp=	(bool)
Net::SMTP#esmtp?	
Net::SMTP#finish	
Net::SMTP#helo	(domain)
Net::SMTP#inspect	
Net::SMTP#mailfrom	(from_addr)
Net::SMTP#open_message_stream	(from_addr,*to_addrs){|f|....}
Net::SMTP#open_timeout	
Net::SMTP#open_timeout=	(n)
Net::SMTP#port	
Net::SMTP#quit	
Net::SMTP#rcptto	(to_addr)
Net::SMTP#rcptto_list	(to_addrs)
Net::SMTP#read_timeout	
Net::SMTP#read_timeout=	(n)
Net::SMTP#ready	(from_addr,*to_addrs){|f|....}
Net::SMTP#send_mail	(mailsrc,from_addr,*to_addrs)
Net::SMTP#send_message	(mailsrc,from_addr,*to_addrs)
Net::SMTP#sendmail	(mailsrc,from_addr,*to_addrs)
Net::SMTP#set_debug_output	(f)
Net::SMTP#start	(helo_domain=<localhostname>,account=nil,password=nil,authtype=nil)	(helo_domain=<localhostname>,account=nil,password=nil,authtype=nil){|smtp|....}
Net::SMTP#started?	
Net::SMTP#starttls	
Net::SMTP#use_ssl?	
Net::SMTP#use_tls?	
Net::SMTP.default_port	
Net::SMTP.default_ssl_context	
Net::SMTP.default_ssl_port	
Net::SMTP.default_tls_port	
Net::SMTP.disable_ssl	
Net::SMTP.disable_tls	
Net::SMTP.enable_ssl	(context=SMTP.default_ssl_context)
Net::SMTP.enable_tls	
Net::SMTP.new	(address,port=25)
Net::SMTP.ssl_context	
Net::SMTP.start	(address,port=25,helo_domain='localhost.localdomain',account=nil,password=nil,authtype=nil)	(address,port=25,helo_domain='localhost.localdomain',account=nil,password=nil,authtype=nil){|smtp|....}
Net::SMTP.use_ssl?	
Net::SMTP.use_tls?	
Net::Telnet#binmode	(mode=nil)->bool|()
Net::Telnet#binmode=	(mode)
Net::Telnet#cmd	(opts)->String	(opts){|mesg|...}->String
Net::Telnet#login	(opts,password=nil)->String	(opts,password=nil){|mesg|...}->String
Net::Telnet#preprocess	(string)->String
Net::Telnet#print	(string)
Net::Telnet#puts	(string)
Net::Telnet#sock	->IO
Net::Telnet#telnetmode	(mode=nil)->bool|()
Net::Telnet#telnetmode=	(mode)
Net::Telnet#waitfor	(opt)->String|nil	(opt){|buf|...}->String|nil
Net::Telnet#write	(string)
Net::Telnet.new	(opts)->Net::Telnet	(opts){|message|...}->Net::Telnet
Newton#nlsolve	(f,x)
Newton#norm	(fv,zero=0.0)
NilClass#&	(other)->false
NilClass#^	(other)->bool
NilClass#nil?	->bool
NilClass#to_a	->Array
NilClass#to_f	->Float
NilClass#to_i	->Fixnum
NilClass#to_r	->Rational
NilClass#to_s	->String
NilClass#|	(other)->bool
NoMethodError#args	->[object]
NoMethodError.new	(error_message="",name=nil,args=nil)->NoMethodError
Numeric#+@	->self
Numeric#-@	->Numeric
Numeric#<=>	(other)->-1|0|1|nil
Numeric#abs	->Numeric
Numeric#ceil	->Integer
Numeric#clone	
Numeric#coerce	(other)->[Numeric]
Numeric#denominator	->Integer
Numeric#div	(other)->Integer
Numeric#divmod	(other)->[Numeric]
Numeric#dup	
Numeric#eql?	(other)->bool
Numeric#fdiv	(other)->Float
Numeric#floor	->Integer
Numeric#integer?	->bool
Numeric#modulo	(other)->Numeric
Numeric#nonzero?	->self|nil
Numeric#numerator	->Integer
Numeric#quo	(other)->Float
Numeric#remainder	(other)->Numeric
Numeric#round	->Integer
Numeric#scalar?	->bool
Numeric#step	(limit,step=1){|n|...}->self	(limit,step=1)->Enumerator
Numeric#to_int	->Integer
Numeric#truncate	->Integer
Numeric#zero?	->bool
Object#==	(other)->bool
Object#===	(other)->bool
Object#=~	(other)->false
Object#__id__	->Integer
Object#__send__	(name,*args)->object	(name,*args){....}->object
Object#_dump	(limit)->String
Object#class	->Class
Object#clone	->object
Object#dclone	
Object#display	(out=$stdout)
Object#dup	->object
Object#enum_for	(method=:each,*args)->Enumerator
Object#eql?	(other)->bool
Object#equal?	(other)->bool
Object#extend	(*modules)->self
Object#freeze	->self
Object#frozen?	->bool
Object#hash	->Fixnum
Object#initialize	(*args,&block)->object
Object#initialize_copy	(obj)->object
Object#inspect	->String
Object#instance_eval	(expr,filename="(eval)",lineno=1)->object	{|obj|...}->object
Object#instance_exec	(*args){|*vars|...}->object
Object#instance_of?	(klass)->bool
Object#instance_variable_defined?	(var)->bool
Object#instance_variable_get	(var)->object|nil
Object#instance_variable_set	(var,value)->object
Object#instance_variables	->[Symbol]
Object#is_a?	(mod)->bool
Object#kind_of?	(mod)->bool
Object#marshal_dump	->object
Object#marshal_load	(obj)->object
Object#method	(name)->Method
Object#method_missing	(id,*args)	(name,*args)->object
Object#methods	(include_inherited=true)->[Symbol]
Object#must_be	->true
Object#must_be_close_to	(expected,delta=0.001)->true
Object#must_be_empty	->true
Object#must_be_instance_of	(klass)->true
Object#must_be_kind_of	(klass)->true
Object#must_be_nil	->true
Object#must_be_same_as	(actual)->true
Object#must_be_within_delta	(expected,delta=0.001)->true
Object#must_be_within_epsilon	(actual,epsilon=0.001)->true
Object#must_equal	(expected)->true
Object#must_include	(object)->true
Object#must_match	(regexp)->true
Object#must_raise	(*args)->true
Object#must_respond_to	(method_name)->true
Object#must_send	->true
Object#must_throw	(tag)->true
Object#nil?	->bool
Object#object_id	->Integer
Object#pretty_inspect	->String
Object#pretty_print	(pp)
Object#pretty_print_cycle	(pp)
Object#pretty_print_inspect	->String
Object#pretty_print_instance_variables	->[String|Symbol]
Object#private_methods	(include_inherited=true)->[Symbol]
Object#protected_methods	(include_inherited=true)->[Symbol]
Object#public_methods	(include_inherited=true)->[Symbol]
Object#remove_instance_variable	(name)->object
Object#respond_to?	(name,include_private=false)->bool
Object#send	(name,*args)->object	(name,*args){....}->object
Object#singleton_method_added	(name)->object
Object#singleton_method_removed	(name)->object
Object#singleton_method_undefined	(name)->object
Object#singleton_methods	(inherited_too=true)->[Symbol]
Object#taint	->self
Object#tainted?	->bool
Object#tap	{|x|...}->self
Object#to_a	->Array
Object#to_ary	->Array
Object#to_enum	(method=:each,*args)->Enumerator
Object#to_hash	->Hash
Object#to_int	->Integer
Object#to_io	->IO
Object#to_proc	->Proc
Object#to_regexp	->Regexp
Object#to_s	->String
Object#to_str	->String
Object#to_yaml	(opts={})
Object#to_yaml_properties	->[String]
Object#to_yaml_style	
Object#trust	->self
Object#untaint	->self
Object#untrust	->self
Object#untrusted?	->bool
Object#wont_be	->true
Object#wont_be_close_to	(actual,delta=0.001)->true
Object#wont_be_empty	->true
Object#wont_be_instance_of	(klass)->true
Object#wont_be_kind_of	(klass)->true
Object#wont_be_nil	->true
Object#wont_be_same_as	(actual)->true
Object#wont_be_within_delta	(actual,delta=0.001)->true
Object#wont_be_within_epsilon	(actual,epsilon=0.001)->true
Object#wont_equal	(actual)->true
Object#wont_include	(object)->true
Object#wont_match	(regexp)->true
Object#wont_respond_to	(method_name)->true
Object.new	->Object
ObjectSpace._id2ref	(id)->object
ObjectSpace.add_finalizer	(proc)->Proc
ObjectSpace.call_finalizer	(obj)->object
ObjectSpace.define_finalizer	(obj,proc)->Array	(obj){|id|...}->Array
ObjectSpace.each_object	{|object|...}->Integer	(klass){|object|...}->Integer	->Enumerator	(klass)->Enumerator
ObjectSpace.finalizers	->[Proc]
ObjectSpace.garbage_collect	
ObjectSpace.remove_finalizer	(proc)->Proc
ObjectSpace.undefine_finalizer	(obj)->object
Observable#add_observer	(observer)->Array
Observable#changed	(state=true)->bool
Observable#changed?	->bool
Observable#count_observers	->Fixnum
Observable#delete_observer	(observer)->object|nil
Observable#delete_observers	->Array
Observable#notify_observers	(*arg)
Open3.popen3	(*cmd)->[IO,IO,IO]	(*cmd){|stdin,stdout,stderr|...}
OpenSSL::ASN1.BMPString	(value...)
OpenSSL::ASN1.BitString	(value...)
OpenSSL::ASN1.Boolean	(value[,tag[,tagging[,tag_class]]])
OpenSSL::ASN1.Enumerated	(value...)
OpenSSL::ASN1.GeneralString	(value...)
OpenSSL::ASN1.GeneralizedTime	(value...)
OpenSSL::ASN1.GraphicString	(value...)
OpenSSL::ASN1.IA5String	(value...)
OpenSSL::ASN1.ISO64String	(value...)
OpenSSL::ASN1.Integer	(value...)
OpenSSL::ASN1.Null	(value...)
OpenSSL::ASN1.NumericString	(value...)
OpenSSL::ASN1.ObjectId	(value...)
OpenSSL::ASN1.OctetString	(value...)
OpenSSL::ASN1.PrintableString	(value...)
OpenSSL::ASN1.Sequence	(value...)
OpenSSL::ASN1.Set	(value...)
OpenSSL::ASN1.T61String	(value...)
OpenSSL::ASN1.UTCTime	(value...)
OpenSSL::ASN1.UTF8String	(value...)
OpenSSL::ASN1.UniversalString	(value...)
OpenSSL::ASN1.VideotexString	(value...)
OpenSSL::ASN1.decode	(der)
OpenSSL::ASN1.decode_all	(der)
OpenSSL::ASN1.traverse	(der){|depth,off,hlen,len,constructed,tag_class,tag|...}
OpenSSL::ASN1::ASN1Data#tag	
OpenSSL::ASN1::ASN1Data#tag=	(tag)
OpenSSL::ASN1::ASN1Data#tag_class	
OpenSSL::ASN1::ASN1Data#tag_class=	(tag_class)
OpenSSL::ASN1::ASN1Data#to_der	
OpenSSL::ASN1::ASN1Data#value	
OpenSSL::ASN1::ASN1Data#value=	(value)
OpenSSL::ASN1::ASN1Data.new	(value,tag,tag_class)
OpenSSL::ASN1::Constructive#tagging	
OpenSSL::ASN1::Constructive#tagging=	(tag)
OpenSSL::ASN1::Constructive.new	(value,tag,tagging,tag_class)
OpenSSL::ASN1::ObjectId#ln	
OpenSSL::ASN1::ObjectId#long_name	
OpenSSL::ASN1::ObjectId#oid	
OpenSSL::ASN1::ObjectId#short_name	
OpenSSL::ASN1::ObjectId#sn	
OpenSSL::ASN1::ObjectId.new	(str)
OpenSSL::ASN1::ObjectId.register	(oid,short_name,long_name)
OpenSSL::ASN1::Primitive#tagging	
OpenSSL::ASN1::Primitive#tagging=	(tag)
OpenSSL::ASN1::Primitive.new	(value,tag,tagging,tag_class)
OpenSSL::BN#%	
OpenSSL::BN#*	
OpenSSL::BN#**	
OpenSSL::BN#+	
OpenSSL::BN#-	
OpenSSL::BN#/	
OpenSSL::BN#<<	
OpenSSL::BN#<=>	
OpenSSL::BN#==	
OpenSSL::BN#===	
OpenSSL::BN#>>	
OpenSSL::BN#bit_set?	
OpenSSL::BN#clear_bit!	
OpenSSL::BN#cmp	
OpenSSL::BN#coerce	
OpenSSL::BN#copy	
OpenSSL::BN#eql?	
OpenSSL::BN#gcd	
OpenSSL::BN#mask_bits!	
OpenSSL::BN#mod_add	
OpenSSL::BN#mod_exp	
OpenSSL::BN#mod_inverse	
OpenSSL::BN#mod_mul	
OpenSSL::BN#mod_sqr	
OpenSSL::BN#mod_sub	
OpenSSL::BN#num_bits	
OpenSSL::BN#num_bytes	
OpenSSL::BN#odd?	
OpenSSL::BN#one?	
OpenSSL::BN#prime?	
OpenSSL::BN#prime_fasttest?	
OpenSSL::BN#set_bit!	
OpenSSL::BN#sqr	
OpenSSL::BN#to_bn	
OpenSSL::BN#to_i	
OpenSSL::BN#to_int	
OpenSSL::BN#to_s	
OpenSSL::BN#ucmp	
OpenSSL::BN#zero?	
OpenSSL::BN.generate_prime	
OpenSSL::BN.pseudo_rand	
OpenSSL::BN.pseudo_rand_range	
OpenSSL::BN.rand	
OpenSSL::BN.rand_range	
OpenSSL::Cipher::Cipher#block_size	
OpenSSL::Cipher::Cipher#decrypt	(key,iv)
OpenSSL::Cipher::Cipher#encrypt	(key,iv)
OpenSSL::Cipher::Cipher#final	
OpenSSL::Cipher::Cipher#iv=	(iv)
OpenSSL::Cipher::Cipher#iv_len	
OpenSSL::Cipher::Cipher#key=	(key)
OpenSSL::Cipher::Cipher#key_len	
OpenSSL::Cipher::Cipher#key_len=	(length)
OpenSSL::Cipher::Cipher#padding=	(padding)
OpenSSL::Cipher::Cipher#pkcs5_keyivgen	(pass,salt=nil,num=2048,digest=OpenSSL::Digest::MD5.new())
OpenSSL::Cipher::Cipher#random_iv	
OpenSSL::Cipher::Cipher#random_key	
OpenSSL::Cipher::Cipher#reset	
OpenSSL::Cipher::Cipher#update	(data)
OpenSSL::Cipher::Cipher.new	(name)
OpenSSL::Digest::Digest#<<	(str)
OpenSSL::Digest::Digest#==	(digest)
OpenSSL::Digest::Digest#digest	
OpenSSL::Digest::Digest#hexdigest	
OpenSSL::Digest::Digest#inspect	
OpenSSL::Digest::Digest#name	
OpenSSL::Digest::Digest#reset	
OpenSSL::Digest::Digest#size	
OpenSSL::Digest::Digest#to_s	
OpenSSL::Digest::Digest#update	(str)
OpenSSL::Digest::Digest.digest	(name,str)
OpenSSL::Digest::Digest.hexdigest	(name,str)
OpenSSL::Digest::Digest.new	(name)
OpenSSL::Engine#cipher	
OpenSSL::Engine#cmds	
OpenSSL::Engine#ctrl_cmd	
OpenSSL::Engine#digest	
OpenSSL::Engine#finish	
OpenSSL::Engine#id	
OpenSSL::Engine#load_private_key	
OpenSSL::Engine#load_public_key	
OpenSSL::Engine#name	
OpenSSL::Engine#set_default	
OpenSSL::Engine.by_id	
OpenSSL::Engine.cleanup	
OpenSSL::Engine.engines	
OpenSSL::Engine.load	
OpenSSL::HMAC#<<	
OpenSSL::HMAC#digest	
OpenSSL::HMAC#hexdigest	
OpenSSL::HMAC#to_s	
OpenSSL::HMAC#update	
OpenSSL::HMAC.digest	
OpenSSL::HMAC.hexdigest	
OpenSSL::Netscape::SPKI#challenge	
OpenSSL::Netscape::SPKI#challenge=	
OpenSSL::Netscape::SPKI#public_key	
OpenSSL::Netscape::SPKI#public_key=	
OpenSSL::Netscape::SPKI#sign	
OpenSSL::Netscape::SPKI#to_der	
OpenSSL::Netscape::SPKI#to_pem	
OpenSSL::Netscape::SPKI#to_s	
OpenSSL::Netscape::SPKI#to_text	
OpenSSL::Netscape::SPKI#verify	
OpenSSL::OCSP::BasicResponse#add_nonce	
OpenSSL::OCSP::BasicResponse#add_status	
OpenSSL::OCSP::BasicResponse#copy_nonce	
OpenSSL::OCSP::BasicResponse#sign	
OpenSSL::OCSP::BasicResponse#status	
OpenSSL::OCSP::BasicResponse#verify	
OpenSSL::OCSP::CertificateId#cmp	
OpenSSL::OCSP::CertificateId#cmp_issuer	
OpenSSL::OCSP::CertificateId#serial	
OpenSSL::OCSP::Request#add_certid	
OpenSSL::OCSP::Request#add_nonce	
OpenSSL::OCSP::Request#certid	
OpenSSL::OCSP::Request#check_nonce	
OpenSSL::OCSP::Request#sign	
OpenSSL::OCSP::Request#to_der	
OpenSSL::OCSP::Request#verify	
OpenSSL::OCSP::Response#basic	
OpenSSL::OCSP::Response#status	
OpenSSL::OCSP::Response#status_string	
OpenSSL::OCSP::Response#to_der	
OpenSSL::OCSP::Response.create	
OpenSSL::PKCS12.create	
OpenSSL::PKCS12::PKCS12#ca_certs	
OpenSSL::PKCS12::PKCS12#certificate	
OpenSSL::PKCS12::PKCS12#key	
OpenSSL::PKCS12::PKCS12#to_der	
OpenSSL::PKCS7.encrypt	([rcpt],smime)
OpenSSL::PKCS7.read_smime	(str)	(io)
OpenSSL::PKCS7.sign	(cert,key,data,[]=nil,flags=0)
OpenSSL::PKCS7.write_smime	(p7sig)	(p7sig,data,flags=DETACHED)
OpenSSL::PKCS7::PKCS7#add_certificate	
OpenSSL::PKCS7::PKCS7#add_crl	(s)
OpenSSL::PKCS7::PKCS7#add_data	(data)
OpenSSL::PKCS7::PKCS7#add_recipient	
OpenSSL::PKCS7::PKCS7#add_signer	(singer)
OpenSSL::PKCS7::PKCS7#certificates	
OpenSSL::PKCS7::PKCS7#certificates=	(certificates)
OpenSSL::PKCS7::PKCS7#cipher=	(cipher)
OpenSSL::PKCS7::PKCS7#crls	
OpenSSL::PKCS7::PKCS7#crls=	(s)
OpenSSL::PKCS7::PKCS7#data	
OpenSSL::PKCS7::PKCS7#data=	(data)
OpenSSL::PKCS7::PKCS7#decrypt	(pkey,cert,flags=0)
OpenSSL::PKCS7::PKCS7#detached	
OpenSSL::PKCS7::PKCS7#detached=	(bool)
OpenSSL::PKCS7::PKCS7#detached?	
OpenSSL::PKCS7::PKCS7#error_string	
OpenSSL::PKCS7::PKCS7#error_string=	
OpenSSL::PKCS7::PKCS7#recipients	
OpenSSL::PKCS7::PKCS7#signers	
OpenSSL::PKCS7::PKCS7#to_der	
OpenSSL::PKCS7::PKCS7#to_pem	
OpenSSL::PKCS7::PKCS7#to_s	
OpenSSL::PKCS7::PKCS7#type	
OpenSSL::PKCS7::PKCS7#type=	(type)
OpenSSL::PKCS7::PKCS7#verify	(certs,store,indata=nil,flags=0)
OpenSSL::PKCS7::PKCS7.new		(str)	(io)
OpenSSL::PKCS7::RecipientInfo#enc_key	
OpenSSL::PKCS7::RecipientInfo#issuer	
OpenSSL::PKCS7::RecipientInfo#serial	
OpenSSL::PKCS7::Signer#issuer	
OpenSSL::PKCS7::Signer#name	
OpenSSL::PKCS7::Signer#serial	
OpenSSL::PKCS7::Signer#signed_time	
OpenSSL::PKCS7::SignerInfo#issuer	
OpenSSL::PKCS7::SignerInfo#name	
OpenSSL::PKCS7::SignerInfo#serial	
OpenSSL::PKCS7::SignerInfo#signed_time	
OpenSSL::PKey::DH#compute_key	(num)	(str)	(bn)
OpenSSL::PKey::DH#export	
OpenSSL::PKey::DH#g	
OpenSSL::PKey::DH#g=	
OpenSSL::PKey::DH#generate_key!	
OpenSSL::PKey::DH#p	
OpenSSL::PKey::DH#p=	
OpenSSL::PKey::DH#params	
OpenSSL::PKey::DH#params_ok?	
OpenSSL::PKey::DH#priv_key	
OpenSSL::PKey::DH#priv_key=	(private_key)
OpenSSL::PKey::DH#private?	
OpenSSL::PKey::DH#pub_key	
OpenSSL::PKey::DH#pub_key=	(public_key)
OpenSSL::PKey::DH#public?	
OpenSSL::PKey::DH#public_key	
OpenSSL::PKey::DH#sign	(digest,data)
OpenSSL::PKey::DH#to_der	
OpenSSL::PKey::DH#to_pem	
OpenSSL::PKey::DH#to_s	
OpenSSL::PKey::DH#to_text	
OpenSSL::PKey::DH#verify	(digest,sign,data)
OpenSSL::PKey::DH.generate	(size,generator=2)
OpenSSL::PKey::DH.new	(size,generator=2)	(str)	(io)	()
OpenSSL::PKey::DSA#export	
OpenSSL::PKey::DSA#g	
OpenSSL::PKey::DSA#g=	(g)
OpenSSL::PKey::DSA#p	
OpenSSL::PKey::DSA#p=	(p)
OpenSSL::PKey::DSA#priv_key	
OpenSSL::PKey::DSA#priv_key=	(private_key)
OpenSSL::PKey::DSA#private?	
OpenSSL::PKey::DSA#pub_key	
OpenSSL::PKey::DSA#pub_key=	(public_key)
OpenSSL::PKey::DSA#public?	
OpenSSL::PKey::DSA#public_key	
OpenSSL::PKey::DSA#q	
OpenSSL::PKey::DSA#q=	(q)
OpenSSL::PKey::DSA#sign	(digest,data)
OpenSSL::PKey::DSA#to_der	
OpenSSL::PKey::DSA#to_pem	
OpenSSL::PKey::DSA#to_s	
OpenSSL::PKey::DSA#to_text	
OpenSSL::PKey::DSA#verify	(digest,sign,data)
OpenSSL::PKey::DSA.generate	(size)
OpenSSL::PKey::DSA.new	(size)		(str)	(io)
OpenSSL::PKey::PKey#sign	(digest,data)
OpenSSL::PKey::PKey#verify	(digest,sign,data)
OpenSSL::PKey::RSA#e	
OpenSSL::PKey::RSA#e=	
OpenSSL::PKey::RSA#export	(cipher=nil,pass=nil)
OpenSSL::PKey::RSA#iqmp	
OpenSSL::PKey::RSA#iqmp=	
OpenSSL::PKey::RSA#n	
OpenSSL::PKey::RSA#n=	
OpenSSL::PKey::RSA#p	
OpenSSL::PKey::RSA#p=	
OpenSSL::PKey::RSA#params	
OpenSSL::PKey::RSA#private?	
OpenSSL::PKey::RSA#private_decrypt	(str,mode=OpenSSL::PKey::RSA::PKCS1_PADDING)
OpenSSL::PKey::RSA#private_encrypt	(str,mode=OpenSSL::PKey::RSA::PKCS1_PADDING)
OpenSSL::PKey::RSA#public?	
OpenSSL::PKey::RSA#public_decrypt	(str,mode=OpenSSL::PKey::RSA::PKCS1_PADDING)
OpenSSL::PKey::RSA#public_encrypt	(str,mode=OpenSSL::PKey::RSA::PKCS1_PADDING)
OpenSSL::PKey::RSA#public_key	
OpenSSL::PKey::RSA#q	
OpenSSL::PKey::RSA#q=	
OpenSSL::PKey::RSA#to_der	
OpenSSL::PKey::RSA#to_pem	
OpenSSL::PKey::RSA#to_s	
OpenSSL::PKey::RSA#to_text	
OpenSSL::PKey::RSA.generate	(size,exponent=65537)
OpenSSL::PKey::RSA.new	(size,exponent=65537)	(str,pass=nil)	(io,pass=nil)
OpenSSL::Random.egd	
OpenSSL::Random.egd_bytes	
OpenSSL::Random.load_random_file	
OpenSSL::Random.pseudo_bytes	
OpenSSL::Random.random_bytes	
OpenSSL::Random.seed	
OpenSSL::Random.write_random_file	
OpenSSL::SSL::SSLContext#ca_file	
OpenSSL::SSL::SSLContext#ca_file=	(ca)
OpenSSL::SSL::SSLContext#ca_path	
OpenSSL::SSL::SSLContext#ca_path=	(ca)
OpenSSL::SSL::SSLContext#cert	
OpenSSL::SSL::SSLContext#cert=	(certificate)
OpenSSL::SSL::SSLContext#cert_store	
OpenSSL::SSL::SSLContext#cert_store=	(store)
OpenSSL::SSL::SSLContext#ciphers	
OpenSSL::SSL::SSLContext#ciphers=	(ciphers)
OpenSSL::SSL::SSLContext#client_ca	
OpenSSL::SSL::SSLContext#client_ca=	(ca)
OpenSSL::SSL::SSLContext#client_cert_cb	
OpenSSL::SSL::SSLContext#client_cert_cb=	
OpenSSL::SSL::SSLContext#extra_chain_cert	
OpenSSL::SSL::SSLContext#extra_chain_cert=	(certificates)
OpenSSL::SSL::SSLContext#key	
OpenSSL::SSL::SSLContext#key=	(key)
OpenSSL::SSL::SSLContext#options	
OpenSSL::SSL::SSLContext#options=	(options)
OpenSSL::SSL::SSLContext#session_id_context	
OpenSSL::SSL::SSLContext#session_id_context=	
OpenSSL::SSL::SSLContext#timeout	
OpenSSL::SSL::SSLContext#timeout=	(seconds)
OpenSSL::SSL::SSLContext#tmp_dh_callback	
OpenSSL::SSL::SSLContext#tmp_dh_callback=	
OpenSSL::SSL::SSLContext#verify_callback	
OpenSSL::SSL::SSLContext#verify_callback=	(proc)
OpenSSL::SSL::SSLContext#verify_depth	
OpenSSL::SSL::SSLContext#verify_depth=	(depth)
OpenSSL::SSL::SSLContext#verify_mode	
OpenSSL::SSL::SSLContext#verify_mode=	(mode)
OpenSSL::SSL::SSLContext.new	(ssl_method)
OpenSSL::SSL::SSLServer#accept	
OpenSSL::SSL::SSLServer#addr	
OpenSSL::SSL::SSLServer#close	
OpenSSL::SSL::SSLServer#closed?	
OpenSSL::SSL::SSLServer#do_not_reverse_lookup=	(bool)
OpenSSL::SSL::SSLServer#fcntl	(cmd[,arg])
OpenSSL::SSL::SSLServer#getsockopt	(level,optname)
OpenSSL::SSL::SSLServer#listen	
OpenSSL::SSL::SSLServer#peeraddr	
OpenSSL::SSL::SSLServer#setsockopt	
OpenSSL::SSL::SSLServer#start_immediately	
OpenSSL::SSL::SSLServer#start_immediately=	(bool)
OpenSSL::SSL::SSLServer#to_io	
OpenSSL::SSL::SSLServer.new	(svr,ctx)
OpenSSL::SSL::SSLSocket#<<	
OpenSSL::SSL::SSLSocket#accept	
OpenSSL::SSL::SSLSocket#cipher	
OpenSSL::SSL::SSLSocket#close	
OpenSSL::SSL::SSLSocket#connect	
OpenSSL::SSL::SSLSocket#context	
OpenSSL::SSL::SSLSocket#do_not_reverse_lookup=	(bool)
OpenSSL::SSL::SSLSocket#each	
OpenSSL::SSL::SSLSocket#each_byte	
OpenSSL::SSL::SSLSocket#eof?	
OpenSSL::SSL::SSLSocket#fcntl	(cmd[,arg])
OpenSSL::SSL::SSLSocket#flush	
OpenSSL::SSL::SSLSocket#getc	
OpenSSL::SSL::SSLSocket#gets	([rs])
OpenSSL::SSL::SSLSocket#getsockopt	(level,optname)
OpenSSL::SSL::SSLSocket#io	
OpenSSL::SSL::SSLSocket#peer_cert	
OpenSSL::SSL::SSLSocket#peer_cert_chain	
OpenSSL::SSL::SSLSocket#pending	
OpenSSL::SSL::SSLSocket#post_connection_check	
OpenSSL::SSL::SSLSocket#print	([arg[,...]])
OpenSSL::SSL::SSLSocket#printf	(format[,arg[,...]])
OpenSSL::SSL::SSLSocket#puts	([obj[,...]])
OpenSSL::SSL::SSLSocket#read	([length[,buf]])
OpenSSL::SSL::SSLSocket#readchar	
OpenSSL::SSL::SSLSocket#readlines	([rs])
OpenSSL::SSL::SSLSocket#setsockopt	(level,optname,optval)
OpenSSL::SSL::SSLSocket#state	
OpenSSL::SSL::SSLSocket#sync_close	
OpenSSL::SSL::SSLSocket#sync_close=	
OpenSSL::SSL::SSLSocket#sysclose	
OpenSSL::SSL::SSLSocket#sysread	(length[,buf])
OpenSSL::SSL::SSLSocket#syswrite	(string)
OpenSSL::SSL::SSLSocket#to_io	
OpenSSL::SSL::SSLSocket#ungetc	(char)
OpenSSL::SSL::SSLSocket#write	(str)
OpenSSL::SSL::SSLSocket.new	(socket)	(socket,context)
OpenSSL::X509::Attribute#oid	
OpenSSL::X509::Attribute#oid=	
OpenSSL::X509::Attribute#to_der	
OpenSSL::X509::Attribute#value	
OpenSSL::X509::Attribute#value=	
OpenSSL::X509::Attribute.new	
OpenSSL::X509::CRL#add_extension	(ex)
OpenSSL::X509::CRL#add_revoked	(rev)
OpenSSL::X509::CRL#extensions	
OpenSSL::X509::CRL#extensions=	(extensions)
OpenSSL::X509::CRL#issuer	
OpenSSL::X509::CRL#issuer=	(issuer)
OpenSSL::X509::CRL#last_update	
OpenSSL::X509::CRL#last_update=	(time)
OpenSSL::X509::CRL#next_update	
OpenSSL::X509::CRL#next_update=	(time)
OpenSSL::X509::CRL#revoked	
OpenSSL::X509::CRL#revoked=	(rev)
OpenSSL::X509::CRL#sign	(pkey,chain=nil)
OpenSSL::X509::CRL#signature_algorithm	
OpenSSL::X509::CRL#to_der	
OpenSSL::X509::CRL#to_pem	
OpenSSL::X509::CRL#to_s	
OpenSSL::X509::CRL#to_text	
OpenSSL::X509::CRL#verify	(key)
OpenSSL::X509::CRL#version	
OpenSSL::X509::CRL#version=	(version)
OpenSSL::X509::CRL.new		(str)	(io)
OpenSSL::X509::Certificate#add_extension	(ext)
OpenSSL::X509::Certificate#check_private_key	(pkey)
OpenSSL::X509::Certificate#extensions	
OpenSSL::X509::Certificate#extensions=	(extensions)
OpenSSL::X509::Certificate#issuer	
OpenSSL::X509::Certificate#issuer=	(name)
OpenSSL::X509::Certificate#not_after	
OpenSSL::X509::Certificate#not_after=	(time)
OpenSSL::X509::Certificate#not_before	
OpenSSL::X509::Certificate#not_before=	(time)
OpenSSL::X509::Certificate#public_key	
OpenSSL::X509::Certificate#public_key=	(pkeu)
OpenSSL::X509::Certificate#serial	
OpenSSL::X509::Certificate#serial=	(serial)
OpenSSL::X509::Certificate#sign	(pkey,digest)
OpenSSL::X509::Certificate#signature_algorithm	
OpenSSL::X509::Certificate#subject	
OpenSSL::X509::Certificate#subject=	(name)
OpenSSL::X509::Certificate#to_der	
OpenSSL::X509::Certificate#to_pem	
OpenSSL::X509::Certificate#to_s	
OpenSSL::X509::Certificate#to_text	
OpenSSL::X509::Certificate#verify	(key)
OpenSSL::X509::Certificate#version	
OpenSSL::X509::Certificate#version=	(version)
OpenSSL::X509::Certificate.new		(str)	(io)
OpenSSL::X509::Extension#critical=	
OpenSSL::X509::Extension#critical?	
OpenSSL::X509::Extension#oid	
OpenSSL::X509::Extension#oid=	
OpenSSL::X509::Extension#to_a	
OpenSSL::X509::Extension#to_der	
OpenSSL::X509::Extension#to_h	
OpenSSL::X509::Extension#to_s	
OpenSSL::X509::Extension#value	
OpenSSL::X509::Extension#value=	
OpenSSL::X509::Extension.new	(oid,value,critical)
OpenSSL::X509::ExtensionFactory#config	
OpenSSL::X509::ExtensionFactory#config=	(config)
OpenSSL::X509::ExtensionFactory#create_ext	(oid,value,critical=false)
OpenSSL::X509::ExtensionFactory#create_ext_from_array	
OpenSSL::X509::ExtensionFactory#create_ext_from_hash	
OpenSSL::X509::ExtensionFactory#create_ext_from_string	
OpenSSL::X509::ExtensionFactory#crl	
OpenSSL::X509::ExtensionFactory#crl=	(crl)
OpenSSL::X509::ExtensionFactory#issuer_certificate	
OpenSSL::X509::ExtensionFactory#issuer_certificate=	(name)
OpenSSL::X509::ExtensionFactory#subject_certificate	
OpenSSL::X509::ExtensionFactory#subject_certificate=	(name)
OpenSSL::X509::ExtensionFactory#subject_request	
OpenSSL::X509::ExtensionFactory#subject_request=	(name)
OpenSSL::X509::ExtensionFactory.new	([issuer_cert[,subject_cert[,subject_req[,crl]]]])
OpenSSL::X509::Name#<=>	
OpenSSL::X509::Name#add_entry	(oid,value,type=nil)
OpenSSL::X509::Name#cmp	(name)
OpenSSL::X509::Name#to_a	
OpenSSL::X509::Name#to_der	
OpenSSL::X509::Name#to_s	
OpenSSL::X509::Name.new	([[oid1,val1],[oid2,val2]...],template=OBJECT_TYPE_TEMPLATE)
OpenSSL::X509::Name.parse	(str)
OpenSSL::X509::Name.parse_openssl	
OpenSSL::X509::Name.parse_rfc2253	
OpenSSL::X509::Request#add_attribute	
OpenSSL::X509::Request#attributes	
OpenSSL::X509::Request#attributes=	
OpenSSL::X509::Request#public_key	
OpenSSL::X509::Request#public_key=	
OpenSSL::X509::Request#sign	
OpenSSL::X509::Request#signature_algorithm	
OpenSSL::X509::Request#subject	
OpenSSL::X509::Request#subject=	
OpenSSL::X509::Request#to_der	
OpenSSL::X509::Request#to_pem	
OpenSSL::X509::Request#to_s	
OpenSSL::X509::Request#to_text	
OpenSSL::X509::Request#verify	
OpenSSL::X509::Request#version	
OpenSSL::X509::Request#version=	
OpenSSL::X509::Request.new	
OpenSSL::X509::Revoked#add_extension	(ex)
OpenSSL::X509::Revoked#extensions	
OpenSSL::X509::Revoked#extensions=	(extensions)
OpenSSL::X509::Revoked#serial	
OpenSSL::X509::Revoked#serial=	(serial)
OpenSSL::X509::Revoked#time	
OpenSSL::X509::Revoked#time=	(time)
OpenSSL::X509::Revoked.new	
OpenSSL::X509::Store#add_cert	(cert)
OpenSSL::X509::Store#add_crl	(crl)
OpenSSL::X509::Store#add_file	(file)
OpenSSL::X509::Store#add_path	(path)
OpenSSL::X509::Store#chain	
OpenSSL::X509::Store#error	
OpenSSL::X509::Store#error_string	
OpenSSL::X509::Store#flags=	(flags)
OpenSSL::X509::Store#purpose=	(purpose)
OpenSSL::X509::Store#set_default_paths	
OpenSSL::X509::Store#time=	
OpenSSL::X509::Store#trust=	(trust)
OpenSSL::X509::Store#verify	(cert,chain=nil)
OpenSSL::X509::Store#verify_callback	
OpenSSL::X509::Store#verify_callback=	(proc)
OpenSSL::X509::Store.new	
OpenSSL::X509::StoreContext#chain	
OpenSSL::X509::StoreContext#cleanup	
OpenSSL::X509::StoreContext#current_cert	
OpenSSL::X509::StoreContext#current_crl	
OpenSSL::X509::StoreContext#error	
OpenSSL::X509::StoreContext#error=	
OpenSSL::X509::StoreContext#error_depth	
OpenSSL::X509::StoreContext#error_string	
OpenSSL::X509::StoreContext#flags=	
OpenSSL::X509::StoreContext#purpose=	
OpenSSL::X509::StoreContext#time=	
OpenSSL::X509::StoreContext#trust=	
OpenSSL::X509::StoreContext#verify	
OpenSSL::X509::StoreContext.new	
OpenStruct#==	(other)->bool
OpenStruct#delete_field	(name)->object
OpenStruct#inspect	->String
OpenStruct#new_ostruct_member	(name)->Symbol
OpenStruct#to_s	->String
OpenStruct.new	(hash=nil)->OpenStruct
OpenURI.open_uri	(name,mode='r',perm=nil,options={})->StringIO	(name,mode='r',perm=nil,options={}){|sio|...}
OpenURI::Meta#base_uri	->URI
OpenURI::Meta#charset	->String|nil	{...}->String
OpenURI::Meta#content_encoding	->[String]
OpenURI::Meta#content_type	->String
OpenURI::Meta#last_modified	->Time|nil
OpenURI::Meta#meta	->Hash
OpenURI::Meta#status	->[String]
OpenURI::OpenRead#open	(mode='r',perm=nil,options={}))->StringIO	(mode='r',perm=nil,options={})){|sio|...}
OpenURI::OpenRead#read	(options={})->String
OptionParser#accept	(klass,pat=/.*/){|str|...}
OptionParser#banner	->String
OptionParser#banner=	(heading)
OptionParser#default_argv	->[String]
OptionParser#default_argv=	(argv)
OptionParser#environment	(env)->[String]
OptionParser#getopts	(argv,*opts)->Hash	(*opts)->Hash
OptionParser#help	->String
OptionParser#load	(filename=nil)->bool
OptionParser#on	(short,desc=""){|v|...}->self	(long,desc=""){|v|...}->self	(short,long,desc=""){|v|...}->self	(short,pat=/.*/,desc=""){|v|...}->self	(long,pat=/.*/,desc=""){|v|...}->self	(short,long,pat=/.*/,desc=""){|v|...}->self	(short,klass=String,desc=""){|v|...}->self	(long,klass=String,desc=""){|v|...}->self	(short,long,klass=String,desc=""){|v|...}->self	(short,*rest){|v|...}->self	(long,*rest){|v|...}->self	(short,long,*rest){|v|...}->self
OptionParser#on_head	(*arg,&block)
OptionParser#on_tail	(*arg,&block)
OptionParser#order	(argv)->[String]	(argv){|s|...}->[String]	(*args)->[String]	(*args){|s|...}->[String]
OptionParser#order!	(argv=self.default_argv)->[String]	(argv=self.default_argv){|s|...}->[String]
OptionParser#parse	(argv)->[String]	(*args)->[String]
OptionParser#parse!	(argv=self.default_argv)->[String]
OptionParser#permute	(argv)->[String]	(*args)->[String]
OptionParser#permute!	(argv=self.default_argv)->[String]
OptionParser#program_name	->String
OptionParser#program_name=	(name)
OptionParser#reject	(klass)
OptionParser#release	->String
OptionParser#release=	(rel)
OptionParser#separator	(sep)
OptionParser#summarize	(to=[],width=self.summary_width,max=width-1,indent=self.summary_indent)	(to=[],width=self.summary_width,max=width-1,indent=self.summary_indent){|line|...}
OptionParser#summary_indent	->String
OptionParser#summary_indent=	(indent)
OptionParser#summary_width	->Integer
OptionParser#summary_width=	(width)
OptionParser#to_a	->[String]
OptionParser#to_s	->String
OptionParser#ver	->String
OptionParser#version	->String
OptionParser#version=	(ver)
OptionParser.accept	(klass,pat=/.*/){|str|...}
OptionParser.getopts	(argv,*opts)	(*opts)
OptionParser.new	(banner=nil,width=32,indent=''*4)->OptionParser	(banner=nil,width=32,indent=''*4){|opt|...}->OptionParser
OptionParser.reject	(klass)
OptionParser::Arguable#getopts	(short_opt,*long_opt)->Hash
OptionParser::Arguable#options	->OptionParser	{|opt|...}->object|nil
OptionParser::Arguable#options=	(opt)
OptionParser::Arguable#order!	->[String]	{|s|...}->[String]
OptionParser::Arguable#parse!	->[String]
OptionParser::Arguable#permute!	->[String]
PP#comma_breakable	
PP#object_group	(obj){...}
PP#pp	(obj)
PP#seplist	(list,sep=lambda{comma_breakable},iter_method=:each){|e|...}
PP.pp	(obj,out=$>,width=79)->object
PP.sharing_detection	->bool
PP.sharing_detection=	(boolean)
PP.singleline_pp	(obj,out=$>)->object
PStore#[]	(name)->object
PStore#[]=	(name,value)
PStore#abort	
PStore#commit	
PStore#delete	(name)->object
PStore#fetch	(name,default=PStore::Error)->object
PStore#in_transaction	
PStore#path	->String
PStore#root?	(name)->bool
PStore#roots	->Array
PStore#transaction	(read_only=false){|pstore|...}->object
PStore#ultra_safe	->bool
PStore#ultra_safe=	(flag)
PStore.new	(file,thread_safe=false)->PStore
PStore::DummyMutex#synchronize	{...}->object
PTY.getpty	(command)->[IO,IO,Integer]	(command){|read,write,pid|...}
PTY.protect_signal	{...}->self
PTY.reset_signal	->self
PTY.spawn	(command)->[IO,IO,Integer]	(command){|read,write,pid|...}
PTY::ChildExited#status	->Process::Status
Pathname#+	(other)->Pathname
Pathname#<=>	(other)->bool
Pathname#==	(other)->bool
Pathname#===	(other)->bool
Pathname#absolute?	->bool
Pathname#ascend	{|pathname|...}
Pathname#atime	->Time
Pathname#basename	(suffix="")->Pathname
Pathname#blockdev?	->bool
Pathname#chardev?	->bool
Pathname#chdir	(&block)
Pathname#children	(with_directory=true)->[Pathname]
Pathname#chmod	(mode)->Integer
Pathname#chown	(owner,group)->Integer
Pathname#chroot	
Pathname#cleanpath	(consider_symlink=false)->Pathname
Pathname#ctime	->Time
Pathname#delete	
Pathname#descend	{|pathname|...}
Pathname#dir_foreach	{|pathname|...}
Pathname#directory?	->bool
Pathname#dirname	->Pathname
Pathname#each_entry	{|pathname|...}
Pathname#each_filename	{|v|...}
Pathname#each_line	(*args,&block)
Pathname#entries	
Pathname#eql?	(other)->bool
Pathname#executable?	->bool
Pathname#executable_real?	->bool
Pathname#exist?	->bool
Pathname#expand_path	(default_dir='.')->Pathname
Pathname#extname	->String
Pathname#file?	->bool
Pathname#find	{|pathname|...}
Pathname#fnmatch	(pattern,*args)->bool
Pathname#fnmatch?	(pattern,*args)->bool
Pathname#foreach	(*args,&block)
Pathname#foreachline	(*args,&block)
Pathname#ftype	->String
Pathname#grpowned?	->bool
Pathname#hash	->Fixnum
Pathname#join	(*args)->Pathname
Pathname#lchmod	(mode)->Integer
Pathname#lchown	(owner,group)->Integer
Pathname#link	(old)->0
Pathname#lstat	->File::Stat
Pathname#make_link	(old)
Pathname#make_symlink	(old)
Pathname#mkdir	(*args)
Pathname#mkpath	
Pathname#mountpoint?	->bool
Pathname#mtime	->Time
Pathname#open	(mode='r',perm=0666)->File	(mode='r',perm=0666){|file|...}->object
Pathname#opendir	(&block)
Pathname#owned?	->bool
Pathname#parent	->Pathname
Pathname#pipe?	->bool
Pathname#read	(*args)->String|nil
Pathname#readable?	->bool
Pathname#readable_real?	->bool
Pathname#readlines	(*args)
Pathname#readlink	->Pathname
Pathname#realpath	->Pathname
Pathname#relative?	->bool
Pathname#relative_path_from	(base_directory)->Pathname
Pathname#rename	(to)->0
Pathname#rmdir	
Pathname#rmtree	
Pathname#root?	->bool
Pathname#setgid?	->bool
Pathname#setuid?	->bool
Pathname#size	->Integer
Pathname#size?	->bool
Pathname#socket?	->bool
Pathname#split	->Array
Pathname#stat	->File::Stat
Pathname#sticky?	->bool
Pathname#sub	(pattern,replace)->Pathname	(pattern){|matched|...}->Pathname
Pathname#sub_ext	(replace)->Pathname
Pathname#symlink	(old)->0
Pathname#symlink?	->bool
Pathname#sysopen	(*args)
Pathname#to_path	->String
Pathname#to_s	->String
Pathname#truncate	(length)->0
Pathname#unlink	
Pathname#utime	(atime,mtime)->Integer
Pathname#world_readable?	->bool
Pathname#world_writable?	->bool
Pathname#writable?	->bool
Pathname#writable_real?	->bool
Pathname#zero?	->bool
Pathname.getwd	->Pathname
Pathname.glob	(pattern,flags=0)->[Pathname]	(pattern,flags=0){|pathname|...}
Pathname.new	(path)->Pathname
Pathname.pwd	->Pathname
PrettyPrint#breakable	(sep='')	(sep,width=sep.length)
PrettyPrint#first?	->bool
PrettyPrint#flush	
PrettyPrint#genspace	->Proc
PrettyPrint#group	(indent=0,open_obj='',close_obj='',open_width=open_obj.length,close_width=close_obj.length){...}
PrettyPrint#indent	->Integer
PrettyPrint#maxwidth	->Integer
PrettyPrint#nest	(indent){...}
PrettyPrint#newline	->String
PrettyPrint#output	->object
PrettyPrint#text	(obj)	(obj,width=obj.length)
PrettyPrint.format	(output='',maxwidth=79,newline="\n",genspace=lambda{|n|''*n}){|pp|...}->object
PrettyPrint.new	(output='',maxwidth=79,newline="\n")->PrettyPrint	(output='',maxwidth=79,newline="\n"){|width|...}->PrettyPrint
PrettyPrint.singleline_format	(output='',maxwidth=79,newline="\n",genspace=lambda{|n|''*n}){|pp|...}->object
Prime#each	(upper_bound=nil,generator=EratosthenesGenerator.new){|prime|...}->object	(upper_bound=nil,generator=EratosthenesGenerator.new)->Enumerator
Prime#int_from_prime_division	(pd)->Integer
Prime#prime?	(value,generator=Prime::Generator23.new)->bool
Prime#prime_division	(value,generator=Prime::Generator23.new)->[[Integer,Integer]]
Prime.instance	->Prime
Prime.new	->Prime
Prime::EratosthenesGenerator#next	->Integer
Prime::EratosthenesGenerator#rewind	
Prime::EratosthenesGenerator#succ	->Integer
Prime::Generator23#next	->Integer
Prime::Generator23#rewind	
Prime::Generator23#succ	->Integer
Prime::OldCompatibility#each	{|prime|...}->object	->object
Prime::OldCompatibility#next	->Integer
Prime::OldCompatibility#succ	->Integer
Prime::PseudoPrimeGenerator#each	{|prime|...}->object	->self
Prime::PseudoPrimeGenerator#each_with_index	{|prime,index|...}->self	->Enumerator
Prime::PseudoPrimeGenerator#next	
Prime::PseudoPrimeGenerator#rewind	
Prime::PseudoPrimeGenerator#succ	
Prime::PseudoPrimeGenerator#upper_bound	->Integer|nil
Prime::PseudoPrimeGenerator#upper_bound=	(upper_bound)
Prime::PseudoPrimeGenerator#with_index	{|prime,index|...}->self	->Enumerator
Prime::PseudoPrimeGenerator#with_object	(obj){|prime,obj|...}->object	(obj)->Enumerator
Prime::PseudoPrimeGenerator.new	(upper_bound=nil)
Prime::TrialDivisionGenerator#next	->Integer
Prime::TrialDivisionGenerator#rewind	
Prime::TrialDivisionGenerator#succ	->Integer
Proc#===	(obj)
Proc#[]	(*arg)
Proc#arity	->Fixnum
Proc#binding	->Binding
Proc#call	(*arg)
Proc#curry	->Proc	(arity)->Proc
Proc#lambda?	->bool
Proc#source_location	->[String,Fixnum]|nil
Proc#to_proc	->self
Proc#to_s	->String
Proc#yield	(*arg)
Proc.new	->Proc	{...}->Proc
Process.abort	(message="")
Process.daemon	(nochdir=nil,noclose=nil)->0
Process.detach	(pid)->Thread
Process.egid	->Integer
Process.egid=	(gid)
Process.euid	->Integer
Process.euid=	(uid)
Process.exec	(command,*args)
Process.exit	(status=true)
Process.exit!	(status=false)
Process.fork	->Integer|nil	{...}->Integer|nil
Process.getpgid	(pid=0)->Integer
Process.getpgrp	->Integer
Process.getpriority	(which,who)->Integer
Process.getrlimit	(resource)->[Integer]
Process.gid	->Integer
Process.gid=	(gid)
Process.groups	->[Integer]
Process.groups=	(gids)
Process.initgroups	(user,group)->[Integer]
Process.kill	(signal,pid,*rest)->Integer
Process.maxgroups	->Integer
Process.maxgroups=	(num)
Process.pid	->Integer
Process.ppid	->Integer
Process.setpgid	(pid,pgrp)->0
Process.setpgrp	->0
Process.setpriority	(which,who,prio)->0
Process.setrlimit	(resource,cur_limit,max_limit)	(resource,limit)
Process.setsid	->Integer
Process.spawn	(cmd,*arg)->Integer
Process.times	->Struct::Tms
Process.uid	->Integer
Process.uid=	(id)
Process.wait	->Integer	2->Array
Process.wait2	->Array
Process.waitall	->Array
Process.waitpid	(pid,flags=0)->Integer|nil	2(pid,flags=0)->Array|nil
Process.waitpid2	(pid,flags=0)->Array|nil
Process::GID.change_privilege	(id)->Integer
Process::GID.eid	->Integer
Process::GID.eid=	(id)
Process::GID.grant_privilege	(id)->Integer
Process::GID.re_exchange	->Integer
Process::GID.re_exchangeable?	->bool
Process::GID.rid	->Integer
Process::GID.sid_available?	->bool
Process::GID.switch	->Integer	{...}->object
Process::Status#&	(other)->Integer
Process::Status#==	(other)->bool
Process::Status#>>	(num)->Integer
Process::Status#coredump?	->bool
Process::Status#exited?	->bool
Process::Status#exitstatus	->nil|Integer
Process::Status#inspect	->String
Process::Status#pid	->Integer
Process::Status#signaled?	->bool
Process::Status#stopped?	->bool
Process::Status#stopsig	->nil|Integer
Process::Status#success?	->bool
Process::Status#termsig	->nil|Integer
Process::Status#to_i	->Integer
Process::Status#to_int	->Integer
Process::Status#to_s	->String
Process::Sys.getegid	->Integer
Process::Sys.geteuid	->Integer
Process::Sys.getgid	->Integer
Process::Sys.getuid	->Integer
Process::Sys.issetugid	->bool
Process::Sys.setegid	(id)
Process::Sys.seteuid	(id)
Process::Sys.setgid	(id)
Process::Sys.setregid	(rid,eid)
Process::Sys.setresgid	(rid,eid,sid)
Process::Sys.setresuid	(rid,eid,sid)
Process::Sys.setreuid	(rid,eid)
Process::Sys.setrgid	(id)
Process::Sys.setruid	(id)
Process::Sys.setuid	(id)
Process::UID.change_privilege	(id)->Integer
Process::UID.eid	->Integer
Process::UID.eid=	(id)
Process::UID.grant_privilege	(id)->Integer
Process::UID.re_exchange	->Integer
Process::UID.re_exchangeable?	->bool
Process::UID.rid	->Integer
Process::UID.sid_available?	->bool
Process::UID.switch	->Integer	{....}->object
Profiler__.print_profile	(file)
Profiler__.start_profile	->object
Profiler__.stop_profile	
Queue#<<	(value)
Queue#clear	
Queue#deq	(non_block=false)
Queue#empty?	
Queue#enq	(value)
Queue#length	
Queue#num_waiting	
Queue#pop	(non_block=false)
Queue#push	(value)
Queue#shift	(non_block=false)
Queue#size	
Queue.new	
REXML::AttlistDecl#[]	(key)
REXML::AttlistDecl#each	{|name,value|...}
REXML::AttlistDecl#element_name	
REXML::AttlistDecl#include?	(key)
REXML::AttlistDecl#node_type	
REXML::AttlistDecl#write	(out,indent=-1)
REXML::AttlistDecl.new	(source)
REXML::Attribute#==	(other)
REXML::Attribute#clone	
REXML::Attribute#element	
REXML::Attribute#element=	(element)
REXML::Attribute#hash	
REXML::Attribute#inspect	
REXML::Attribute#namespace	(arg=nil)
REXML::Attribute#node_type	
REXML::Attribute#normalized=	(value)
REXML::Attribute#prefix	
REXML::Attribute#remove	
REXML::Attribute#to_s	
REXML::Attribute#to_string	
REXML::Attribute#value	
REXML::Attribute#write	(output,indent=-1)
REXML::Attribute#xpath	
REXML::Attribute.new	(first,second=nil,parrent=nil)
REXML::Attributes#<<	(attribute)
REXML::Attributes#[]	(name)
REXML::Attributes#[]=	(name,value)
REXML::Attributes#add	(attribute)
REXML::Attributes#delete	(attribute)
REXML::Attributes#delete_all	(name)
REXML::Attributes#each	{|name,value|...}
REXML::Attributes#each_attribute	{|attribute|...}
REXML::Attributes#get_attribute	(name)
REXML::Attributes#get_attribute_ns	(namespace,name)
REXML::Attributes#length	
REXML::Attributes#namespaces	
REXML::Attributes#prefixes	
REXML::Attributes#size	
REXML::Attributes#to_a	
REXML::Attributes.new	(element)
REXML::CData#clone	
REXML::CData#to_s	
REXML::CData#value	
REXML::CData#write	(output=$stdout,indent=-1,transitive=false,ie_hack=false)
REXML::CData.new	(first,whitespace=true,parent=nil)
REXML::Child#bytes	
REXML::Child#document	
REXML::Child#next_sibling	
REXML::Child#next_sibling=	(other)
REXML::Child#parent	
REXML::Child#parent=	(other)
REXML::Child#previous_sibling	
REXML::Child#previous_sibling=	(other)
REXML::Child#remove	
REXML::Child#replace_with	(child)
REXML::Child.new	(parent=nil)
REXML::Comment#<=>	(other)
REXML::Comment#==	(other)
REXML::Comment#clone	
REXML::Comment#node_type	
REXML::Comment#string	
REXML::Comment#string=	(value)
REXML::Comment#to_s	
REXML::Comment#write	(output,indent=-1,transitive=false,ie_hack=false)
REXML::Comment.new	(first,second=nil)
REXML::DTD::ElementDecl.new	(match)
REXML::DTD::EntityDecl#to_s	
REXML::DTD::EntityDecl#write	(output,indent)
REXML::DTD::EntityDecl.new	(src)
REXML::DTD::EntityDecl.parse_source	(source,listener)
REXML::DTD::NotationDecl#to_s	
REXML::DTD::NotationDecl#write	(output,indent)
REXML::DTD::NotationDecl.new	(src)
REXML::DTD::NotationDecl.parse_source	(source,listener)
REXML::DTD::Parser.parse	(input)
REXML::DTD::Parser.parse_helper	(input)
REXML::Declaration#to_s	
REXML::Declaration#write	(output,indent)
REXML::Declaration.new	(src)
REXML::DocType#add	(child)
REXML::DocType#attribute_of	(element,attribute)
REXML::DocType#attributes_of	(element)
REXML::DocType#clone	
REXML::DocType#context	
REXML::DocType#entities	
REXML::DocType#entity	(name)
REXML::DocType#external_id	
REXML::DocType#name	
REXML::DocType#namespaces	
REXML::DocType#node_type	
REXML::DocType#notation	(name)
REXML::DocType#notations	
REXML::DocType#public	
REXML::DocType#system	
REXML::DocType#write	(output,indent=0,transitive=false,ie_hack=false)
REXML::DocType.new	(first,parent=nil)
REXML::Element#add_attribute	(key,value=nil)
REXML::Element#add_attributes	(hash)
REXML::Element#add_element	(element,attrs=nil)
REXML::Element#add_namespace	(prefix,uri=nil)
REXML::Element#add_text	(text)
REXML::Element#attribute	(name,namespace=nil)
REXML::Element#attributes	
REXML::Element#cdatas	
REXML::Element#clone	
REXML::Element#comments	
REXML::Element#context	
REXML::Element#context=	(value)
REXML::Element#delete_attribute	(key)
REXML::Element#delete_element	(element)
REXML::Element#delete_namespace	(namespace="xmlns")
REXML::Element#document	
REXML::Element#each_element	(xpath=nil){|element|...}
REXML::Element#each_element_with_attribute	(key,value=nil,max=0,name=nil){|element|...}
REXML::Element#each_element_with_text	(text=nil,max=0,name=nil){|element|...}
REXML::Element#elements	
REXML::Element#get_elements	(xpath)
REXML::Element#get_text	(path=nil)
REXML::Element#has_attributes?	
REXML::Element#has_elements?	
REXML::Element#has_text?	
REXML::Element#ignore_whitespace_nodes	
REXML::Element#inspect	
REXML::Element#instructions	
REXML::Element#namespace	
REXML::Element#namespaces	
REXML::Element#next_element	
REXML::Element#node_type	
REXML::Element#prefixes	
REXML::Element#previous_element	
REXML::Element#raw	
REXML::Element#root	
REXML::Element#root_node	
REXML::Element#text	(path=nil)
REXML::Element#text=	(text)
REXML::Element#texts	
REXML::Element#whitespace	
REXML::Element#write	(writer=$stdout,indent=-1,transitive=false,ie_hack=false)
REXML::Element#xpath	
REXML::Element.new	(arg=UNDEFINED,parent=nil,context=nil)
REXML::ElementDecl.new	(src)
REXML::Elements#<<	(element=nil)
REXML::Elements#[]	(index,name=nil)
REXML::Elements#[]=	(index,element)
REXML::Elements#add	(element=nil)
REXML::Elements#collect	(xpath=nil){|element|..}
REXML::Elements#delete	(element)
REXML::Elements#delete_all	(xpath)
REXML::Elements#each	(xpath=nil){|element|...}
REXML::Elements#empty?	
REXML::Elements#index	(element)
REXML::Elements#inject	(xpath=nil,initial=nil){|element|...}
REXML::Elements#size	
REXML::Elements#to_a	(xpath=nil)
REXML::Elements.new	(parent)
REXML::Encoding#check_encoding	(str)
REXML::Encoding#decode	(str)
REXML::Encoding#decode_ascii	(str)
REXML::Encoding#decode_eucjp	(str)
REXML::Encoding#decode_iconv	(str)
REXML::Encoding#decode_sjis	(content)
REXML::Encoding#decode_unile	(str)
REXML::Encoding#decode_utf16	(str)
REXML::Encoding#decode_utf8	(str)
REXML::Encoding#encode	(content)
REXML::Encoding#encode_ascii	(content)
REXML::Encoding#encode_eucjp	(content)
REXML::Encoding#encode_iconv	(content)
REXML::Encoding#encode_sjis	(str)
REXML::Encoding#encode_unile	(content)
REXML::Encoding#encode_utf16	(content)
REXML::Encoding#encode_utf8	(content)
REXML::Encoding#encoding	
REXML::Encoding#encoding=	(euc)
REXML::Encoding.apply	(obj,enc)
REXML::Encoding.encoding_method	(enc)
REXML::Encoding.register	(enc){|obj|...}
REXML::Entity#external	
REXML::Entity#name	
REXML::Entity#ndata	
REXML::Entity#normalized	
REXML::Entity#pubid	
REXML::Entity#ref	
REXML::Entity#to_s	
REXML::Entity#unnormalized	
REXML::Entity#value	
REXML::Entity#write	(out,indent=-1)
REXML::Entity.matches?	(string)
REXML::Entity.new	(stream,value=nil,parent=nil,reference=false)
REXML::ExternalEntity#to_s	
REXML::ExternalEntity#write	(output,indent)
REXML::ExternalEntity.new	(src)
REXML::Functions.boolean	(object=nil)
REXML::Functions.ceiling	(number)
REXML::Functions.compare_language	(lang1,lang2)
REXML::Functions.concat	(*objects)
REXML::Functions.contains	(string,test)
REXML::Functions.context=	(value)
REXML::Functions.count	(node_set)
REXML::Functions.false	
REXML::Functions.floor	(number)
REXML::Functions.get_namespace	(node_set=nil)
REXML::Functions.id	(object)
REXML::Functions.lang	(language)
REXML::Functions.last	
REXML::Functions.local_name	(node_set=nil)
REXML::Functions.method_missing	(id)
REXML::Functions.name	(node_set=nil)
REXML::Functions.namespace_context	
REXML::Functions.namespace_context=	(x)
REXML::Functions.namespace_uri	(node_set=nil)
REXML::Functions.normalize_space	(string=nil)
REXML::Functions.not	(object)
REXML::Functions.number	(object=nil)
REXML::Functions.position	
REXML::Functions.processing_instruction	(node)
REXML::Functions.round	(number)
REXML::Functions.starts_with	(string,test)
REXML::Functions.string	(object=nil)
REXML::Functions.string_length	(string)
REXML::Functions.string_value	(o)
REXML::Functions.substring	(string,start,length=nil)
REXML::Functions.substring_after	(string,test)
REXML::Functions.substring_before	(string,test)
REXML::Functions.sum	(nodes)
REXML::Functions.text	
REXML::Functions.translate	(string,tr1,tr2)
REXML::Functions.true	
REXML::Functions.variables	
REXML::Functions.variables=	(x)
REXML::IOSource#consume	(pattern)
REXML::IOSource#current_line	
REXML::IOSource#empty?	
REXML::IOSource#match	(pattern,cons=false)
REXML::IOSource#position	
REXML::IOSource#read	
REXML::IOSource#scan	(pattern,cons=false)
REXML::IOSource.new	(arg,block_size=500)
REXML::Instruction#==	(other)
REXML::Instruction#clone	
REXML::Instruction#content	
REXML::Instruction#content=	(value)
REXML::Instruction#inspect	
REXML::Instruction#node_type	
REXML::Instruction#target	
REXML::Instruction#target=	(value)
REXML::Instruction#write	(writer,indent=-1,transitive=false,ie_hack=false)
REXML::Instruction.new	(target,content=nil)
REXML::Light::Node#<<	(element)
REXML::Light::Node#=~	(path)
REXML::Light::Node#[]	(reference,ns=nil)
REXML::Light::Node#[]=	(reference,ns,value=nil)
REXML::Light::Node#children	
REXML::Light::Node#each	{|x|...}
REXML::Light::Node#has_name?	
REXML::Light::Node#local_name	
REXML::Light::Node#local_name=	(name_str)
REXML::Light::Node#name	
REXML::Light::Node#name=	(name_str,ns=nil)
REXML::Light::Node#namespace	(prefix=prefix())
REXML::Light::Node#namespace=	(namespace)
REXML::Light::Node#node_type	
REXML::Light::Node#parent	
REXML::Light::Node#parent=	(node)
REXML::Light::Node#prefix	(namespace=nil)
REXML::Light::Node#root	
REXML::Light::Node#size	
REXML::Light::Node#text=	(foo)
REXML::Light::Node#to_s	
REXML::Light::Node.new	(node=nil)
REXML::Namespace#expanded_name	
REXML::Namespace#fully_expanded_name	
REXML::Namespace#has_name?	(other,ns=nil)
REXML::Namespace#local_name	
REXML::Namespace#name	
REXML::Namespace#name=	(name)
REXML::Namespace#prefix	
REXML::Namespace#prefix=	(value)
REXML::Node#each_recursive	{|node|...}
REXML::Node#find_first_recursive	{|node|...}
REXML::Node#indent	(to,ind)
REXML::Node#index_in_parent	
REXML::Node#next_sibling_node	
REXML::Node#parent?	
REXML::Node#previous_sibling_node	
REXML::Node#to_s	(indent=-1)
REXML::NotationDecl#name	
REXML::NotationDecl#public	
REXML::NotationDecl#public=	(value)
REXML::NotationDecl#system	
REXML::NotationDecl#system=	(value)
REXML::NotationDecl#to_s	
REXML::NotationDecl#write	(output,indent=-1)
REXML::NotationDecl.new	(name,middle,pub,sys)
REXML::Output#<<	(content)
REXML::Output#encoding	
REXML::Output#to_s	
REXML::Output.new	(real_IO,encd="iso-8859-1")
REXML::Parent#<<	(object)
REXML::Parent#[]	(index)
REXML::Parent#[]=	(*args)
REXML::Parent#add	(object)
REXML::Parent#children	
REXML::Parent#deep_clone	
REXML::Parent#delete	(object)
REXML::Parent#delete_at	(index)
REXML::Parent#delete_if	{|object|...}
REXML::Parent#each	{|object|...}
REXML::Parent#each_child	{|object|...}
REXML::Parent#each_index	{|index|...}
REXML::Parent#index	(child)
REXML::Parent#insert_after	(child1,child2)
REXML::Parent#insert_before	(child1,child2)
REXML::Parent#length	
REXML::Parent#parent?	
REXML::Parent#push	(object)
REXML::Parent#replace_child	(to_replace,replacement)
REXML::Parent#size	
REXML::Parent#to_a	
REXML::Parent#unshift	(object)
REXML::Parent.new	(parent=nil)
REXML::ParseException#context	
REXML::ParseException#continued_exception	
REXML::ParseException#continued_exception=	(value)
REXML::ParseException#line	
REXML::ParseException#parser	
REXML::ParseException#parser=	(value)
REXML::ParseException#position	
REXML::ParseException#source	
REXML::ParseException#source=	(value)
REXML::ParseException#to_s	
REXML::ParseException.new	(messagesource=nil,parser=nil,exception=nil)
REXML::Parsers::BaseParser#add_listener	(listener)
REXML::Parsers::BaseParser#empty?	
REXML::Parsers::BaseParser#entity	(reference,entities)
REXML::Parsers::BaseParser#has_next?	
REXML::Parsers::BaseParser#normalize	(input,entities=nil,entity_filter=nil)
REXML::Parsers::BaseParser#peek	(depth=0)
REXML::Parsers::BaseParser#position	
REXML::Parsers::BaseParser#pull	
REXML::Parsers::BaseParser#source	
REXML::Parsers::BaseParser#stream=	(source)
REXML::Parsers::BaseParser#unnormalize	(string,entities=nil,filter=nil)
REXML::Parsers::BaseParser#unshift	(token)
REXML::Parsers::BaseParser.new	(source)
REXML::Parsers::LightParser#add_listener	(listener)
REXML::Parsers::LightParser#parse	
REXML::Parsers::LightParser#rewind	
REXML::Parsers::LightParser.new	(stream)
REXML::Parsers::PullEvent#[]	(start,endd=nil)
REXML::Parsers::PullEvent#attlistdecl?	
REXML::Parsers::PullEvent#cdata?	
REXML::Parsers::PullEvent#comment?	
REXML::Parsers::PullEvent#doctype?	
REXML::Parsers::PullEvent#elementdecl?	
REXML::Parsers::PullEvent#end_element?	
REXML::Parsers::PullEvent#entity?	
REXML::Parsers::PullEvent#entitydecl?	
REXML::Parsers::PullEvent#error?	
REXML::Parsers::PullEvent#event_type	
REXML::Parsers::PullEvent#inspect	
REXML::Parsers::PullEvent#instruction?	
REXML::Parsers::PullEvent#notationdecl?	
REXML::Parsers::PullEvent#start_element?	
REXML::Parsers::PullEvent#text?	
REXML::Parsers::PullEvent#xmldecl?	
REXML::Parsers::PullEvent.new	(arg)
REXML::Parsers::PullParser#add_listener	(listener)
REXML::Parsers::PullParser#each	{|event|...}
REXML::Parsers::PullParser#empty?	
REXML::Parsers::PullParser#entity	
REXML::Parsers::PullParser#has_next?	
REXML::Parsers::PullParser#peek	(depth=0)
REXML::Parsers::PullParser#pull	
REXML::Parsers::PullParser#source	
REXML::Parsers::PullParser#unshift	
REXML::Parsers::PullParser.new	(stream)
REXML::Parsers::SAX2Parser#add_listener	(listener)
REXML::Parsers::SAX2Parser#deafen	(listener)	{...}
REXML::Parsers::SAX2Parser#listen	(sym,ary){...}	(sym){...}	(ary,listener)	(ary){...}	(listener)
REXML::Parsers::SAX2Parser#parse	
REXML::Parsers::SAX2Parser#source	
REXML::Parsers::SAX2Parser.new	(source)
REXML::Parsers::StreamParser#add_listener	(listener)
REXML::Parsers::StreamParser#parse	
REXML::Parsers::StreamParser.new	(source,listener)
REXML::Parsers::TreeParser#add_listener	(listener)
REXML::Parsers::TreeParser#parse	
REXML::Parsers::TreeParser.new	(source,build_context=REXML::Document.new)
REXML::Parsers::UltraLightParser#add_listener	(listener)
REXML::Parsers::UltraLightParser#parse	
REXML::Parsers::UltraLightParser#rewind	
REXML::Parsers::UltraLightParser.new	(stream)
REXML::Parsers::XPathParser#abbreviate	(path)
REXML::Parsers::XPathParser#expand	(path)
REXML::Parsers::XPathParser#namespaces=	(namespaces)
REXML::Parsers::XPathParser#parse	(path)
REXML::Parsers::XPathParser#predicate	(path)
REXML::Parsers::XPathParser#predicate_to_string	(path){|path|...}
REXML::QuickPath.attribute	(name)
REXML::QuickPath.axe	(elements,axe_name,rest)
REXML::QuickPath.each	(element,path,namespaces=EMPTY_HASH){|element|...}
REXML::QuickPath.filter	(elements,path)
REXML::QuickPath.first	(element,path,namespaces=EMPTY_HASH)
REXML::QuickPath.function	(elements,fname,rest)
REXML::QuickPath.match	(element,path,namespaces=EMPTY_HASH)
REXML::QuickPath.method_missing	(id,*args)
REXML::QuickPath.name	
REXML::QuickPath.parse_args	(element,string)
REXML::QuickPath.predicate	(elements,path)
REXML::SAX2Listener#attlistdecl	(element,pairs,contents)
REXML::SAX2Listener#cdata	(content)
REXML::SAX2Listener#characters	(text)
REXML::SAX2Listener#comment	(comment)
REXML::SAX2Listener#doctype	(name,pub_sys,long_name,uri)
REXML::SAX2Listener#elementdecl	(content)
REXML::SAX2Listener#end_document	
REXML::SAX2Listener#end_element	(uri,localname,qname)
REXML::SAX2Listener#end_prefix_mapping	(prefix)
REXML::SAX2Listener#entitydecl	(content)
REXML::SAX2Listener#notationdecl	(content)
REXML::SAX2Listener#processing_instruction	(target,data)
REXML::SAX2Listener#progress	(position)
REXML::SAX2Listener#start_document	
REXML::SAX2Listener#start_element	(uri,localname,qname,attributes)
REXML::SAX2Listener#start_prefix_mapping	(prefix,uri)
REXML::SAX2Listener#xmldecl	(version,encoding,standalone)
REXML::Source#buffer	
REXML::Source#consume	(pattern)
REXML::Source#current_line	
REXML::Source#empty?	
REXML::Source#encoding	
REXML::Source#encoding=	(enc)
REXML::Source#line	
REXML::Source#match	(pattern,cons=false)
REXML::Source#match_to	(char,pattern)
REXML::Source#match_to_consume	(char,pattern)
REXML::Source#position	
REXML::Source#read	
REXML::Source#scan	(pattern,cons=false)
REXML::Source.new	(arg)
REXML::SourceFactory.create_from	(arg)
REXML::StreamListener#attlistdecl	(element_name,attributes,raw_content)
REXML::StreamListener#cdata	(content)
REXML::StreamListener#comment	(comment)
REXML::StreamListener#doctype	(name,pub_sys,long_name,uri)
REXML::StreamListener#doctype_end	
REXML::StreamListener#elementdecl	(content)
REXML::StreamListener#entity	(content)
REXML::StreamListener#entitydecl	(content)
REXML::StreamListener#instruction	(name,instruction)
REXML::StreamListener#notationdecl	(content)
REXML::StreamListener#tag_end	(name)
REXML::StreamListener#tag_start	(name,attrs)
REXML::StreamListener#text	(text)
REXML::StreamListener#xmldecl	(version,encoding,standalone)
REXML::SyncEnumerator#each	{|*objects|...}
REXML::SyncEnumerator#length	
REXML::SyncEnumerator#size	
REXML::SyncEnumerator.new	(*enums)
REXML::Text#<<	(to_append)
REXML::Text#<=>	(other)
REXML::Text#clone	
REXML::Text#empty?	
REXML::Text#indent_text	(string,level=1,style="\t",indentfirstline=true)
REXML::Text#inspect	
REXML::Text#node_type	
REXML::Text#raw	
REXML::Text#raw=	(value)
REXML::Text#to_s	
REXML::Text#value	
REXML::Text#value=	(val)
REXML::Text#wrap	(string,width,addnewline=false)
REXML::Text#write	(writer,indent=-1,transitive=false,ie_hack=false)
REXML::Text#write_with_substitution	(out,input)
REXML::Text#xpath	
REXML::Text.new	(arg,respect_whitespace=false,parent=nil,raw=nil,entity_filter=nil,illegal=REXML::Text::ILLEGAL)
REXML::Text.normalize	(input,doctype=nil,entity_filter=nil)
REXML::Text.read_with_substitution	(input,illegal=nil)
REXML::Text.unnormalize	(string,doctype=nil,filter=nil,illegal=nil)
REXML::Validation::Choice#<<	(event)
REXML::Validation::Choice#add_event_to_arry	(arry,evt)
REXML::Validation::Choice#expected	
REXML::Validation::Choice#inspect	
REXML::Validation::Choice#matches?	(event)
REXML::Validation::Choice#next	(event)
REXML::Validation::Choice#reset	
REXML::Validation::Choice.new	(context)
REXML::Validation::Event#==	(other)
REXML::Validation::Event#done?	
REXML::Validation::Event#event_arg	
REXML::Validation::Event#event_arg=	(value)
REXML::Validation::Event#event_type	
REXML::Validation::Event#inspect	
REXML::Validation::Event#matches?	(event)
REXML::Validation::Event#single?	
REXML::Validation::Event#to_s	
REXML::Validation::Event.new	(event_type,event_arg=nil)
REXML::Validation::Interleave#expected	
REXML::Validation::Interleave#inspect	
REXML::Validation::Interleave#matches?	(event)
REXML::Validation::Interleave#next	(event)
REXML::Validation::Interleave#next_current	(event)
REXML::Validation::Interleave#reset	
REXML::Validation::Interleave.new	(context)
REXML::Validation::OneOrMore#expected	
REXML::Validation::OneOrMore#matches?	(event)
REXML::Validation::OneOrMore#next	(event)
REXML::Validation::OneOrMore#reset	
REXML::Validation::OneOrMore.new	(context)
REXML::Validation::Optional#expected	
REXML::Validation::Optional#matches?	(event)
REXML::Validation::Optional#next	(event)
REXML::Validation::Ref#inspect	
REXML::Validation::Ref#to_s	
REXML::Validation::Ref.new	(value)
REXML::Validation::RelaxNG#count	
REXML::Validation::RelaxNG#count=	(value)
REXML::Validation::RelaxNG#current	
REXML::Validation::RelaxNG#current=	(value)
REXML::Validation::RelaxNG#receive	(event)
REXML::Validation::RelaxNG#references	
REXML::Validation::RelaxNG.new	(source)
REXML::Validation::Sequence#matches?	(event)
REXML::Validation::State#<<	(event)
REXML::Validation::State#add_event_to_arry	(arry,evt)
REXML::Validation::State#expand_ref_in	(arry,ind)
REXML::Validation::State#expected	
REXML::Validation::State#generate_event	(event)
REXML::Validation::State#inspect	
REXML::Validation::State#next	(event)
REXML::Validation::State#previous=	(previous)
REXML::Validation::State#reset	
REXML::Validation::State#to_s	
REXML::Validation::State.new	(context)
REXML::Validation::ValidationException.new	(msg)
REXML::Validation::Validator#dump	
REXML::Validation::Validator#reset	
REXML::Validation::Validator#validate	(event)
REXML::Validation::ZeroOrMore#expected	
REXML::Validation::ZeroOrMore#next	(event)
REXML::XMLDecl#==	(other)
REXML::XMLDecl#clone	
REXML::XMLDecl#dowrite	
REXML::XMLDecl#encoding=	(enc)
REXML::XMLDecl#inspect	
REXML::XMLDecl#node_type	
REXML::XMLDecl#nowrite	
REXML::XMLDecl#old_enc=	(enc)
REXML::XMLDecl#stand_alone?	
REXML::XMLDecl#standalone	
REXML::XMLDecl#standalone=	(value)
REXML::XMLDecl#version	
REXML::XMLDecl#version=	(value)
REXML::XMLDecl#write	(writer,indent=-1,transitive=false,ie_hack=false)
REXML::XMLDecl#writeencoding	
REXML::XMLDecl#xmldecl	(version,encoding,standalone)
REXML::XMLDecl.default	
REXML::XMLDecl.new	(version=REXML::XMLDecl::DEFAULT_VERSION,encoding=nil,standalone=nil)
REXML::XPath.each	(element,path=nil,namespaces={},variables={}){|e|...}
REXML::XPath.first	(element,path=nil,namespaces={},variables={})
REXML::XPath.match	(element,path=nil,namespaces={},variables={})
REXML::XPathParser#[]=	(variable_name,value)
REXML::XPathParser#first	(path_stack,node)
REXML::XPathParser#get_first	(path,nodeset)
REXML::XPathParser#match	(path_stack,nodeset)
REXML::XPathParser#namespaces=	(namespaces={})
REXML::XPathParser#parse	(path,nodeset)
REXML::XPathParser#predicate	(path,nodeset)
REXML::XPathParser#variables=	(vars={})
REXML::XPathParser.new	
RSS::BaseTrackBackModel#trackback_about	
RSS::BaseTrackBackModel#trackback_about=	
RSS::BaseTrackBackModel#trackback_abouts	
RSS::BaseTrackBackModel#trackback_ping	
RSS::BaseTrackBackModel#trackback_ping=	
RSS::ContentModel#content_encoded	
RSS::ContentModel#content_encoded=	
RSS::Element#full_name	
RSS::Element#tag_name	
RSS::ImageFaviconModel#image_favicon	
RSS::ImageFaviconModel#image_favicon=	
RSS::ImageFaviconModel::ImageFavicon#about	
RSS::ImageFaviconModel::ImageFavicon#about=	
RSS::ImageFaviconModel::ImageFavicon#date	
RSS::ImageFaviconModel::ImageFavicon#date=	
RSS::ImageFaviconModel::ImageFavicon#image_size	
RSS::ImageFaviconModel::ImageFavicon#image_size=	
RSS::ImageFaviconModel::ImageFavicon#size	
RSS::ImageFaviconModel::ImageFavicon#size=	
RSS::ImageItemModel#image_item	
RSS::ImageItemModel#image_item=	
RSS::ImageItemModel::ImageItem#about	
RSS::ImageItemModel::ImageItem#about=	
RSS::ImageItemModel::ImageItem#date	
RSS::ImageItemModel::ImageItem#date=	
RSS::ImageItemModel::ImageItem#height	
RSS::ImageItemModel::ImageItem#height=	
RSS::ImageItemModel::ImageItem#image_height	
RSS::ImageItemModel::ImageItem#image_height=	
RSS::ImageItemModel::ImageItem#image_width	
RSS::ImageItemModel::ImageItem#image_width=	
RSS::ImageItemModel::ImageItem#resource	
RSS::ImageItemModel::ImageItem#resource=	
RSS::ImageItemModel::ImageItem#width	
RSS::ImageItemModel::ImageItem#width=	
RSS::Maker.make	(version,&block)
RSS::Maker::ChannelBase#about	
RSS::Maker::ChannelBase#about=	()
RSS::Maker::ChannelBase#categories	
RSS::Maker::ChannelBase#cloud	
RSS::Maker::ChannelBase#copyright	
RSS::Maker::ChannelBase#copyright=	()
RSS::Maker::ChannelBase#date	
RSS::Maker::ChannelBase#date=	()
RSS::Maker::ChannelBase#description	
RSS::Maker::ChannelBase#description=	()
RSS::Maker::ChannelBase#docs	
RSS::Maker::ChannelBase#docs=	()
RSS::Maker::ChannelBase#generator	
RSS::Maker::ChannelBase#generator=	()
RSS::Maker::ChannelBase#language	
RSS::Maker::ChannelBase#language=	()
RSS::Maker::ChannelBase#lastBuildDate	
RSS::Maker::ChannelBase#lastBuildDate=	()
RSS::Maker::ChannelBase#link	
RSS::Maker::ChannelBase#link=	()
RSS::Maker::ChannelBase#managingEditor	
RSS::Maker::ChannelBase#managingEditor=	()
RSS::Maker::ChannelBase#pubDate	
RSS::Maker::ChannelBase#pubDate=	()
RSS::Maker::ChannelBase#rating	
RSS::Maker::ChannelBase#rating=	()
RSS::Maker::ChannelBase#skipDays	
RSS::Maker::ChannelBase#skipHours	
RSS::Maker::ChannelBase#title	
RSS::Maker::ChannelBase#title=	()
RSS::Maker::ChannelBase#ttl	
RSS::Maker::ChannelBase#ttl=	()
RSS::Maker::ChannelBase#webMaster	
RSS::Maker::ChannelBase#webMaster=	()
RSS::Maker::ChannelBase::CategoriesBase#new_category	
RSS::Maker::ChannelBase::CategoriesBase::CategoryBase#content	
RSS::Maker::ChannelBase::CategoriesBase::CategoryBase#content=	()
RSS::Maker::ChannelBase::CategoriesBase::CategoryBase#domain	
RSS::Maker::ChannelBase::CategoriesBase::CategoryBase#domain=	()
RSS::Maker::ChannelBase::SkipDaysBase#new_day	
RSS::Maker::ChannelBase::SkipDaysBase::DayBase#content	
RSS::Maker::ChannelBase::SkipDaysBase::DayBase#content=	()
RSS::Maker::ChannelBase::SkipHoursBase#new_hour	
RSS::Maker::ChannelBase::SkipHoursBase::HourBase#content	
RSS::Maker::ChannelBase::SkipHoursBase::HourBase#content=	()
RSS::Maker::ImageBase#description	
RSS::Maker::ImageBase#description=	()
RSS::Maker::ImageBase#height	
RSS::Maker::ImageBase#height=	()
RSS::Maker::ImageBase#title	
RSS::Maker::ImageBase#title=	()
RSS::Maker::ImageBase#url	
RSS::Maker::ImageBase#url=	()
RSS::Maker::ImageBase#width	
RSS::Maker::ImageBase#width=	()
RSS::Maker::ItemsBase#do_sort	
RSS::Maker::ItemsBase#do_sort=	()
RSS::Maker::ItemsBase#max_size	
RSS::Maker::ItemsBase#max_size=	()
RSS::Maker::ItemsBase#new_item	
RSS::Maker::ItemsBase::ItemBase#author	
RSS::Maker::ItemsBase::ItemBase#author=	()
RSS::Maker::ItemsBase::ItemBase#categories	
RSS::Maker::ItemsBase::ItemBase#comments	
RSS::Maker::ItemsBase::ItemBase#comments=	()
RSS::Maker::ItemsBase::ItemBase#date	
RSS::Maker::ItemsBase::ItemBase#date=	()
RSS::Maker::ItemsBase::ItemBase#description	
RSS::Maker::ItemsBase::ItemBase#description=	()
RSS::Maker::ItemsBase::ItemBase#enclosure	
RSS::Maker::ItemsBase::ItemBase#guid	
RSS::Maker::ItemsBase::ItemBase#link	
RSS::Maker::ItemsBase::ItemBase#link=	()
RSS::Maker::ItemsBase::ItemBase#pubDate	
RSS::Maker::ItemsBase::ItemBase#pubDate=	()
RSS::Maker::ItemsBase::ItemBase#source	
RSS::Maker::ItemsBase::ItemBase#title	
RSS::Maker::ItemsBase::ItemBase#title=	()
RSS::Maker::RSS20::Items::Item::Categories#new_category	
RSS::Maker::RSS20::Items::Item::Enclosure#length	
RSS::Maker::RSS20::Items::Item::Enclosure#length=	()
RSS::Maker::RSS20::Items::Item::Enclosure#type	
RSS::Maker::RSS20::Items::Item::Enclosure#type=	()
RSS::Maker::RSS20::Items::Item::Enclosure#url	
RSS::Maker::RSS20::Items::Item::Enclosure#url=	()
RSS::Maker::RSS20::Items::Item::Guid#content	
RSS::Maker::RSS20::Items::Item::Guid#content=	()
RSS::Maker::RSS20::Items::Item::Guid#isPermaLink	
RSS::Maker::RSS20::Items::Item::Guid#isPermaLink=	()
RSS::Maker::RSS20::Items::Item::Source#content	
RSS::Maker::RSS20::Items::Item::Source#content=	()
RSS::Maker::RSS20::Items::Item::Source#url	
RSS::Maker::RSS20::Items::Item::Source#url=	()
RSS::Maker::RSSBase#channel	
RSS::Maker::RSSBase#encoding	
RSS::Maker::RSSBase#encoding=	()
RSS::Maker::RSSBase#image	
RSS::Maker::RSSBase#items	
RSS::Maker::RSSBase#rss_version	
RSS::Maker::RSSBase#standalone	
RSS::Maker::RSSBase#standalone=	()
RSS::Maker::RSSBase#textinput	
RSS::Maker::RSSBase#version	
RSS::Maker::RSSBase#version=	()
RSS::Maker::RSSBase#xml_stylesheets	
RSS::Maker::TextinputBase#description	
RSS::Maker::TextinputBase#description=	()
RSS::Maker::TextinputBase#link	
RSS::Maker::TextinputBase#link=	()
RSS::Maker::TextinputBase#name	
RSS::Maker::TextinputBase#name=	()
RSS::Maker::TextinputBase#title	
RSS::Maker::TextinputBase#title=	()
RSS::Maker::XMLStyleSheets::XMLStyleSheet#alternate	
RSS::Maker::XMLStyleSheets::XMLStyleSheet#alternate=	()
RSS::Maker::XMLStyleSheets::XMLStyleSheet#charset	
RSS::Maker::XMLStyleSheets::XMLStyleSheet#charset=	()
RSS::Maker::XMLStyleSheets::XMLStyleSheet#href	
RSS::Maker::XMLStyleSheets::XMLStyleSheet#href=	()
RSS::Maker::XMLStyleSheets::XMLStyleSheet#media	
RSS::Maker::XMLStyleSheets::XMLStyleSheet#media=	()
RSS::Maker::XMLStyleSheets::XMLStyleSheet#title	
RSS::Maker::XMLStyleSheets::XMLStyleSheet#title=	()
RSS::Maker::XMLStyleSheets::XMLStyleSheet#type	
RSS::Maker::XMLStyleSheets::XMLStyleSheet#type=	()
RSS::NSError#prefix	
RSS::NSError#tag	
RSS::NSError#uri	
RSS::NotWellFormedError#element	
RSS::NotWellFormedError#line	
RSS::Parser#do_validate	
RSS::Parser#do_validate=	
RSS::Parser#ignore_unknown_element	
RSS::Parser#ignore_unknown_element=	
RSS::Parser#parse	
RSS::Parser#rss	
RSS::Parser.new	
RSS::Parser.parse	
RSS::RDF#channel	
RSS::RDF#channel=	
RSS::RDF#encoding	
RSS::RDF#encoding=	
RSS::RDF#image	
RSS::RDF#image=	
RSS::RDF#item	
RSS::RDF#item=	
RSS::RDF#items	
RSS::RDF#rss_version	
RSS::RDF#rss_version=	
RSS::RDF#standalone	
RSS::RDF#standalone=	
RSS::RDF#textinput	
RSS::RDF#textinput=	
RSS::RDF#version	
RSS::RDF#version=	
RSS::RDF::Channel#about	
RSS::RDF::Channel#about=	
RSS::RDF::Channel#date	
RSS::RDF::Channel#date=	
RSS::RDF::Channel#description	
RSS::RDF::Channel#description=	
RSS::RDF::Channel#image	
RSS::RDF::Channel#image=	
RSS::RDF::Channel#items	
RSS::RDF::Channel#items=	
RSS::RDF::Channel#link	
RSS::RDF::Channel#link=	
RSS::RDF::Channel#textinput	
RSS::RDF::Channel#textinput=	
RSS::RDF::Channel#title	
RSS::RDF::Channel#title=	
RSS::RDF::Channel::Image#resource	
RSS::RDF::Channel::Image#resource=	
RSS::RDF::Channel::ImageFavicon#about	
RSS::RDF::Channel::ImageFavicon#about=	
RSS::RDF::Channel::ImageFavicon#date	
RSS::RDF::Channel::ImageFavicon#date=	
RSS::RDF::Channel::ImageFavicon#image_size	
RSS::RDF::Channel::ImageFavicon#image_size=	
RSS::RDF::Channel::ImageFavicon#size	
RSS::RDF::Channel::ImageFavicon#size=	
RSS::RDF::Channel::Items#resources	
RSS::RDF::Channel::Textinput#resource	
RSS::RDF::Channel::Textinput#resource=	
RSS::RDF::Image#about	
RSS::RDF::Image#about=	
RSS::RDF::Image#date	
RSS::RDF::Image#date=	
RSS::RDF::Image#link	
RSS::RDF::Image#link=	
RSS::RDF::Image#title	
RSS::RDF::Image#title=	
RSS::RDF::Image#url	
RSS::RDF::Image#url=	
RSS::RDF::Item#about	
RSS::RDF::Item#about=	
RSS::RDF::Item#date	
RSS::RDF::Item#date=	
RSS::RDF::Item#description	
RSS::RDF::Item#description=	
RSS::RDF::Item#link	
RSS::RDF::Item#link=	
RSS::RDF::Item#title	
RSS::RDF::Item#title=	
RSS::RDF::Textinput#about	
RSS::RDF::Textinput#about=	
RSS::RDF::Textinput#date	
RSS::RDF::Textinput#date=	
RSS::RDF::Textinput#description	
RSS::RDF::Textinput#description=	
RSS::RDF::Textinput#link	
RSS::RDF::Textinput#link=	
RSS::RDF::Textinput#name	
RSS::RDF::Textinput#name=	
RSS::RDF::Textinput#title	
RSS::RDF::Textinput#title=	
RSS::RootElementMixin#output_encoding	
RSS::RootElementMixin#output_encoding=	
RSS::RootElementMixin#to_xml	
RSS::Rss#channel	
RSS::Rss#channel=	
RSS::Rss#encoding	
RSS::Rss#encoding=	
RSS::Rss#image	
RSS::Rss#items	
RSS::Rss#rss_version	
RSS::Rss#rss_version=	
RSS::Rss#standalone	
RSS::Rss#standalone=	
RSS::Rss#textinput	
RSS::Rss#version	
RSS::Rss#version=	
RSS::Rss::Channel#categories	
RSS::Rss::Channel#category	
RSS::Rss::Channel#category=	
RSS::Rss::Channel#copyright	
RSS::Rss::Channel#copyright=	
RSS::Rss::Channel#date	
RSS::Rss::Channel#date=	
RSS::Rss::Channel#description	
RSS::Rss::Channel#description=	
RSS::Rss::Channel#docs	
RSS::Rss::Channel#docs=	
RSS::Rss::Channel#generator	
RSS::Rss::Channel#generator=	
RSS::Rss::Channel#image	
RSS::Rss::Channel#image=	
RSS::Rss::Channel#item	
RSS::Rss::Channel#item=	
RSS::Rss::Channel#items	
RSS::Rss::Channel#language	
RSS::Rss::Channel#language=	
RSS::Rss::Channel#lastBuildDate	
RSS::Rss::Channel#lastBuildDate=	
RSS::Rss::Channel#link	
RSS::Rss::Channel#link=	
RSS::Rss::Channel#managingEditor	
RSS::Rss::Channel#managingEditor=	
RSS::Rss::Channel#pubDate	
RSS::Rss::Channel#pubDate=	
RSS::Rss::Channel#rating	
RSS::Rss::Channel#rating=	
RSS::Rss::Channel#skipDays	
RSS::Rss::Channel#skipDays=	
RSS::Rss::Channel#skipHours	
RSS::Rss::Channel#skipHours=	
RSS::Rss::Channel#textInput	
RSS::Rss::Channel#textInput=	
RSS::Rss::Channel#title	
RSS::Rss::Channel#title=	
RSS::Rss::Channel#ttl	
RSS::Rss::Channel#ttl=	
RSS::Rss::Channel#webMaster	
RSS::Rss::Channel#webMaster=	
RSS::Rss::Channel::Cloud#domain	
RSS::Rss::Channel::Cloud#domain=	
RSS::Rss::Channel::Cloud#path	
RSS::Rss::Channel::Cloud#path=	
RSS::Rss::Channel::Cloud#port	
RSS::Rss::Channel::Cloud#port=	
RSS::Rss::Channel::Cloud#protocol	
RSS::Rss::Channel::Cloud#protocol=	
RSS::Rss::Channel::Cloud#registerProcedure	
RSS::Rss::Channel::Cloud#registerProcedure=	
RSS::Rss::Channel::Image#description	
RSS::Rss::Channel::Image#description=	
RSS::Rss::Channel::Image#height	
RSS::Rss::Channel::Image#height=	
RSS::Rss::Channel::Image#link	
RSS::Rss::Channel::Image#link=	
RSS::Rss::Channel::Image#title	
RSS::Rss::Channel::Image#title=	
RSS::Rss::Channel::Image#url	
RSS::Rss::Channel::Image#url=	
RSS::Rss::Channel::Image#width	
RSS::Rss::Channel::Image#width=	
RSS::Rss::Channel::Item#author	
RSS::Rss::Channel::Item#author=	
RSS::Rss::Channel::Item#categories	
RSS::Rss::Channel::Item#category	
RSS::Rss::Channel::Item#category=	
RSS::Rss::Channel::Item#comments	
RSS::Rss::Channel::Item#comments=	
RSS::Rss::Channel::Item#date	
RSS::Rss::Channel::Item#date=	
RSS::Rss::Channel::Item#description	
RSS::Rss::Channel::Item#description=	
RSS::Rss::Channel::Item#enclosure	
RSS::Rss::Channel::Item#enclosure=	
RSS::Rss::Channel::Item#guid	
RSS::Rss::Channel::Item#guid=	
RSS::Rss::Channel::Item#link	
RSS::Rss::Channel::Item#link=	
RSS::Rss::Channel::Item#pubDate	
RSS::Rss::Channel::Item#pubDate=	
RSS::Rss::Channel::Item#source	
RSS::Rss::Channel::Item#source=	
RSS::Rss::Channel::Item#title	
RSS::Rss::Channel::Item#title=	
RSS::Rss::Channel::Item::Category#content	
RSS::Rss::Channel::Item::Category#content=	
RSS::Rss::Channel::Item::Category#domain	
RSS::Rss::Channel::Item::Category#domain=	
RSS::Rss::Channel::Item::Enclosure#length	
RSS::Rss::Channel::Item::Enclosure#length=	
RSS::Rss::Channel::Item::Enclosure#type	
RSS::Rss::Channel::Item::Enclosure#type=	
RSS::Rss::Channel::Item::Enclosure#url	
RSS::Rss::Channel::Item::Enclosure#url=	
RSS::Rss::Channel::Item::Guid#isPermaLink	
RSS::Rss::Channel::Item::Source#content	
RSS::Rss::Channel::Item::Source#content=	
RSS::Rss::Channel::Item::Source#url	
RSS::Rss::Channel::Item::Source#url=	
RSS::Rss::Channel::TextInput#description	
RSS::Rss::Channel::TextInput#description=	
RSS::Rss::Channel::TextInput#link	
RSS::Rss::Channel::TextInput#link=	
RSS::Rss::Channel::TextInput#name	
RSS::Rss::Channel::TextInput#name=	
RSS::Rss::Channel::TextInput#title	
RSS::Rss::Channel::TextInput#title=	
RSS::Rss::SkipDays#day	
RSS::Rss::SkipDays#day=	
RSS::Rss::SkipDays#days	
RSS::Rss::SkipHours#hour	
RSS::Rss::SkipHours#hour=	
RSS::Rss::SkipHours#hours	
RSS::SyndicationModel#sy_updateBase	
RSS::SyndicationModel#sy_updateBase=	
RSS::SyndicationModel#sy_updateFrequency	
RSS::SyndicationModel#sy_updateFrequency=	
RSS::SyndicationModel#sy_updatePeriod	
RSS::SyndicationModel#sy_updatePeriod=	
RSS::TaxonomyTopicModel#taxo_topic	
RSS::TaxonomyTopicModel#taxo_topic=	
RSS::TaxonomyTopicModel::TaxonomyTopic#about	
RSS::TaxonomyTopicModel::TaxonomyTopic#about=	
RSS::TaxonomyTopicModel::TaxonomyTopic#date	
RSS::TaxonomyTopicModel::TaxonomyTopic#date=	
RSS::TaxonomyTopicModel::TaxonomyTopic#taxo_link	
RSS::TaxonomyTopicModel::TaxonomyTopic#taxo_link=	
RSS::TaxonomyTopicsModel#taxo_topics	
RSS::TaxonomyTopicsModel::TaxonomyTopics#resources	
RSS::TrackBackModel10::TrackBackAbout#resource	
RSS::TrackBackModel10::TrackBackAbout#resource=	
RSS::TrackBackModel10::TrackBackAbout#value	
RSS::TrackBackModel10::TrackBackAbout#value=	
RSS::TrackBackModel10::TrackBackPing#resource	
RSS::TrackBackModel10::TrackBackPing#resource=	
RSS::TrackBackModel10::TrackBackPing#value	
RSS::TrackBackModel10::TrackBackPing#value=	
RSS::TrackBackModel20::TrackBackAbout#content	
RSS::TrackBackModel20::TrackBackAbout#content=	
RSS::TrackBackModel20::TrackBackAbout#value	
RSS::TrackBackModel20::TrackBackAbout#value=	
RSS::TrackBackModel20::TrackBackPing#content	
RSS::TrackBackModel20::TrackBackPing#content=	
RSS::TrackBackModel20::TrackBackPing#value	
RSS::TrackBackModel20::TrackBackPing#value=	
RSS::XMLStyleSheet#alternate	
RSS::XMLStyleSheet#alternate=	
RSS::XMLStyleSheet#charset	
RSS::XMLStyleSheet#charset=	
RSS::XMLStyleSheet#href	
RSS::XMLStyleSheet#href=	
RSS::XMLStyleSheet#media	
RSS::XMLStyleSheet#media=	
RSS::XMLStyleSheet#title	
RSS::XMLStyleSheet#title=	
RSS::XMLStyleSheet#type	
RSS::XMLStyleSheet#type=	
RSS::XMLStyleSheetMixin#xml_stylesheets	
RSS::XMLStyleSheetMixin#xml_stylesheets=	
Racc::Parser#do_parse	
Racc::Parser#next_token	
Racc::Parser#on_error	(t,val,vstack)
Racc::Parser#token_to_str	(t)
Racc::Parser#yyaccept	
Racc::Parser#yyerrok	
Racc::Parser#yyerror	
Racc::Parser#yyparse	(recv,mid)
Racc::Parser.racc_runtime_type	
Rake.application	->Rake::Application
Rake.application=	(app)
Rake.original_dir	->String
Rake::Application#add_import	(file_name)
Rake::Application#add_loader	(ext,loader)
Rake::Application#collect_tasks	(argv)->Array
Rake::Application#const_warning	(const_name)
Rake::Application#display_prerequisites	
Rake::Application#display_tasks_and_comments	
Rake::Application#dynamic_width	->Fixnum
Rake::Application#dynamic_width_stty	
Rake::Application#dynamic_width_tput	
Rake::Application#find_rakefile_location	->Array|nil
Rake::Application#handle_options	
Rake::Application#have_rakefile	->String|nil
Rake::Application#init	(app_name='rake')
Rake::Application#invoke_task	(task_string)
Rake::Application#load_imports	
Rake::Application#load_rakefile	
Rake::Application#name	->String
Rake::Application#options	->OpenStruct
Rake::Application#original_dir	->String
Rake::Application#parse_task_string	(string)->[String,Array]
Rake::Application#rake_require	(file_name,paths=$LOAD_PATH,loaded=$")->bool
Rake::Application#rakefile	->String
Rake::Application#rakefile_location	->String
Rake::Application#raw_load_rakefile	
Rake::Application#run	
Rake::Application#standard_exception_handling	{...}
Rake::Application#standard_rake_options	->Array
Rake::Application#system_dir	->String
Rake::Application#terminal_width	->Fixnum
Rake::Application#top_level	
Rake::Application#top_level_tasks	->Array
Rake::Application#truncate	(string,width)->String
Rake::Application#truncate_output?	
Rake::Application#tty_output=	(tty_output_state)
Rake::Application#tty_output?	->bool
Rake::Application#unix?	->bool
Rake::Application#windows?	->bool
Rake::Cloneable#clone	->object
Rake::Cloneable#dup	->object
Rake::DefaultLoader#load	(filename)
Rake::EarlyTime#<=>	(other)->Fixnum
Rake::EarlyTime#to_s	->String
Rake::FileCreationTask#needed?	->bool
Rake::FileCreationTask#timestamp	->Rake::EarlyTime
Rake::FileList#*	(other)->Array|String
Rake::FileList#==	(array)->bool
Rake::FileList#calculate_exclude_regexp	
Rake::FileList#clear_exclude	->self
Rake::FileList#egrep	(pattern){|filename,count,line|...}
Rake::FileList#exclude	(*patterns){|entry|...}->self
Rake::FileList#exclude?	(file_name)->bool
Rake::FileList#existing	->Rake::FileList
Rake::FileList#existing!	->self
Rake::FileList#ext	(newext='')->Rake::FileList
Rake::FileList#gsub	(pattern,replace)->Rake::FileList
Rake::FileList#gsub!	(pattern,replace)->self
Rake::FileList#import	(array)->self
Rake::FileList#include	(*filenames)->self
Rake::FileList#is_a?	(klass)->bool
Rake::FileList#kind_of?	(klass)->bool
Rake::FileList#pathmap	(spec=nil)->Rake::FileList
Rake::FileList#resolve	->self
Rake::FileList#sub	(pattern,replace)->Rake::FileList
Rake::FileList#sub!	(pattern,replace)->self
Rake::FileList#to_a	->Array
Rake::FileList#to_ary	->Array
Rake::FileList#to_s	->String
Rake::FileList.[]	(*args)->Rake::FileList
Rake::FileList.new	(*patterns){|self|...}
Rake::FileTask#needed?	->bool
Rake::FileTask#timestamp	->Time
Rake::FileTask.scope_name	(scope,task_name)->String
Rake::GemPackageTask#define	
Rake::GemPackageTask#gem_file	->String
Rake::GemPackageTask#gem_spec	->Gem::Specification
Rake::GemPackageTask#gem_spec=	(gem_spec)
Rake::GemPackageTask#init	(gem_spec)
Rake::GemPackageTask.new	(gem_spec){|t|...}
Rake::InvocationChain#append	(task_name)->Rake::InvocationChain
Rake::InvocationChain#member?	(task_name)->bool
Rake::InvocationChain#to_s	->String
Rake::InvocationChain.append	(task_name,chain)->Rake::InvocationChain
Rake::InvocationChain.new	(task_name,tail)
Rake::InvocationChain::EmptyInvocationChain#append	(task_name)->Rake::InvocationChain
Rake::InvocationChain::EmptyInvocationChain#member?	(task_name)->bool
Rake::InvocationChain::EmptyInvocationChain#to_s	->String
Rake::MakefileLoader#load	(filename)
Rake::NameSpace#[]	(name)->Rake::Task
Rake::NameSpace#tasks	->Array
Rake::NameSpace.new	(task_manager,scope_list)
Rake::PackageTask#define	->self
Rake::PackageTask#init	(name,version)
Rake::PackageTask#name	->String
Rake::PackageTask#name=	(name)
Rake::PackageTask#need_tar	->bool
Rake::PackageTask#need_tar=	(flag)
Rake::PackageTask#need_tar_bz2	->bool
Rake::PackageTask#need_tar_bz2=	(flag)
Rake::PackageTask#need_tar_gz	->bool
Rake::PackageTask#need_tar_gz=	(flag)
Rake::PackageTask#need_zip	->bool
Rake::PackageTask#need_zip=	(flag)
Rake::PackageTask#package_dir	->String
Rake::PackageTask#package_dir=	(dirname)
Rake::PackageTask#package_dir_path	->String
Rake::PackageTask#package_files	->Rake::FileList
Rake::PackageTask#package_files=	(file_list)
Rake::PackageTask#package_name	->String
Rake::PackageTask#tar_bz2_file	->String
Rake::PackageTask#tar_command	->String
Rake::PackageTask#tar_command=	(command)
Rake::PackageTask#tar_gz_file	->String
Rake::PackageTask#tgz_file	->String
Rake::PackageTask#version	->String
Rake::PackageTask#version=	(str)
Rake::PackageTask#zip_command	->String
Rake::PackageTask#zip_command=	(command)
Rake::PackageTask#zip_file	->String
Rake::PackageTask.new	(name=nil,version=nil){|t|...}
Rake::RDocTask#define	->self
Rake::RDocTask#external	->bool
Rake::RDocTask#external=	(flag)
Rake::RDocTask#main	->String
Rake::RDocTask#main=	(filename)
Rake::RDocTask#name	->String
Rake::RDocTask#name=	(name)
Rake::RDocTask#option_list	->Array
Rake::RDocTask#option_string	->String
Rake::RDocTask#options	->Array
Rake::RDocTask#options=	(options)
Rake::RDocTask#quote	(str)->String
Rake::RDocTask#rdoc_dir	->String
Rake::RDocTask#rdoc_dir=	(dir)
Rake::RDocTask#rdoc_files	->Rake::FileList
Rake::RDocTask#rdoc_files=	(filelist)
Rake::RDocTask#template	->String
Rake::RDocTask#template=	(template)
Rake::RDocTask#title	->String
Rake::RDocTask#title=	(title)
Rake::RDocTask.new	(name=:rdoc){|pkg|...}
Rake::Task#actions	->Array
Rake::Task#add_description	(description)
Rake::Task#application	->Rake::Application
Rake::Task#application=	(app)
Rake::Task#arg_description	
Rake::Task#arg_names	->Array
Rake::Task#clear	->self
Rake::Task#clear_actions	->self
Rake::Task#clear_prerequisites	->self
Rake::Task#comment	->String
Rake::Task#comment=	(comment)
Rake::Task#enhance	(deps=nil){...}->self
Rake::Task#execute	(args=nil)
Rake::Task#full_comment	->String
Rake::Task#inspect	->String
Rake::Task#investigation	->String
Rake::Task#invoke	(*args)
Rake::Task#name	->String
Rake::Task#needed?	->true
Rake::Task#prerequisites	->Array
Rake::Task#reenable	->false
Rake::Task#scope	
Rake::Task#set_arg_names	(args)
Rake::Task#source	->String
Rake::Task#sources	->Array
Rake::Task#sources=	(sources)
Rake::Task#timestamp	->Time
Rake::Task#to_s	->String
Rake::Task.[]	(task_name)->Rake::Task
Rake::Task.clear	
Rake::Task.create_rule	(*args){...}->Rake::Task
Rake::Task.define_task	(*args){...}->Rake::Task
Rake::Task.new	(task_name,app)
Rake::Task.scope_name	(scope,task_name)->String
Rake::Task.task_defined?	(task_name)->bool
Rake::Task.tasks	->Array
Rake::TaskArguments#[]	(key)->object
Rake::TaskArguments#each	{|key,val|...}->Hash
Rake::TaskArguments#inspect	->String
Rake::TaskArguments#lookup	(name)->object
Rake::TaskArguments#names	->Array
Rake::TaskArguments#new_scope	(names)->Rake::TaskArguments
Rake::TaskArguments#to_hash	->Hash
Rake::TaskArguments#to_s	->String
Rake::TaskArguments#with_defaults	(defaults)->Hash
Rake::TaskArguments.new	(names,values,parent=nil)
Rake::TaskManager#[]	(task_name,scopes=nil)->Rake::Task
Rake::TaskManager#clear	
Rake::TaskManager#create_rule	(*args){...}
Rake::TaskManager#current_scope	->Array
Rake::TaskManager#define_task	(task_class,*args){...}->Rake::Task
Rake::TaskManager#enhance_with_matching_rule	(task_name,level=0)->Rake::Task|nil
Rake::TaskManager#in_namespace	(name){|name_space|...}->Array
Rake::TaskManager#intern	(task_class,task_name)->Rake::Task
Rake::TaskManager#last_comment	->String
Rake::TaskManager#last_description	->String
Rake::TaskManager#last_description=	(description)
Rake::TaskManager#lookup	(task_name,initial_scope=nil)->Rake::Task|nil
Rake::TaskManager#resolve_args	(args)->Array
Rake::TaskManager#synthesize_file_task	(task_name)->Rake::FileTask|nil
Rake::TaskManager#tasks	->Array
Rake::TestTask#define	->self
Rake::TestTask#libs	->Array
Rake::TestTask#libs=	(libs)
Rake::TestTask#loader	->Symbol
Rake::TestTask#loader=	(style)
Rake::TestTask#name	->String
Rake::TestTask#name=	(str)
Rake::TestTask#options	->String
Rake::TestTask#options=	(option_str)
Rake::TestTask#pattern	->String
Rake::TestTask#pattern=	(pattern)
Rake::TestTask#rake_loader	
Rake::TestTask#ruby_opts	->Array
Rake::TestTask#ruby_opts=	(options)
Rake::TestTask#test_files=	(list)
Rake::TestTask#verbose	->bool
Rake::TestTask#verbose=	(flag)
Rake::TestTask#warning	->bool
Rake::TestTask#warning=	(flag)
Rake::TestTask.new	(name=:test){|t|...}
RakeFileUtils#nowrite	(value=nil){...}
RakeFileUtils#verbose	(value=nil){...}
RakeFileUtils#when_writing	(msg=nil){...}
RakeFileUtils.nowrite_flag	->bool
RakeFileUtils.nowrite_flag=	(flag)
RakeFileUtils.verbose_flag	->bool
RakeFileUtils.verbose_flag=	(flag)
Range#==	(other)->bool
Range#===	(obj)->bool
Range#begin	->object
Range#cover?	(obj)->bool
Range#each	{|item|...}->self	->Enumerator
Range#end	->object
Range#eql?	(other)->bool
Range#equal?	(other)->bool
Range#exclude_end?	->bool
Range#first	->object
Range#hash	->Integer
Range#include?	(obj)->bool
Range#last	->object
Range#member?	(obj)->bool
Range#step	(s=1){|item|...}->self	(s=1)->Enumerator
Range#to_json	(*args)->String
Range.json_create	(hash)->Range
Range.new	(first,last,exclude_end=false)->Range
Rational#%	(other)->Rational|Float
Rational#*	(other)->Rational|Float
Rational#**	(other)->Rational|Float	(rhs)->Numeric
Rational#+	(other)->Rational|Float
Rational#-	(other)->Rational|Float
Rational#/	(other)->Rational|Float
Rational#<=>	(other)->-1|0|1
Rational#==	(other)->bool
Rational#abs	->Rational
Rational#ceil	->Integer
Rational#coerce	(other)->Array
Rational#convert	(*arg)->Rational
Rational#denominator	->Integer
Rational#div	(other)->Integer
Rational#divmod	(other)->[Integer,Float|Rational]
Rational#fdiv	(other)->Float
Rational#floor	->Integer
Rational#hash	->Integer
Rational#inspect	->String
Rational#marshal_dump	->Array
Rational#marshal_load	->Rational
Rational#modulo	(other)->Rational|Float
Rational#numerator	->Integer
Rational#power2	
Rational#quo	(other)->Rational|Float
Rational#remainder	(other)->Rational
Rational#round	->Integer
Rational#to_d	(nFig=0)->BigDecimal
Rational#to_f	->Float
Rational#to_i	->Integer
Rational#to_r	->Rational
Rational#to_s	->String
Rational#truncate	->Integer
RbConfig.expand	(val)
Readline.basic_quote_characters	->String
Readline.basic_quote_characters=	(string)
Readline.basic_word_break_characters	->String
Readline.basic_word_break_characters=	(string)
Readline.completer_quote_characters	->String
Readline.completer_quote_characters=	(string)
Readline.completer_word_break_characters	->String
Readline.completer_word_break_characters=	(string)
Readline.completion_append_character	->String
Readline.completion_append_character=	(string)
Readline.completion_case_fold	->bool
Readline.completion_case_fold=	(bool)
Readline.completion_proc	->Proc
Readline.completion_proc=	(proc)
Readline.emacs_editing_mode	
Readline.filename_quote_characters	->String
Readline.filename_quote_characters=	(string)
Readline.input=	(input)
Readline.output=	(output)
Readline.readline	(prompt="",add_hist=false)->String|nil
Readline.vi_editing_mode	
Readline::HISTORY.<<	(string)->self
Readline::HISTORY.[]	(index)->String
Readline::HISTORY.[]=	(index,string)
Readline::HISTORY.delete_at	(index)->String|nil
Readline::HISTORY.each	->Enumerator	{|string|...}
Readline::HISTORY.empty?	->bool
Readline::HISTORY.length	->Integer
Readline::HISTORY.pop	->String
Readline::HISTORY.push	(*string)->self
Readline::HISTORY.shift	->String
Readline::HISTORY.to_s	->"HISTORY"
Regexp#==	(other)->bool
Regexp#===	(string)->bool
Regexp#=~	(string)->Fixnum|nil
Regexp#casefold?	->bool
Regexp#encoding	->Encoding
Regexp#eql?	(other)->bool
Regexp#fixed_encoding?	->bool
Regexp#hash	->Fixnum
Regexp#inspect	->String
Regexp#match	(str,pos=0)->MatchData|nil
Regexp#options	->Integer
Regexp#source	->String
Regexp#to_json	(*args)->String
Regexp#to_s	->String
Regexp#~	->Fixnum|nil
Regexp.compile	(string,option=nil,code=nil)->Regexp
Regexp.escape	(string)->String
Regexp.json_create	(hash)->Regexp
Regexp.last_match	->MatchData	(nth)->String|nil
Regexp.new	(string,option=nil,code=nil)->Regexp
Regexp.quote	(string)->String
Regexp.try_convert	(obj)->re|nil
Regexp.union	(*pattern)->Regexp
RemoteTkIp#__eval	(str)
RemoteTkIp#__invoke	(*args)
RemoteTkIp#_conv_listelement	(str)
RemoteTkIp#_create_console	
RemoteTkIp#_eval	(str)
RemoteTkIp#_eval_with_enc	(str)
RemoteTkIp#_eval_without_enc	(str)
RemoteTkIp#_fromUTF8	(str,encoding=nil)
RemoteTkIp#_get_global_var	(var_name)
RemoteTkIp#_get_global_var2	(var_name,index_name)
RemoteTkIp#_get_variable	(var_name,flag)
RemoteTkIp#_get_variable2	(var_name,index_name,flag)
RemoteTkIp#_invoke	(*args)
RemoteTkIp#_invoke_with_enc	(*args)
RemoteTkIp#_invoke_without_enc	(*args)
RemoteTkIp#_ip_id_	
RemoteTkIp#_is_master_of?	(tcltkip_obj)
RemoteTkIp#_merge_tklist	(*args)
RemoteTkIp#_return_value	
RemoteTkIp#_set_global_var	(var_name,value)
RemoteTkIp#_set_global_var2	(var_name,index_name,value)
RemoteTkIp#_set_variable	(var_name,value,flag)
RemoteTkIp#_set_variable2	(var_name,index_name,value,flag)
RemoteTkIp#_split_tklist	(str)
RemoteTkIp#_thread_tkwait	(mode,target)
RemoteTkIp#_thread_vwait	(var_name)
RemoteTkIp#_toUTF8	(str,encoding=nil)
RemoteTkIp#_unset_global_var	(var_name)
RemoteTkIp#_unset_global_var2	(var_name,index_name)
RemoteTkIp#_unset_variable	(var_name,flag)
RemoteTkIp#_unset_variable2	(var_name,index_name,flag)
RemoteTkIp#allow_ruby_exit=	(mode)
RemoteTkIp#allow_ruby_exit?	
RemoteTkIp#appsend	(async,*args)
RemoteTkIp#create_slave	(name,safe=false)
RemoteTkIp#delete	
RemoteTkIp#deleted?	
RemoteTkIp#do_one_evant	(flag=nil)
RemoteTkIp#get_eventloop_tick	
RemoteTkIp#get_eventloop_weight	
RemoteTkIp#get_no_event_wait	
RemoteTkIp#has_mainwindow?	
RemoteTkIp#invalid_namespace?	
RemoteTkIp#is_rubytk?	
RemoteTkIp#mainloop	
RemoteTkIp#mainloop_abort_on_exception	
RemoteTkIp#mainloop_abort_on_exception=	(mode)
RemoteTkIp#mainloop_watchdog	
RemoteTkIp#make_safe	
RemoteTkIp#manipulable?	
RemoteTkIp#rb_appsend	(async,*args)
RemoteTkIp#ready?	(timeout=5)
RemoteTkIp#restart	
RemoteTkIp#safe?	
RemoteTkIp#safe_base?	
RemoteTkIp#set_eventloop_tick	(*args)
RemoteTkIp#set_eventloop_weight	(*args)
RemoteTkIp#set_no_event_wait	(*args)
RemoteTkIp.do_one_evant	(flag=nil)
RemoteTkIp.get_eventloop_tick	
RemoteTkIp.get_eventloop_weight	
RemoteTkIp.get_no_event_wait	
RemoteTkIp.mainloop	(*args)
RemoteTkIp.mainloop_abort_on_exception	
RemoteTkIp.mainloop_abort_on_exception=	(mode)
RemoteTkIp.mainloop_watchdog	(*args)
RemoteTkIp.manipulable?	
RemoteTkIp.new	(*args,&block)
RemoteTkIp.set_eventloop_tick	(*args)
RemoteTkIp.set_eventloop_weight	(*args)
RemoteTkIp.set_no_event_wait	(*args)
Resolv#each_address	(name){|name|...}
Resolv#each_name	(address){|name|...}
Resolv#getaddress	(name)->String
Resolv#getaddresses	(name)->[String]
Resolv#getname	(address)->String
Resolv#getnames	(address)->[String]
Resolv.each_address	(name){|address|...}
Resolv.each_name	(address){|name|...}
Resolv.getaddress	(name)->String
Resolv.getaddresses	(name)->[String]
Resolv.getname	(address)->String
Resolv.getnames	(address)->[String]
Resolv.new	(resolvers=[Hosts.new,DNS.new])->Resolv
Resolv::DNS#close	
Resolv::DNS#each_address	(name){|name|...}
Resolv::DNS#each_name	(address){|name|...}
Resolv::DNS#each_resource	(name,typeclass){|resource|...}
Resolv::DNS#getaddress	(name)->Resolv::IPv4|Resolv::IPv6
Resolv::DNS#getaddresses	(name)->[Resolv::IPv4|Resolv::IPv6]
Resolv::DNS#getname	(address)->Resolv::DNS::Name
Resolv::DNS#getnames	(address)->[Resolv::DNS::Name]
Resolv::DNS#getresource	(name,typeclass)->Resolv::DNS::Resource
Resolv::DNS#getresources	(name,typeclass)->[Resolv::DNS::Resource]
Resolv::DNS.new	(resolv_conf=nil)->Resolv::DNS
Resolv::DNS.open	(*args)->Resolv::DNS	(*args){|dns|...}->object
Resolv::DNS::Name#absolute?	->bool
Resolv::DNS::Name#subdomain_of?	(other)->bool
Resolv::DNS::Name#to_s	->String
Resolv::DNS::Name.create	(name)->Resolv::DNS::Name
Resolv::DNS::Name.new	(labels,absolute=true)->Resolv::DNS::Name
Resolv::DNS::Resource::DomainName#name	->Resolv::DNS::Name
Resolv::DNS::Resource::HINFO#cpu	->String
Resolv::DNS::Resource::HINFO#os	->String
Resolv::DNS::Resource::HINFO.new	(cpu,os)->Resolv::DNS::Resource::HINFO
Resolv::DNS::Resource::IN::A#address	->Resolv::IPv4
Resolv::DNS::Resource::IN::A.new	(address)->Resolv::DNS::Resource::IN::A
Resolv::DNS::Resource::IN::AAAA#address	->Resolv::IPv6
Resolv::DNS::Resource::IN::AAAA.new	(address)->Resolv::DNS::Resource::IN::AAAA
Resolv::DNS::Resource::IN::SRV#port	->Integer
Resolv::DNS::Resource::IN::SRV#priority	->Integer
Resolv::DNS::Resource::IN::SRV#target	->Resolv::DNS::Name
Resolv::DNS::Resource::IN::SRV#weight	->Integer
Resolv::DNS::Resource::IN::SRV.new	(priority,weight,port,target)->Resolv::DNS::Resource::IN::SRV
Resolv::DNS::Resource::IN::WKS#address	->Resolv::IPv4
Resolv::DNS::Resource::IN::WKS#bitmap	->String
Resolv::DNS::Resource::IN::WKS#protocol	->Integer
Resolv::DNS::Resource::IN::WKS.new	(address,protocol,bitmap)->Resolv::DNS::Resource::IN::WKS
Resolv::DNS::Resource::MINFO#emailbx	->String
Resolv::DNS::Resource::MINFO#rmailbx	->String
Resolv::DNS::Resource::MINFO.new	(rmailbx,emailbx)->Resolv::DNS::Resource::MINFO
Resolv::DNS::Resource::MX#exchange	->Resolv::DNS::Name
Resolv::DNS::Resource::MX#preference	->Integer
Resolv::DNS::Resource::MX.new	(preference,exchange)->Resolv::DNS::Resource::MX
Resolv::DNS::Resource::SOA#expire	->Integer
Resolv::DNS::Resource::SOA#minimum	->Integer
Resolv::DNS::Resource::SOA#mname	->Resolv::DNS::Name
Resolv::DNS::Resource::SOA#refresh	->Integer
Resolv::DNS::Resource::SOA#retry	->Integer
Resolv::DNS::Resource::SOA#rname	->Resolv::DNS::Name
Resolv::DNS::Resource::SOA#serial	->Integer
Resolv::DNS::Resource::SOA.new	(mname,rname,serial,refresh,retry_,expire,minimum)
Resolv::DNS::Resource::TXT#data	->String
Resolv::DNS::Resource::TXT#strings	->[String]
Resolv::DNS::Resource::TXT.new	(first_string,*rest_strings)->Resolv::DNS::Resource::TXT
Resolv::Hosts#each_address	(name){|name|...}
Resolv::Hosts#each_name	(address){|name|...}
Resolv::Hosts#getaddress	(name)->String
Resolv::Hosts#getaddresses	(name)->[String]
Resolv::Hosts#getname	(address)->String
Resolv::Hosts#getnames	(address)->[String]
Resolv::Hosts.new	(hosts=DefaultFileName)->Resolv::Hosts
Resolv::IPv4#address	->String
Resolv::IPv4#to_name	->Resolv::DNS::Name
Resolv::IPv4#to_s	->String
Resolv::IPv4.create	(address)->Resolv::IPv4
Resolv::IPv4.new	(address)->Resolv::IPv4
Resolv::IPv6#address	->String
Resolv::IPv6#to_name	->Resolv::DNS::Name
Resolv::IPv6#to_s	->String
Resolv::IPv6.create	(address)
Resolv::IPv6.new	(address)
Rinda::DRbObjectTemplate#===	(ro)
Rinda::DRbObjectTemplate.new	(uri=nil,ref=nil)
Rinda::SimpleRenewer#renew	
Rinda::SimpleRenewer.new	(sec=180)
Rinda::Template#===	(tuple)
Rinda::Template#match	(tuple)
Rinda::Tuple#[]	(key)
Rinda::Tuple#each	{|key,value|...}
Rinda::Tuple#fetch	(key)
Rinda::Tuple#size	
Rinda::Tuple#value	
Rinda::Tuple.new	(ah)
Rinda::TupleEntry#[]	(key)
Rinda::TupleEntry#alive?	
Rinda::TupleEntry#cancel	
Rinda::TupleEntry#canceled?	
Rinda::TupleEntry#expired?	
Rinda::TupleEntry#expires	
Rinda::TupleEntry#expires=	(expires)
Rinda::TupleEntry#fetch	(key)
Rinda::TupleEntry#make_expires	(sec=nil)
Rinda::TupleEntry#make_tuple	(ary)
Rinda::TupleEntry#renew	(sec_or_renewer)
Rinda::TupleEntry#size	
Rinda::TupleEntry#value	
Rinda::TupleEntry.new	(ary,sec=nil)
Rinda::TupleSpace#move	(port,tuple,sec=nil)
Rinda::TupleSpace#notify	(event,tuple,sec=nil)
Rinda::TupleSpace#read	(tuple,sec=nil)
Rinda::TupleSpace#read_all	(tuple)
Rinda::TupleSpace#take	(tuple,sec=nil)	(tuple,sec=nil){|template|...}
Rinda::TupleSpace#write	(tuple,sec=nil)
Rinda::TupleSpace.new	(period=60)
Rinda::TupleSpaceProxy#notify	(ev,tuple,sec=nil)
Rinda::TupleSpaceProxy#read	(tuple,sec=nil){|template|...}
Rinda::TupleSpaceProxy#read_all	(tuple)
Rinda::TupleSpaceProxy#take	(tuple,sec=nil){|template|...}
Rinda::TupleSpaceProxy#write	(tuple,sec=nil)
Rinda::TupleSpaceProxy.new	(ts)
Ripper#column	
Ripper#compile_error	(msg)
Ripper#end_seen?	
Ripper#lineno	
Ripper#parse	
Ripper#warn	(fmt,*args)
Ripper#warning	(fmt,*args)
Ripper.lex	
Ripper.new	(src,filename="(ripper)",lineno=1)
Ripper.parse	(src,filename='(ripper)',lineno=1)
Ripper.sexp	
Ripper.sexp_raw	
Ripper.slice	
Ripper.token_match	
Ripper.tokenize	
Ripper.yydebug	
Ripper.yydebug=	
Ripper::Filter#column	
Ripper::Filter#filename	
Ripper::Filter#lineno	
Ripper::Filter#on_default	(event,token,data)
Ripper::Filter#parse	(init=nil)
Ripper::Filter.new	(src,filename='-',lineno=1)
Ripper::Lexer#lex	
Ripper::Lexer#parse	
Ripper::Lexer#tokenize	
SDBM#[]	(key)->String
SDBM#[]=	(key,value)
SDBM#clear	->self
SDBM#close	
SDBM#closed?	->bool
SDBM#delete	(key)->String
SDBM#delete_if	{|key,value|...}->self
SDBM#each	{|key,value|...}->self
SDBM#each_key	{|key|...}->self
SDBM#each_pair	{|key,value|...}->self
SDBM#each_value	{|value|...}->self
SDBM#empty?	->bool
SDBM#fetch	(key,ifnone=nil){|key|...}->object
SDBM#has_key?	(key)->bool
SDBM#has_value?	(value)->bool
SDBM#include?	(key)->bool
SDBM#index	(val)->String
SDBM#invert	->Hash
SDBM#key	(value)->String
SDBM#key?	(key)->bool
SDBM#keys	->[String]
SDBM#length	->Integer
SDBM#member?	(key)->bool
SDBM#reject	{|key,value|...}->Hash
SDBM#reject!	{|key,value|...}->self
SDBM#replace	(other)->self
SDBM#select	{|key,value|...}->[[String]]
SDBM#shift	->[String]
SDBM#size	->Integer
SDBM#store	(key,val)->[String]
SDBM#to_a	->[[String]]
SDBM#to_hash	->Hash
SDBM#update	(other)->self
SDBM#value?	(value)->bool
SDBM#values	->[String]
SDBM#values_at	(*keys)->[String]
SDBM.new	(dbname,mode=0666)->SDBM
SDBM.open	(dbname,mode=0666)->SDBM	(dbname,mode=0666){|db|...}->object
SOCKSSocket#close	
SOCKSSocket.new	(host,service)->SOCKSSocket	(host,serv)->SOCKSSocket
SOCKSSocket.open	(host,service)->SOCKSSocket
Scanf::FormatSpecifier#conversion	
Scanf::FormatSpecifier#count_space?	
Scanf::FormatSpecifier#letter	
Scanf::FormatSpecifier#match	(str)
Scanf::FormatSpecifier#matched	
Scanf::FormatSpecifier#matched_string	
Scanf::FormatSpecifier#mid_match?	
Scanf::FormatSpecifier#re_string	
Scanf::FormatSpecifier#to_re	
Scanf::FormatSpecifier#to_s	
Scanf::FormatSpecifier#width	
Scanf::FormatString#last_match_tried	
Scanf::FormatString#last_spec	
Scanf::FormatString#last_spec_tried	
Scanf::FormatString#match	(str)
Scanf::FormatString#matched_count	
Scanf::FormatString#prune	(n=matched_count)
Scanf::FormatString#space	
Scanf::FormatString#spec_count	
Scanf::FormatString#string_left	
Scanf::FormatString#to_s	
Scanf::FormatString.new	(str)
SecureRandom.base64	(n=nil)->String
SecureRandom.hex	(n=nil)->String
SecureRandom.random_bytes	(n=nil)->String
SecureRandom.random_number	(n=0)->Integer|Float
SecureRandom.urlsafe_base64	(n=nil)->String
Set#&	(enum)->Set
Set#+	(enum)->Set
Set#-	(enum)->Set
Set#<<	(o)->self
Set#==	(set)->bool
Set#^	(enum)->Set
Set#add	(o)->self	?(o)->self|nil
Set#add?	(o)->self|nil
Set#classify	{|o|...}->Hash
Set#clear	->self
Set#clone	->Set
Set#collect!	{|o|...}->self
Set#delete	(o)->self	?(o)->self|nil
Set#delete?	(o)->self|nil
Set#delete_if	{|o|...}->self
Set#difference	(enum)->Set
Set#divide	{|o|...}->Set	{|o1,o2|...}->Set
Set#dup	->Set
Set#each	{|o|...}->self
Set#empty?	->bool
Set#flatten	->Set	!->self|nil
Set#flatten!	->self|nil
Set#include?	(o)->bool
Set#inspect	->String
Set#intersection	(enum)->Set
Set#length	->Integer
Set#map!	{|o|...}->self
Set#member?	(o)->bool
Set#merge	(enum)->self
Set#proper_subset?	(set)->bool
Set#proper_superset?	(set)->bool
Set#reject!	{|o|...}->self|nil
Set#replace	(enum)->self
Set#size	->Integer
Set#subset?	(set)->bool
Set#subtract	(enum)->self
Set#superset?	(set)->bool
Set#to_a	->Array
Set#union	(enum)->Set
Set#|	(enum)->Set
Set.[]	(*ary)->Set
Set.new	(enum=nil)->Set	(enum=nil){|o|...}->Set
Shell#[]	(command,file1,file2=nil)->bool|Time|Integer|nil
Shell#append	(to,filter)->Shell::AppendFile|Shell::AppendIO
Shell#atime	(filename)->Time
Shell#basename	(filename,suffix="")->String
Shell#blockdev?	(file)->bool
Shell#cat	(*files)->Shell::Filter
Shell#cd	(path,&block)->self
Shell#chardev?	(file)->bool
Shell#chdir	(path,&block)->self
Shell#check_point	
Shell#chmod	(mode,*filename)->Integer
Shell#chown	(owner,group,*filename)->Integer
Shell#command_processor	->Shell::CommandProcessor
Shell#concat	(*jobs)->Shell::Concat
Shell#ctime	(filename)->Time
Shell#cwd	->String
Shell#debug	->bool|Integer	?->bool|Integer
Shell#debug=	(flag)
Shell#debug?	->bool|Integer
Shell#delete	(*filename)->Integer
Shell#dir	->String
Shell#dir_stack	->[String]
Shell#directory?	(file)->bool
Shell#dirname	(filename)->String
Shell#dirs	->[String]
Shell#echo	(*strings)->Shell::Filter
Shell#executable?	(file)->bool
Shell#executable_real?	(file)->bool
Shell#exist?	(file)->bool
Shell#exists?	(file)->bool
Shell#expand_path	(path)->String
Shell#file?	(file)->bool
Shell#find_system_command	(command)
Shell#finish_all_jobs	
Shell#foreach	(path=nil,&block)
Shell#ftype	(filename)->String
Shell#getwd	->String
Shell#glob	(patten)->Shell::Filter
Shell#grpowned?	(file)->bool
Shell#identical?	
Shell#jobs	->Array
Shell#join	(*item)->String
Shell#kill	(signal,job)->Integer
Shell#link	(old,new)->0
Shell#lstat	(filename)->File::Stat
Shell#mkdir	(*path)->Array
Shell#mtime	(filename)->Time
Shell#notify	(*opts){...}
Shell#open	(path,mode)->File|Dir
Shell#out	(dev=STDOUT,&block)
Shell#owned?	(file)->bool
Shell#pipe?	(file)->bool
Shell#popd	
Shell#popdir	
Shell#process_controller	->Shell::ProcessController
Shell#pushd	(path=nil,&block)->object
Shell#pushdir	(path=nil,&block)->object
Shell#pwd	->String
Shell#readable?	(file)->bool
Shell#readable_real?	(file)->bool
Shell#readlink	(path)->String
Shell#record_separator	->String
Shell#record_separator=	(rs)
Shell#rehash	->{}
Shell#rename	(from,to)->0
Shell#rm	(*filename)->Integer
Shell#rmdir	(*path)
Shell#setgid?	(file)->bool
Shell#setuid?	(file)->bool
Shell#size	(file)->Integer	?(file)->Integer|nil
Shell#size?	(file)->Integer|nil
Shell#socket?	(file)->bool
Shell#split	(pathname)->[String]
Shell#stat	(filename)->File::Stat
Shell#sticky?	(file)->bool
Shell#symlink	(old,new)->0
Shell#symlink?	(file)->bool
Shell#system	(command,*opts)->Shell::SystemCommand
Shell#system_path	->Array
Shell#system_path=	(path)
Shell#tee	(file)->Shell::Filter
Shell#test	(command,file1,file2=nil)->bool|Time|Integer|nil
Shell#transact	{...}->object
Shell#truncate	(path,length)->0
Shell#umask	->object
Shell#umask=	(umask)
Shell#unlink	(path)->self
Shell#utime	(atime,mtime,*filename)->Integer
Shell#verbose	->bool	?->bool
Shell#verbose=	(flag)
Shell#verbose?	->bool
Shell#world_readable?	
Shell#world_writable?	
Shell#writable?	(file)->bool
Shell#writable_real?	(file)->bool
Shell#zero?	(file)->bool
Shell.alias_command	(alias,command,*opts){...}->self
Shell.cascade	->bool
Shell.cascade=	(flag)
Shell.cd	(path=nil,verbose=self.verbose)->self
Shell.debug	->bool|Integer	?->bool|Integer
Shell.debug=	(val)
Shell.debug?	->bool|Integer
Shell.debug_output_exclusive_unlock	{...}->Mutex|nil
Shell.debug_output_lock	->Mutex
Shell.debug_output_locked?	->bool
Shell.debug_output_synchronize	
Shell.debug_output_try_lock	->bool
Shell.debug_output_unlock	->Mutex|nil
Shell.def_system_command	(command,path=command)
Shell.default_record_separator	->String
Shell.default_record_separator=	(rs)
Shell.default_system_path	->Array
Shell.default_system_path=	(path)
Shell.install_system_commands	(pre="sys_")
Shell.new	(pwd=Dir.pwd,umask=nil)->Shell
Shell.notify	(*opts){|message|...}->String
Shell.unalias_command	(alias)
Shell.undef_system_command	(command)->Shell::CommandProcessor
Shell.verbose	->bool	?->bool
Shell.verbose=	(flag)
Shell.verbose?	->bool
Shell::AppendFile#input=	(filter)
Shell::AppendFile.new	(sh,filename)
Shell::AppendIO#input=	(filter)
Shell::AppendIO.new	(sh,filename)
Shell::BuiltInCommand#active?	->true
Shell::BuiltInCommand#wait?	->false
Shell::Cat#each	(rs=nil){|line|...}
Shell::Cat.new	(sh,*filenames)
Shell::CommandProcessor#[]	(command,file1,file2=nil)->bool|Time|Integer|nil
Shell::CommandProcessor#append	(to,filter)->Shell::AppendFile|Shell::AppendIO
Shell::CommandProcessor#atime	(filename)->Time
Shell::CommandProcessor#basename	(filename,suffix="")->String
Shell::CommandProcessor#blockdev?	(file)->bool
Shell::CommandProcessor#cat	(*files)->Shell::Filter
Shell::CommandProcessor#chardev?	(file)->bool
Shell::CommandProcessor#check_point	
Shell::CommandProcessor#chmod	(mode,*filename)->Integer
Shell::CommandProcessor#chown	(owner,group,*filename)->Integer
Shell::CommandProcessor#concat	(*jobs)->Shell::Concat
Shell::CommandProcessor#ctime	(filename)->Time
Shell::CommandProcessor#delete	(*filename)->Integer
Shell::CommandProcessor#directory?	(file)->bool
Shell::CommandProcessor#dirname	(filename)->String
Shell::CommandProcessor#echo	(*strings)->Shell::Filter
Shell::CommandProcessor#executable?	(file)->bool
Shell::CommandProcessor#executable_real?	(file)->bool
Shell::CommandProcessor#exist?	(file)->bool
Shell::CommandProcessor#exists?	(file)->bool
Shell::CommandProcessor#expand_path	(path)->String
Shell::CommandProcessor#file?	(file)->bool
Shell::CommandProcessor#find_system_command	(command)
Shell::CommandProcessor#finish_all_jobs	
Shell::CommandProcessor#foreach	(path=nil,&block)
Shell::CommandProcessor#ftype	(filename)->String
Shell::CommandProcessor#glob	(patten)->Shell::Filter
Shell::CommandProcessor#grpowned?	(file)->bool
Shell::CommandProcessor#identical?	
Shell::CommandProcessor#join	(*item)->String
Shell::CommandProcessor#link	(old,new)->0
Shell::CommandProcessor#lstat	(filename)->File::Stat
Shell::CommandProcessor#mkdir	(*path)->Array
Shell::CommandProcessor#mtime	(filename)->Time
Shell::CommandProcessor#notify	(*opts){...}
Shell::CommandProcessor#open	(path,mode)->File|Dir
Shell::CommandProcessor#out	(dev=STDOUT,&block)
Shell::CommandProcessor#owned?	(file)->bool
Shell::CommandProcessor#pipe?	(file)->bool
Shell::CommandProcessor#readable?	(file)->bool
Shell::CommandProcessor#readable_real?	(file)->bool
Shell::CommandProcessor#readlink	(path)->String
Shell::CommandProcessor#rehash	->{}
Shell::CommandProcessor#rename	(from,to)->0
Shell::CommandProcessor#rm	(*filename)->Integer
Shell::CommandProcessor#rmdir	(*path)
Shell::CommandProcessor#setgid?	(file)->bool
Shell::CommandProcessor#setuid?	(file)->bool
Shell::CommandProcessor#size	(file)->Integer	?(file)->Integer|nil
Shell::CommandProcessor#size?	(file)->Integer|nil
Shell::CommandProcessor#socket?	(file)->bool
Shell::CommandProcessor#split	(pathname)->[String]
Shell::CommandProcessor#stat	(filename)->File::Stat
Shell::CommandProcessor#sticky?	(file)->bool
Shell::CommandProcessor#symlink	(old,new)->0
Shell::CommandProcessor#symlink?	(file)->bool
Shell::CommandProcessor#system	(command,*opts)->Shell::SystemCommand
Shell::CommandProcessor#tee	(file)->Shell::Filter
Shell::CommandProcessor#test	(command,file1,file2=nil)->bool|Time|Integer|nil
Shell::CommandProcessor#transact	{...}->object
Shell::CommandProcessor#truncate	(path,length)->0
Shell::CommandProcessor#unlink	(path)->self
Shell::CommandProcessor#utime	(atime,mtime,*filename)->Integer
Shell::CommandProcessor#world_readable?	
Shell::CommandProcessor#world_writable?	
Shell::CommandProcessor#writable?	(file)->bool
Shell::CommandProcessor#writable_real?	(file)->bool
Shell::CommandProcessor#zero?	(file)->bool
Shell::CommandProcessor.add_delegate_command_to_shell	(id)
Shell::CommandProcessor.alias_command	(alias,command,*opts)->self	(alias,command,*opts){...}->self
Shell::CommandProcessor.alias_map	->Hash
Shell::CommandProcessor.def_builtin_commands	(delegation_class,commands_specs)
Shell::CommandProcessor.def_system_command	(command,path=command)
Shell::CommandProcessor.initialize	
Shell::CommandProcessor.install_builtin_commands	
Shell::CommandProcessor.install_system_commands	(prefix="sys_")
Shell::CommandProcessor.method_added	(id)
Shell::CommandProcessor.new	(shell)
Shell::CommandProcessor.run_config	
Shell::CommandProcessor.unalias_command	(alias)->self
Shell::CommandProcessor.undef_system_command	(command)->self
Shell::Concat#each	(rs=nil){|job|...}
Shell::Concat.new	(sh,*jobs)
Shell::Echo#each	(rs=nil){|str|...}
Shell::Echo.new	(sh,*strings)
Shell::Filter#+	(filter)
Shell::Filter#<	(src)->self
Shell::Filter#>	(to)->self
Shell::Filter#>>	(to)->self
Shell::Filter#[]	(command,file1,file2=nil)->bool|Time|Integer|nil
Shell::Filter#append	(to,filter)->Shell::AppendFile|Shell::AppendIO
Shell::Filter#atime	(filename)->Time
Shell::Filter#basename	(filename,suffix="")->String
Shell::Filter#blockdev?	(file)->bool
Shell::Filter#cat	(*files)->Shell::Filter
Shell::Filter#chardev?	(file)->bool
Shell::Filter#check_point	
Shell::Filter#chmod	(mode,*filename)->Integer
Shell::Filter#chown	(owner,group,*filename)->Integer
Shell::Filter#concat	(*jobs)->Shell::Concat
Shell::Filter#ctime	(filename)->Time
Shell::Filter#delete	(*filename)->Integer
Shell::Filter#directory?	(file)->bool
Shell::Filter#dirname	(filename)->String
Shell::Filter#each	(rs=nil)
Shell::Filter#echo	(*strings)->Shell::Filter
Shell::Filter#executable?	(file)->bool
Shell::Filter#executable_real?	(file)->bool
Shell::Filter#exist?	(file)->bool
Shell::Filter#exists?	(file)->bool
Shell::Filter#file?	(file)->bool
Shell::Filter#find_system_command	(command)
Shell::Filter#finish_all_jobs	
Shell::Filter#foreach	(path=nil,&block)
Shell::Filter#ftype	(filename)->String
Shell::Filter#glob	(patten)->Shell::Filter
Shell::Filter#grpowned?	(file)->bool
Shell::Filter#identical?	
Shell::Filter#input	->Shell::Filter|nil
Shell::Filter#input=	(filter)
Shell::Filter#inspect	->String
Shell::Filter#join	(*item)->String
Shell::Filter#link	(old,new)->0
Shell::Filter#lstat	(filename)->File::Stat
Shell::Filter#mkdir	(*path)->Array
Shell::Filter#mtime	(filename)->Time
Shell::Filter#notify	(*opts){...}
Shell::Filter#open	(path,mode)->File|Dir
Shell::Filter#out	(dev=STDOUT,&block)
Shell::Filter#owned?	(file)->bool
Shell::Filter#pipe?	(file)->bool
Shell::Filter#readable?	(file)->bool
Shell::Filter#readable_real?	(file)->bool
Shell::Filter#readlink	(path)->String
Shell::Filter#rehash	->{}
Shell::Filter#rename	(from,to)->0
Shell::Filter#rm	(*filename)->Integer
Shell::Filter#rmdir	(*path)
Shell::Filter#setgid?	(file)->bool
Shell::Filter#setuid?	(file)->bool
Shell::Filter#size	(file)->Integer	?(file)->Integer|nil
Shell::Filter#size?	(file)->Integer|nil
Shell::Filter#socket?	(file)->bool
Shell::Filter#split	(pathname)->[String]
Shell::Filter#stat	(filename)->File::Stat
Shell::Filter#sticky?	(file)->bool
Shell::Filter#symlink	(old,new)->0
Shell::Filter#symlink?	(file)->bool
Shell::Filter#system	(command,*opts)->Shell::SystemCommand
Shell::Filter#tee	(file)->Shell::Filter
Shell::Filter#test	(command,file1,file2=nil)->bool|Time|Integer|nil
Shell::Filter#to_a	->[String]
Shell::Filter#to_s	->String
Shell::Filter#transact	{...}->object
Shell::Filter#truncate	(path,length)->0
Shell::Filter#unlink	(path)->self
Shell::Filter#utime	(atime,mtime,*filename)->Integer
Shell::Filter#world_readable?	
Shell::Filter#world_writable?	
Shell::Filter#writable?	(file)->bool
Shell::Filter#writable_real?	(file)->bool
Shell::Filter#zero?	(file)->bool
Shell::Filter#|	(filter)->object
Shell::Filter.new	(sh)->Shell::Filter
Shell::Glob#each	(rs=nil){|file|...}
Shell::Glob.new	(sh,pattern)
Shell::ProcessController#active_job?	(job)->bool
Shell::ProcessController#active_jobs	->Array
Shell::ProcessController#active_jobs_exist?	->bool
Shell::ProcessController#add_schedule	(command)
Shell::ProcessController#jobs	->Array
Shell::ProcessController#jobs_exist?	->bool
Shell::ProcessController#kill_job	(signal,command)->Integer
Shell::ProcessController#sfork	(command){...}->[Integer,IO,IO]
Shell::ProcessController#shell	->Shell
Shell::ProcessController#start_job	(command=nil)
Shell::ProcessController#terminate_job	(command)
Shell::ProcessController#wait_all_jobs_execution	
Shell::ProcessController#waiting_job?	(job)->bool
Shell::ProcessController#waiting_jobs	->Array
Shell::ProcessController#waiting_jobs_exist?	->bool
Shell::ProcessController.activate	(pc)
Shell::ProcessController.active_process_controllers	
Shell::ProcessController.block_output_synchronize	{...}
Shell::ProcessController.each_active_object	{|ref|...}
Shell::ProcessController.inactivate	(pc)
Shell::ProcessController.new	(shell)
Shell::ProcessController.process_controllers_exclusive	
Shell::ProcessController.wait_to_finish_all_process_controllers	
Shell::SystemCommand#active?	->bool
Shell::SystemCommand#command	->String
Shell::SystemCommand#each	(rs=nil){|line|...}
Shell::SystemCommand#flush	
Shell::SystemCommand#input=	(inp)
Shell::SystemCommand#kill	(signal)->Integer
Shell::SystemCommand#name	->String
Shell::SystemCommand#notify	(*opts)->String	(*opts){|message|...}->String
Shell::SystemCommand#start	
Shell::SystemCommand#start_export	
Shell::SystemCommand#start_import	
Shell::SystemCommand#super_each	
Shell::SystemCommand#terminate	
Shell::SystemCommand#wait?	->bool
Shell::SystemCommand.new	(sh,command,*opts)
Shell::Tee#each	(rs=nil){|line|...}
Shell::Tee.new	(sh,filename)
Shell::Void#each	(rs=nil){...}
Shell::Void.new	(sh,*opts)
Shellwords.escape	(str)->String
Shellwords.join	(array)->String
Shellwords.shellescape	(str)->String
Shellwords.shelljoin	(array)->String
Shellwords.shellsplit	(line)->[String]
Shellwords.shellwords	(line)->[String]
Shellwords.split	(line)->[String]
Signal.list	->Hash
Signal.trap	(signal,command)->String|Proc|nil	(signal){...}->String|Proc|nil
SimpleDelegator#__getobj__	->object
SimpleDelegator#__setobj__	(obj)->object
SimpleDelegator.new	(obj)->object
SingleForwardable#def_delegator	(accessor,method,ali=method)
SingleForwardable#def_delegators	(accessor,*methods)
SingleForwardable#def_singleton_delegator	(accessor,method,ali=method)
SingleForwardable#def_singleton_delegators	(accessor,*methods)
Singleton.instance	->object
SizedQueue#max	
SizedQueue#max=	(n)
SizedQueue#pop	
SizedQueue#push	(obj)
SizedQueue.new	(max)
Socket#accept	
Socket#accept_nonblock	
Socket#bind	(my_sockaddr)
Socket#connect	(server_sockaddr)
Socket#connect_nonblock	(server_sockaddr)
Socket#listen	(backlog)
Socket#recvfrom	(maxlen[,flags])
Socket#recvfrom_nonblock	(maxlen[,flags])
Socket#sysaccept	
Socket.getaddrinfo	(nodename,servname[,family[,socktype[,protocol[,flags]]]])->Array
Socket.gethostbyaddr	(host[,type])
Socket.gethostbyname	(host)
Socket.gethostname	
Socket.getnameinfo	(sa[,flags])
Socket.getservbyname	(service[,proto])
Socket.getservbyport	(port,protocol_name="tcp")->String
Socket.new	(domain,type,protocol)->Socket
Socket.open	(domain,type,protocol)->Socket
Socket.pack_sockaddr_in	(port,host)
Socket.pack_sockaddr_un	(path)
Socket.pair	(domain,type,protocol)
Socket.sockaddr_in	(port,host)
Socket.sockaddr_un	(path)
Socket.socketpair	(domain,type,protocol)
Socket.unpack_sockaddr_in	(sockaddr)
Socket.unpack_sockaddr_un	(sockaddr)
String#%	(args)->String
String#*	(times)->String
String#+	(other)->String
String#<<	(other)->self
String#<=>	(other)->Integer|nil
String#==	(other)->bool
String#=~	(other)->Integer
String#[]	(nth)->Integer	(nth,len)->String|nil	(substr)->String|nil	(regexp,nth=0)->String	(range)->String
String#[]=	(nth,val)	(nth,len,val)	(substr,val)	(regexp,nth,val)	(regexp,val)	(range,val)
String#ascii_only?	->bool
String#bytes	{|byte|...}->self	->Enumerator
String#bytesize	->Integer
String#capitalize	->String
String#capitalize!	->self|nil
String#casecmp	(other)->Integer|nil
String#center	(width,padding='')->String
String#chars	{|cstr|block}->self	->Enumerator
String#chomp	(rs=$/)->String
String#chomp!	(rs=$/)->self|nil
String#chop	->String
String#chop!	->self|nil
String#chr	->String
String#clear	
String#codepoints	{|codepoint|block}->self	->Enumerator
String#concat	(other)->self
String#count	(*chars)->Integer
String#crypt	(salt)->String
String#delete	(*strs)->String
String#delete!	(*strs)->self|nil
String#downcase	->String
String#downcase!	->self|nil
String#dump	->String
String#each_byte	{|byte|...}->self	->Enumerator
String#each_char	{|cstr|block}->self	->Enumerator
String#each_codepoint	{|codepoint|block}->self	->Enumerator
String#each_line	(rs=$/){|line|...}	(rs=$/)->Enumerator
String#empty?	->bool
String#encode	(encoding,options=nil)->String	(encoding,from_encoding,options=nil)->String	(options=nil)->String
String#encode!	(encoding,options=nil)->self	(encoding,from_encoding,options=nil)->self
String#encoding	->Encoding
String#end_with?	(str)->bool
String#eql?	(other)->bool
String#ext	(newext='')->String
String#force_encoding	(encoding)->self
String#gsub	(pattern,replace)->String	(pattern){|matched|....}->String	(pattern)->Enumerator	(pattern,hash)->String
String#gsub!	(pattern,replace)->self|nil	(pattern){|matched|....}->self|nil	(pattern)->Enumerator	(pattern,hash)->self|nil
String#hash	->Integer
String#hex	->Integer
String#include?	(substr)->bool
String#index	(pattern,pos=0)->Integer
String#insert	(pos,other)
String#inspect	->String
String#intern	->Symbol
String#is_binary_data?	
String#is_complex_yaml?	
String#iseuc	->bool
String#isjis	->bool
String#issjis	->bool
String#isutf8	->bool
String#kconv	(out_code,in_code=Kconv::AUTO)->String
String#length	->Integer
String#lines	(rs=$/){|line|...}	(rs=$/)->Enumerator
String#ljust	(width,padding='')->String
String#lstrip	->String
String#lstrip!	->self|nil
String#match	(regexp,pos=0)->MatchData
String#next	->String
String#next!	->String
String#oct	->Integer
String#ord	->Integer
String#partition	(sep)->[String,String,String]
String#pathmap	(spec=nil){...}
String#pathmap_explode	->Array
String#pathmap_partial	(n)->String
String#pathmap_replace	(patterns){...}->String
String#replace	(other)->String
String#reverse	->String
String#reverse!	
String#rindex	(pattern,pos=self.size)->Integer|nil
String#rjust	(width,padding='')->String
String#rpartition	(sep)->[String,String,String]
String#rstrip	->String
String#rstrip!	->self|nil
String#scan	(re)->[String]|[[String]]	(re){|s|...}
String#scanf	(format)->Array	(format){|*ary|...}->Array
String#shellescape	->String
String#shellsplit	->[String]
String#size	->Integer
String#slice	(nth)->Integer	(nth,len)->String|nil	(substr)->String|nil	(regexp,nth=0)->String	(range)->String
String#slice!	(nth)->Integer	(pos,len)->String	(substr)->String	(regexp,nth=0)->String	(first..last)->String	(first...last)->String	(regexp,nth=0)->String
String#split	(sep=$;,limit=0)->[String]|[[String]]
String#squeeze	(*chars)->String
String#squeeze!	(*chars)
String#start_with?	(str)->bool
String#strip	->String
String#strip!	->self|nil
String#sub	(pattern,replace)->String	(pattern){|matched|....}->String	(pattern,hash)->String
String#sub!	(pattern,replace)->self|nil	(pattern){|matched|....}->self|nil	(pattern,hash)->String
String#succ	->String
String#succ!	->String
String#sum	(bits=16)->Integer
String#swapcase	->String
String#swapcase!	->self|nil
String#to_d	->BigDecimal
String#to_f	->Float
String#to_i	(base=10)->Integer
String#to_r	->Rational
String#to_s	->String
String#to_str	->String
String#to_sym	->Symbol
String#toeuc	->String
String#tojis	->String
String#tolocale	->String
String#tosjis	->String
String#toutf16	->String
String#toutf32	->String
String#toutf8	->String
String#tr	(pattern,replace)->String
String#tr!	(pattern,replace)->self|nil
String#tr_s	(pattern,replace)->String
String#tr_s!	(pattern,replace)->self|nil
String#unpack	(template)->Array
String#upcase	->String
String#upcase!	->self|nil
String#upto	(max,exclusive=false){|s|...}->self
String#valid_encoding?	->bool
String.new	(string="")->String
String.try_convert	(obj)->String|nil
StringIO#<<	(obj)->self
StringIO#binmode	->self
StringIO#bytes	{|ch|...}->self	->Enumerator
StringIO#chars	{|c|...}->self	->Enumerator
StringIO#close	
StringIO#close_read	
StringIO#close_write	
StringIO#closed?	->bool
StringIO#closed_read?	->bool
StringIO#closed_write?	->bool
StringIO#each	(rs=$/){|line|...}->self	(rs=$/)->Enumerator
StringIO#each_byte	{|ch|...}->self	->Enumerator
StringIO#each_char	{|c|...}->self	->Enumerator
StringIO#each_line	(rs=$/){|line|...}->self	(rs=$/)->Enumerator
StringIO#eof	->bool	?->bool
StringIO#eof?	->bool
StringIO#external_encoding	->Encoding
StringIO#fcntl	
StringIO#fileno	
StringIO#flush	->self
StringIO#fsync	->0
StringIO#getbyte	->Integer|nil
StringIO#getc	->Integer|nil
StringIO#gets	(rs=$/)->String|nil
StringIO#internal_encoding	->Encoding
StringIO#isatty	->false
StringIO#length	->Integer
StringIO#lineno	->Integer
StringIO#lineno=	(n)
StringIO#lines	(rs=$/){|line|...}->self	(rs=$/)->Enumerator
StringIO#path	
StringIO#pid	
StringIO#pos	->Integer
StringIO#pos=	(n)
StringIO#print	()	(*obj)
StringIO#printf	(format,*obj)
StringIO#putc	(ch)->object
StringIO#puts	(*obj)
StringIO#read	->String	(len)->String|nil	(len,outbuf)->String
StringIO#readbyte	->Integer
StringIO#readchar	->Integer
StringIO#readline	(rs=$/)->String
StringIO#readlines	(rs=$/)->[String]
StringIO#readpartial	->String	(len)->String	(len,outbuf)->String
StringIO#reopen	(sio)->StringIO	(str,mode='r+')->StringIO
StringIO#rewind	->0
StringIO#seek	(offset,whence=IO::SEEK_SET)
StringIO#set_encoding	(encoding)->self
StringIO#size	->Integer
StringIO#string	->String
StringIO#string=	(buf)
StringIO#sync	->true
StringIO#sync=	(bool)
StringIO#sysread	->String	(len)->String	(len,outbuf)->String
StringIO#syswrite	(obj)->Integer
StringIO#tell	->Integer
StringIO#truncate	(len)->Integer
StringIO#tty?	->false
StringIO#ungetbyte	(num)
StringIO#ungetc	(ch)
StringIO#write	(obj)->Integer
StringIO.new	(string='',mode='r+')->StringIO
StringIO.open	(string='',mode='r+')->StringIO	(string='',mode='r+'){|io|...}->StringIO
StringScanner#<<	(str)->self
StringScanner#[]	(nth)->String|nil
StringScanner#beginning_of_line?	->bool
StringScanner#bol?	->bool
StringScanner#check	(regexp)->String|nil
StringScanner#check_until	(regexp)->String|nil
StringScanner#clear	->self
StringScanner#concat	(str)->self
StringScanner#empty?	->bool
StringScanner#eos?	->bool
StringScanner#exist?	(regexp)->Fixnum|nil
StringScanner#get_byte	->String|nil
StringScanner#getbyte	->String|nil
StringScanner#getch	->String|nil
StringScanner#inspect	->String
StringScanner#match?	(regexp)->Fixnum|nil
StringScanner#matched	->String|nil
StringScanner#matched?	->bool
StringScanner#matched_size	->Fixnum|nil
StringScanner#matchedsize	->Fixnum|nil
StringScanner#peek	(bytes)->String
StringScanner#peep	(bytes)->String
StringScanner#pointer	->Fixnum
StringScanner#pointer=	(n)
StringScanner#pos	->Fixnum
StringScanner#pos=	(n)
StringScanner#post_match	->String|nil
StringScanner#pre_match	->String|nil
StringScanner#reset	->self
StringScanner#rest	->String
StringScanner#rest?	->bool
StringScanner#rest_size	->Fixnum
StringScanner#restsize	->Fixnum
StringScanner#scan	(regexp)->String|nil
StringScanner#scan_full	(regexp,s,f)->object
StringScanner#scan_until	(regexp)->String|nil
StringScanner#search_full	(regexp,s,f)->object
StringScanner#skip	(regexp)->Fixnum|nil
StringScanner#skip_until	(regexp)->Fixnum|nil
StringScanner#string	->String
StringScanner#string=	(str)
StringScanner#terminate	->self
StringScanner#unscan	->self
StringScanner.must_C_version	
StringScanner.new	(str,dup=false)->StringScanner
Struct#==	(other)->bool
Struct#[]	(member)->object
Struct#[]=	(member,value)
Struct#each	{|value|...}->self	->Enumerator
Struct#each_pair	{|member,value|...}->self	->Enumerator
Struct#eql?	(other)->bool
Struct#equal?	(other)->bool
Struct#hash	->Integer
Struct#length	->Fixnum
Struct#members	->[String]
Struct#size	->Fixnum
Struct#to_a	->[object]
Struct#to_json	(*args)->String
Struct#values	->[object]
Struct#values_at	(*members)->[object]
Struct.[]	(*args)->Struct
Struct.json_create	(hash)->Struct
Struct.members	->[Symbol]
Struct.new	(*args)->Class	(*args)->Struct
Struct.yaml_tag_class_name	->String
Struct.yaml_tag_read_class	(name)->String
Struct::Group#gid	->Integer
Struct::Group#gid=	(gid)
Struct::Group#mem	->[String]
Struct::Group#mem=	(mem)
Struct::Group#name	->String
Struct::Group#name=	(name)
Struct::Group#passwd	->String
Struct::Group#passwd=	(passwd)
Struct::Passwd#age	->Integer
Struct::Passwd#age=	(age)
Struct::Passwd#change	->Integer
Struct::Passwd#change=	(change)
Struct::Passwd#class	->String
Struct::Passwd#class=	(class)
Struct::Passwd#comment	->String
Struct::Passwd#comment=	(comment)
Struct::Passwd#dir	->String
Struct::Passwd#dir=	(dir)
Struct::Passwd#expire	->Integer
Struct::Passwd#expire=	(expire)
Struct::Passwd#gecos	
Struct::Passwd#gecos=	()
Struct::Passwd#gid	->Integer
Struct::Passwd#gid=	(gid)
Struct::Passwd#name	->String
Struct::Passwd#name=	(name)
Struct::Passwd#passwd	->String
Struct::Passwd#passwd=	(passwd)
Struct::Passwd#quota	->Integer
Struct::Passwd#quota=	(quota)
Struct::Passwd#shell	->String
Struct::Passwd#shell=	(shell)
Struct::Passwd#uid	->Integer
Struct::Passwd#uid=	(uid)
Struct::Tms#cstime	->Float
Struct::Tms#cstime=	(n)
Struct::Tms#cutime	->Float
Struct::Tms#cutime=	(n)
Struct::Tms#stime	->Float
Struct::Tms#stime=	(n)
Struct::Tms#utime	->Float
Struct::Tms#utime=	(n)
Symbol#<=>	(other)->-1|0|1
Symbol#==	(other)->true|false
Symbol#=~	(other)->Integer|nil
Symbol#[]	(nth)->String|nil	(nth,len)->String|nil	(substr)->String|nil	(regexp,nth=0)->String|nil	(range)->String|nil
Symbol#capitalize	->Symbol
Symbol#casecmp	(other)->-1|0|1
Symbol#dclone	
Symbol#downcase	->Symbol
Symbol#empty?	->bool
Symbol#encoding	->Encoding
Symbol#id2name	->String
Symbol#inspect	->String
Symbol#intern	->self
Symbol#length	->Integer
Symbol#match	(other)->Integer|nil
Symbol#next	->Symbol
Symbol#size	->Integer
Symbol#slice	(nth)->String|nil	(nth,len)->String|nil	(substr)->String|nil	(regexp,nth=0)->String|nil	(range)->String|nil
Symbol#succ	->Symbol
Symbol#swapcase	->Symbol
Symbol#to_proc	->Proc
Symbol#to_s	->String
Symbol#to_sym	->self
Symbol#upcase	->Symbol
Symbol.all_symbols	->[Symbol]
Sync.new	->Sync
Sync_m#exclusive?	->bool
Sync_m#lock	(mode=EX)->self
Sync_m#locked?	->bool
Sync_m#shared?	->bool
Sync_m#sync_ex_count	->Integer
Sync_m#sync_ex_count=	(count)
Sync_m#sync_ex_locker	->Thread|nil
Sync_m#sync_ex_locker=	(thread)
Sync_m#sync_exclusive?	->bool
Sync_m#sync_extend	
Sync_m#sync_inspect	
Sync_m#sync_lock	(mode=EX)->self
Sync_m#sync_locked?	->bool
Sync_m#sync_mode	->Symbol
Sync_m#sync_sh_locker	->Hash
Sync_m#sync_sh_locker=	(hash)
Sync_m#sync_shared?	->bool
Sync_m#sync_synchronize	(mode=EX){...}->object
Sync_m#sync_try_lock	(mode=EX)->bool
Sync_m#sync_unlock	(mode=EX)->self
Sync_m#sync_upgrade_waiting	->[Thread]
Sync_m#sync_upgrade_waiting=	(arr)
Sync_m#sync_waiting	->[Thread]
Sync_m#sync_waiting=	(arr)
Sync_m#synchronize	(mode=EX){...}->object
Sync_m#try_lock	(mode=EX)->bool
Sync_m#unlock	(mode=EX)->self
Sync_m.exclusive?	->bool
Sync_m.lock	(mode=EX)->self
Sync_m.locked?	->bool
Sync_m.shared?	->bool
Sync_m.sync_ex_count	->Integer
Sync_m.sync_ex_count=	(count)
Sync_m.sync_ex_locker	->Thread|nil
Sync_m.sync_ex_locker=	(thread)
Sync_m.sync_exclusive?	->bool
Sync_m.sync_extend	
Sync_m.sync_inspect	
Sync_m.sync_lock	(mode=EX)->self
Sync_m.sync_locked?	->bool
Sync_m.sync_mode	->Symbol
Sync_m.sync_sh_locker	->Hash
Sync_m.sync_sh_locker=	(hash)
Sync_m.sync_shared?	->bool
Sync_m.sync_synchronize	(mode=EX){...}->object
Sync_m.sync_try_lock	(mode=EX)->bool
Sync_m.sync_unlock	(mode=EX)->self
Sync_m.sync_upgrade_waiting	->[Thread]
Sync_m.sync_upgrade_waiting=	(arr)
Sync_m.sync_waiting	->[Thread]
Sync_m.sync_waiting=	(arr)
Sync_m.synchronize	(mode=EX){...}->object
Sync_m.try_lock	(mode=EX)->bool
Sync_m.unlock	(mode=EX)->self
Sync_m::Err.Fail	(*options)
Sync_m::LockModeFailer.Fail	(*options)
Sync_m::UnknownLocker.Fail	(*options)
Syslog.LOG_MASK	(priority)->Fixnum
Syslog.LOG_UPTO	(priority)->Fixnum
Syslog.alert	(message,*arg)->self
Syslog.close	
Syslog.crit	(message,*arg)->self
Syslog.debug	(message,*arg)->self
Syslog.emerg	(message,*arg)->self
Syslog.err	(message,*arg)->self
Syslog.facility	->Fixnum|nil
Syslog.ident	->String|nil
Syslog.info	(message,*arg)->self
Syslog.instance	->self
Syslog.log	(priority,format,*arg)->self
Syslog.mask	->Fixnum|nil
Syslog.mask=	(mask)
Syslog.notice	(message,*arg)->self
Syslog.open	(ident=$0,options=Syslog::LOG_PID|Syslog::LOG_CONS,facility=Syslog::LOG_USER)->self	(ident=$0,options=Syslog::LOG_PID|Syslog::LOG_CONS,facility=Syslog::LOG_USER){|syslog|...}->self
Syslog.open!	(ident=$0,options=Syslog::LOG_PID|Syslog::LOG_CONS,facility=Syslog::LOG_USER){|syslog|...}->self
Syslog.opened?	->bool
Syslog.options	->Fixnum|nil
Syslog.reopen	(ident=$0,options=Syslog::LOG_PID|Syslog::LOG_CONS,facility=Syslog::LOG_USER){|syslog|...}->self
Syslog.warning	(message,*arg)->self
SystemCallError#errno	->Fixnum|nil
SystemCallError.new	(error_message)->SystemCallError	(error_message,errno)->SystemCallError	(errno)->SystemCallError
SystemExit#status	->Fixnum
SystemExit#success?	->bool
SystemExit.new	(status=0,error_message="")->SystemExit
TCPServer#accept	->TCPSocket
TCPServer#accept_nonblock	->TCPSocket
TCPServer#listen	(backlog)->0
TCPServer#sysaccept	->Fixnum
TCPServer.new	([host,]service)->TCPServer
TCPServer.open	([host,]service)->TCPServer
TCPSocket.gethostbyname	(host)->Array
TCPSocket.new	(host,serv,local_host=nil,local_service=nil)->TCPSocket	(host,service[,local_host,local_service])->TCPSocket
TCPSocket.open	(host,serv,local_host=nil,local_service=nil)->TCPSocket	(host,service[,local_host,local_service])->TCPSocket
TSort#each_strongly_connected_component	{|nodes|...}
TSort#each_strongly_connected_component_from	(node){|nodes|...}
TSort#strongly_connected_components	->Array
TSort#tsort	->Array
TSort#tsort_each	{|node|...}
TSort#tsort_each_child	(node){|child|...}
TSort#tsort_each_node	{|node|...}
TclTkIp#__eval	(cmd)
TclTkIp#__fromUTF8	(str,encoding=nil)
TclTkIp#__invoke	(*cmds)
TclTkIp#__toUTF8	(str,encoding=nil)
TclTkIp#_conv_listelement	(src)
TclTkIp#_create_console	
TclTkIp#_eval	(cmd)
TclTkIp#_eval_with_enc	(cmd)
TclTkIp#_eval_without_enc	(cmd)
TclTkIp#_fromUTF8	(str,encoding=nil)
TclTkIp#_get_global_var	(var_name)
TclTkIp#_get_global_var2	(var_name,index)
TclTkIp#_get_variable	(var_name,flag)
TclTkIp#_get_variable2	(var_name,index,flag)
TclTkIp#_immediate_invoke	
TclTkIp#_invoke	(*cmds)	(*cmds)
TclTkIp#_invoke_with_enc	(*cmds)
TclTkIp#_invoke_without_enc	(*cmds)
TclTkIp#_ip_id_	
TclTkIp#_make_menu_embeddable	(menu_path)
TclTkIp#_merge_tklist	
TclTkIp#_return_value	
TclTkIp#_set_global_var	(var_name,value)
TclTkIp#_set_global_var2	(var_name,index,value)
TclTkIp#_set_variable	(var_name,value,flag)	(var_name,index,value,flag)
TclTkIp#_split_tklist	(list_str)
TclTkIp#_thread_tkwait	(mode,target)
TclTkIp#_thread_vwait	(var)
TclTkIp#_toUTF8	(str,encoding=nil)
TclTkIp#_unset_global_var	(var_name)
TclTkIp#_unset_global_var2	(var_name,index)
TclTkIp#_unset_variable	(var_name,flag)
TclTkIp#_unset_variable2	(var_name,index,flag)
TclTkIp#allow_ruby_exit=	(val)
TclTkIp#allow_ruby_exit?	
TclTkIp#create_slave	
TclTkIp#delete	
TclTkIp#deleted?	
TclTkIp#do_one_event	
TclTkIp#encoding	
TclTkIp#encoding=	(encoding)
TclTkIp#get_eventloop_tick	
TclTkIp#get_eventloop_weight	
TclTkIp#get_no_event_wait	
TclTkIp#has_mainwindow?	
TclTkIp#invalid_namespace?	
TclTkIp#mainloop	
TclTkIp#mainloop_abort_on_exception	
TclTkIp#mainloop_abort_on_exception=	(val)
TclTkIp#mainloop_watchdog	
TclTkIp#make_safe	
TclTkIp#restart	
TclTkIp#safe?	
TclTkIp#set_eventloop_tick	(tick)
TclTkIp#set_eventloop_weight	(loop_max,no_event)
TclTkIp#set_max_block_time	(time)
TclTkIp#set_no_event_wait	(wait)
TclTkIp#slave_of?	(master)
TclTkLib._conv_listelement	(src)
TclTkLib._encoding	
TclTkLib._encoding=	(name)
TclTkLib._fromUTF8	(*args)
TclTkLib._mark_at_exit	
TclTkLib._merge_tklist	(*args)
TclTkLib._split_tklist	(list_str)
TclTkLib._subst_Tcl_backslash	(str)
TclTkLib._subst_UTF_backslash	(str)
TclTkLib._toUTF8	(*args)
TclTkLib.do_one_event	(*args)
TclTkLib.do_thread_callback	(*args)
TclTkLib.encoding	
TclTkLib.encoding=	(enc_name)	(name)
TclTkLib.encoding_system	
TclTkLib.encoding_system=	(enc_name)
TclTkLib.get_eventloop_tick	
TclTkLib.get_eventloop_weight	
TclTkLib.get_no_event_wait	
TclTkLib.mainloop	(*args)
TclTkLib.mainloop_abort_on_exception	
TclTkLib.mainloop_abort_on_exception=	(val)
TclTkLib.mainloop_thread?	
TclTkLib.mainloop_watchdog	(*args)
TclTkLib.num_of_mainwindows	
TclTkLib.set_eventloop_tick	(tick)
TclTkLib.set_eventloop_weight	(loop_max,no_event)
TclTkLib.set_max_block_time	(time)
TclTkLib.set_no_event_wait	(wait)
Tempfile#close	(real=false)
Tempfile#close!	
Tempfile#delete	->self
Tempfile#length	->Integer
Tempfile#open	->self
Tempfile#path	->String|nil
Tempfile#size	->Integer
Tempfile#unlink	->self
Tempfile.new	(basename,tempdir=Dir::tmpdir)->Tempfile
Tempfile.open	(basename,tempdir=Dir::tmpdir)->Tempfile	(basename,tempdir=Dir::tmpdir){|fp|...}->object
Test::Unit.setup_argv	(original_argv=ARGV){|files|...}->[String]
Test::Unit::Assertions#assert	(boolean,message=nil)
Test::Unit::Assertions#assert_block	(message="assert_blockfailed."){...}
Test::Unit::Assertions#assert_equal	(expected,actual,message=nil)
Test::Unit::Assertions#assert_in_delta	(expected_float,actual_float,delta,message="")
Test::Unit::Assertions#assert_instance_of	(klass,object,message="")
Test::Unit::Assertions#assert_kind_of	(klass,object,message="")
Test::Unit::Assertions#assert_match	(pattern,string,message="")
Test::Unit::Assertions#assert_nil	(object,message="")
Test::Unit::Assertions#assert_no_match	(regexp,string,message="")
Test::Unit::Assertions#assert_not_equal	(expected,actual,message="")
Test::Unit::Assertions#assert_not_nil	(object,message="")
Test::Unit::Assertions#assert_not_same	(expected,actual,message="")
Test::Unit::Assertions#assert_nothing_raised	(message=""){...}	(klass1,klass2,...,message=""){...}
Test::Unit::Assertions#assert_nothing_thrown	(message=""){...}
Test::Unit::Assertions#assert_operator	(object1,operator,object2,message="")
Test::Unit::Assertions#assert_raise	(klass1,klass2,...,message=""){...}->object
Test::Unit::Assertions#assert_raises	(*args,&block)->object
Test::Unit::Assertions#assert_respond_to	(object,method,message="")
Test::Unit::Assertions#assert_same	(expected,actual,message="")
Test::Unit::Assertions#assert_send	(send_array,message="")
Test::Unit::Assertions#assert_throws	(expected_symbol,message=""){...}
Test::Unit::Assertions#build_message	(head,template=nil,*arguments)
Test::Unit::Assertions#flunk	(message="Flunked")
Test::Unit::Assertions.use_pp=	(value)
Test::Unit::TestCase.test_order	->Symbol
Thread#[]	(name)->object|nil
Thread#[]=	(name,val)
Thread#abort_on_exception	->bool
Thread#abort_on_exception=	(newstate)
Thread#alive?	->bool
Thread#exit	->self
Thread#group	->ThreadGroup|nil
Thread#join	->self	(limit)->self|nil
Thread#key?	(name)->bool
Thread#keys	->[Symbol]
Thread#kill	->self
Thread#priority	->Integer
Thread#priority=	(val)
Thread#raise	(error_type,message,traceback)
Thread#run	->self
Thread#safe_level	->Integer
Thread#status	->String|false|nil
Thread#stop?	->bool
Thread#terminate	->self
Thread#value	->object
Thread#wakeup	->self
Thread.abort_on_exception	->bool
Thread.abort_on_exception=	(newstate)
Thread.critical	
Thread.critical=	(newstate)
Thread.current	->Thread
Thread.exclusive	{...}->object
Thread.exit	
Thread.fork	(*arg){|*arg|...}->Thread
Thread.kill	(thread)->Thread
Thread.list	->[Thread]
Thread.main	->Thread
Thread.new	(*arg){|*arg|...}->Thread
Thread.pass	
Thread.start	(*arg){|*arg|...}->Thread
Thread.stop	
ThreadGroup#add	(thread)->self
ThreadGroup#enclose	->self
ThreadGroup#enclosed?	->bool
ThreadGroup#list	->[Thread]
ThreadGroup.new	->ThreadGroup
ThreadsWait#all_waits	
ThreadsWait#empty?	->bool
ThreadsWait#finished?	->bool
ThreadsWait#join	(*threads)
ThreadsWait#join_nowait	(*threads)
ThreadsWait#next_wait	(nonblock=nil)->Thread
ThreadsWait#threads	->Array
ThreadsWait.all_waits	(*threads)	(*threads){|thread|...}
ThreadsWait.new	(*threads)->ThreadsWait
Time#+	(other)->Time
Time#-	(time)->Float	(sec)->Time
Time#<=>	(other)->-1|0|1|nil
Time#asctime	->String
Time#ctime	->String
Time#day	->Integer
Time#dst?	->bool
Time#eql?	(other)->bool
Time#friday?	->bool
Time#getgm	->Time
Time#getlocal	->Time
Time#getutc	->Time
Time#gmt?	->bool
Time#gmt_offset	->Integer
Time#gmtime	->self
Time#gmtoff	->Integer
Time#hour	->Integer
Time#httpdate	->String
Time#isdst	->bool
Time#iso8601	(fractional_seconds=0)->String
Time#localtime	->self
Time#mday	->Integer
Time#min	->Integer
Time#mon	->Integer
Time#monday?	->bool
Time#month	->Integer
Time#nsec	->Integer
Time#rfc2822	->String
Time#rfc822	->String
Time#saturday?	->bool
Time#sec	->Integer
Time#strftime	(format)->String
Time#succ	->Time
Time#sunday?	->bool
Time#thursday?	->bool
Time#to_a	->Array
Time#to_date	->Date
Time#to_datetime	->DateTime
Time#to_f	->Float
Time#to_i	->Integer
Time#to_json	(*args)->String
Time#to_s	->String
Time#to_time	->Time
Time#tuesday?	->bool
Time#tv_nsec	->Integer
Time#tv_sec	->Integer
Time#tv_usec	->Integer
Time#usec	->Integer
Time#utc	->self
Time#utc?	->bool
Time#utc_offset	->Integer
Time#wday	->Integer
Time#wednesday?	->bool
Time#xmlschema	(fractional_seconds=0)->String
Time#yday	->Integer
Time#year	->Integer
Time#zone	->String
Time.at	(time)->Time	(time,usec)->Time
Time.gm	(year,mon=1,day=1,hour=0,min=0,sec=0,usec=0)->Time	(sec,min,hour,mday,mon,year,wday,yday,isdst,zone)->Time
Time.httpdate	(date)->Time
Time.iso8601	(date)->Time
Time.json_create	(hash)->Time
Time.local	(year,mon=1,day=1,hour=0,min=0,sec=0,usec=0)->Time	(sec,min,hour,mday,mon,year,wday,yday,isdst,zone)->Time
Time.mktime	(year,mon=1,day=1,hour=0,min=0,sec=0,usec=0)->Time	(sec,min,hour,mday,mon,year,wday,yday,isdst,zone)->Time
Time.new	->Time
Time.now	->Time
Time.parse	(date,now=Time.now)->Time	(date,now=Time.now){|year|year}->Time
Time.rfc2822	(date)->Time
Time.rfc822	(date)->Time
Time.utc	(year,mon=1,day=1,hour=0,min=0,sec=0,usec=0)->Time	(sec,min,hour,mday,mon,year,wday,yday,isdst,zone)->Time
Time.xmlschema	(date)->Time
Timeout.timeout	(sec,exception_class=nil){|i|...}
Tk#root	
Tk#update	(idle=nil)
Tk.BinaryString	
Tk.EncodedString	
Tk.UTF8_String	
Tk.add_kinsoku	(chars,mode='both')
Tk.bell	(nice=false)
Tk.bell_on_display	(win,nice=false)
Tk.const_missing	(sym)
Tk.current_grabs	(win=nil)
Tk.delete_kinsoku	(chars,mode='both')
Tk.destroy	(*wins)
Tk.errorCode	
Tk.errorInfo	
Tk.exit	
Tk.focus	(display=nil)
Tk.focus_lastfor	(win)
Tk.focus_next	(win)
Tk.focus_prev	(win)
Tk.focus_to	(win,force=false)
Tk.fromUTF8	(str,encoding=nil)
Tk.grid	(*args)
Tk.grid_forget	(*args)
Tk.has_mainwindow?	
Tk.load_tcllibrary	(file,pkg_name=Tk::None,interp=Tk::None)
Tk.load_tclscript	(file,enc=nil)
Tk.load_tclscript_rsrc	(resource_name,file=Tk::None)
Tk.load_tclscript_rsrcid	(resource_id,file=Tk::None)
Tk.lower_window	(win,below=Tk::None)
Tk.pack	(*args)
Tk.pack_forget	(*args)
Tk.pkgconfig_get	(mod,key)
Tk.pkgconfig_list	(mod)
Tk.place	(*args)
Tk.place_forget	(*args)
Tk.raise_window	(win,above=Tk::None)
Tk.show_kinsoku	(mode='both')
Tk.strictMotif	(mode=Tk::None)
Tk.subst_tk_backslash	(str)
Tk.subst_utf_backslash	(str)
Tk.tcl_pkgconfig_get	
Tk.tcl_pkgconfig_list	(key)
Tk.thread_update	(idle=nil)
Tk.thread_update_idletasks	
Tk.tk_pkgconfig_get	(key)
Tk.tk_pkgconfig_list	
Tk.toUTF8	(str,encoding=nil)
Tk.to_backslash_sequence	(str)
Tk.ungrid	(*args)
Tk.unload_tcllibrary	(*args)
Tk.unpack	(*args)
Tk.unplace	(*args)
Tk.update	(idle=nil)
Tk.update_idletasks	
Tk.utf_to_backslash	(str)
Tk.utf_to_backslash_sequence	(str)
Tk::BLT#find_command	(pat)
Tk::BLT#find_name	(pat)
Tk::BLT.active_legend	(graph)
Tk::BLT.beep	(percent=50)
Tk::BLT.bgexec	(*args)
Tk::BLT.bltdebug	(lvl=nil)
Tk::BLT.closest_point	(graph)
Tk::BLT.crc32_data	(dat)
Tk::BLT.crc32_file	(name)
Tk::BLT.crosshairs	(graph)
Tk::BLT.detach_bgexec	(*args)
Tk::BLT.package_name	
Tk::BLT.package_version	
Tk::BLT.print_key	(graph)
Tk::BLT.zoom_stack	(graph)
Tk::BLT::GraphCommand#active_legend	
Tk::BLT::GraphCommand#closest_point	
Tk::BLT::GraphCommand#crosshairs	
Tk::BLT::GraphCommand#print_key	
Tk::BLT::GraphCommand#zoom_stack	
Tk::BWidget.XLFDfont	(cmd,*args)
Tk::BWidget.assert	(exp,msg=None)
Tk::BWidget.badOptionString	(type,value,list)
Tk::BWidget.bindMouseWheel	(widget)
Tk::BWidget.classes	(klass)
Tk::BWidget.clonename	(menu)
Tk::BWidget.focus	(opt,path)
Tk::BWidget.get3dcolor	(path,bgcolor)
Tk::BWidget.getname	(name)
Tk::BWidget.grab	(opt,path)
Tk::BWidget.inuse	(klass)
Tk::BWidget.library	(klass,*klasses)
Tk::BWidget.lreorder	(list,neworder)
Tk::BWidget.package_name	
Tk::BWidget.package_version	
Tk::BWidget.parsetext	(text)
Tk::BWidget.place	(path,w,h,*args)
Tk::BWidget.write	(file,mode=None)
Tk::BWidget.wrongNumArgsString	(str)
Tk::Clock.add	(clk,*args)
Tk::Clock.clicks	(ms=nil)
Tk::Clock.format	(clk,form=nil)
Tk::Clock.formatGMT	(clk,form=nil)
Tk::Clock.microseconds	
Tk::Clock.milliseconds	
Tk::Clock.scan	(str,base=nil)
Tk::Clock.scanGMT	(str,base=nil)
Tk::Clock.seconds	
Tk::EncodedString#encoding	
Tk::EncodedString.new	(str,enc=nil)
Tk::EncodedString.new_with_utf_backslash	(str,enc=nil)
Tk::EncodedString.new_without_utf_backslash	(str,enc=nil)
Tk::EncodedString.subst_tk_backslash	(str)
Tk::EncodedString.subst_utf_backslash	(str)
Tk::EncodedString.to_backslash_sequence	(str)
Tk::EncodedString.utf_backslash	(str)
Tk::EncodedString.utf_to_backslash	(str)
Tk::EncodedString.utf_to_backslash_sequence	(str)
Tk::ICONS#delete	
Tk::ICONS#name	
Tk::ICONS#query	(keys={})
Tk::ICONS.create	(*args)
Tk::ICONS.delete	(*icons)
Tk::ICONS.new	(name,keys=nil)
Tk::ICONS.package_name	
Tk::ICONS.package_version	
Tk::ICONS.query	(*args)
Tk::Img.package_name	
Tk::Img.package_version	
Tk::ItemValidateConfigure#__conv_item_vcmd_on_hash_kv	(keys)
Tk::ItemValidateConfigure#__get_item_validate_key2class	(id)
Tk::ItemValidateConfigure#__item_validation_class_list	(id)
Tk::ItemValidateConfigure#__item_validcmd_call	(tagOrId,klass,key,*args,&b)
Tk::ItemValidateConfigure#itemconfigure	(tagOrId,slot,value=TkComm::None)
Tk::ItemValidateConfigure.__def_validcmd	(scope,klass,keys=nil)
Tk::Iwidgets.package_name	
Tk::Iwidgets.package_version	
Tk::OptionObj#+	(hash)
Tk::OptionObj#[]	(key)
Tk::OptionObj#[]=	(key,value)
Tk::OptionObj#apply	(target=nil)
Tk::OptionObj#assign	(*wins)
Tk::OptionObj#cget	(key)
Tk::OptionObj#configure	(key,value=nil)
Tk::OptionObj#notify	(target=nil)
Tk::OptionObj#observ_info	
Tk::OptionObj#observs	
Tk::OptionObj#replace	(hash)
Tk::OptionObj#store	(key,value)
Tk::OptionObj#unassign	(*wins)
Tk::OptionObj#update	(hash)
Tk::OptionObj#update_without_notify	(hash)
Tk::OptionObj.new	(hash=nil)
Tk::Scrollable#autoscroll	(mode=nil)
Tk::Scrollable#unautoscroll	(mode=nil)
Tk::Tile.package_name	
Tk::Tile.package_version	
Tk::Tile::TileWidget#instate	(state,script=nil,&b)
Tk::Tile::TileWidget#state	(state=nil)
Tk::UTF8_String.new	(str)
Tk::ValidateConfigure#__conv_vcmd_on_hash_kv	(keys)
Tk::ValidateConfigure#__get_validate_key2class	
Tk::ValidateConfigure#__validation_class_list	
Tk::ValidateConfigure#__validcmd_call	(klass,key,*args,&b)
Tk::ValidateConfigure#configure	(slot,value=TkComm::None)
Tk::ValidateConfigure.__def_validcmd	(scope,klass,keys=nil)
Tk::Vu.package_version	
Tk::Wm#aspect	(*args)
Tk::Wm#attributes	(slot=nil,value=Tk::None)
Tk::Wm#client	(name=Tk::None)
Tk::Wm#colormapwindows	(*args)
Tk::Wm#deiconify	(ex=true)
Tk::Wm#focusmodel	(mode=nil)
Tk::Wm#frame	
Tk::Wm#geometry	(geom=nil)
Tk::Wm#group	(leader=nil)
Tk::Wm#iconbitmap	(bmp=nil)
Tk::Wm#iconify	(ex=true)
Tk::Wm#iconmaskbmp	(bmp=nil)
Tk::Wm#iconname	(name=nil)
Tk::Wm#iconphoto	(*imgs)
Tk::Wm#iconphoto_default	(*imgs)
Tk::Wm#iconposition	(*args)
Tk::Wm#iconwindow	(win=nil)
Tk::Wm#maxsize	(*args)
Tk::Wm#minsize	(*args)
Tk::Wm#overrideredirect	(mode=Tk::None)
Tk::Wm#positionfrom	(who=Tk::None)
Tk::Wm#protocol	(name=nil,cmd=nil,&block)
Tk::Wm#protocols	(kv=nil)
Tk::Wm#resizable	(*args)
Tk::Wm#sizefrom	(who=Tk::None)
Tk::Wm#stackorder	
Tk::Wm#stackorder_isabove	(win)
Tk::Wm#stackorder_isbelow	(win)
Tk::Wm#state	(st=nil)
Tk::Wm#title	(str=nil)
Tk::Wm#transient	(master=nil)
Tk::Wm#withdraw	(ex=true)
Tk::Wm#wm_command	(value=nil)
Tk::Wm#wm_grid	(*args)
Tk::X_Scrollable#xscrollbar	(bar=nil)
Tk::X_Scrollable#xscrollcommand	(cmd=Proc.new)
Tk::X_Scrollable#xview	(*index)
Tk::X_Scrollable#xview_moveto	(*index)
Tk::X_Scrollable#xview_scroll	(*index)
Tk::Y_Scrollable#yscrollbar	(bar=nil)
Tk::Y_Scrollable#yscrollcommand	(cmd=Proc.new)
Tk::Y_Scrollable#yview	(*index)
Tk::Y_Scrollable#yview_moveto	(*index)
Tk::Y_Scrollable#yview_scroll	(*index)
TkBgError.bgerror	(message)
TkBgError.set_default	
TkBgError.set_handler	(hdlr=Proc.new)
TkBgError.show	
TkBgError.tkerror	
TkBindCore#bind	(context,*args)
TkBindCore#bind_append	(context,*args)
TkBindCore#bind_remove	(context)
TkBindCore#bindinfo	(context=nil)
TkBindTag#inspect	
TkBindTag#name	
TkBindTag#to_eval	
TkBindTag.id2obj	(id)
TkBindTag.new	(*args,&b)
TkBindTag.new_by_name	(name,*args,&b)
TkBindTagAll.new	(*args,&b)
TkBitmapImage.new	(*args)
TkButton#flash	
TkButton#invoke	
TkCallbackEntry.inspect	
TkCanvas#__destroy_hook__	
TkCanvas#addtag	(tag,mode,*args)
TkCanvas#addtag_above	(tagOrId,target)
TkCanvas#addtag_all	(tagOrId)
TkCanvas#addtag_below	(tagOrId,target)
TkCanvas#addtag_closest	(tagOrId,x,y,halo=Tk::None,start=Tk::None)
TkCanvas#addtag_enclosed	(tagOrId,x1,y1,x2,y2)
TkCanvas#addtag_overlapping	(tagOrId,x1,y1,x2,y2)
TkCanvas#addtag_withtag	(tagOrId,tag)
TkCanvas#bbox	(tagOrId,*tags)
TkCanvas#canvasx	(screen_x,*args)
TkCanvas#canvasy	(screen_y,*args)
TkCanvas#coords	(tag,*args)
TkCanvas#create	(type,*args)
TkCanvas#dchars	(tag,first,last=Tk::None)
TkCanvas#delete	(*args)
TkCanvas#deltag	(tag,tag_to_del=Tk::None)
TkCanvas#dtag	(tag,tag_to_del=Tk::None)
TkCanvas#find	(mode,*args)
TkCanvas#find_above	(target)
TkCanvas#find_all	
TkCanvas#find_below	(target)
TkCanvas#find_closest	(x,y,halo=Tk::None,start=Tk::None)
TkCanvas#find_enclosed	(x1,y1,x2,y2)
TkCanvas#find_overlapping	(x1,y1,x2,y2)
TkCanvas#find_withtag	(tag)
TkCanvas#gettags	(tagOrId)
TkCanvas#icursor	(tagOrId,index)
TkCanvas#index	(tagOrId,idx)
TkCanvas#insert	(tagOrId,index,string)
TkCanvas#itembind	(tag,context,*args)
TkCanvas#itembind_append	(tag,context,*args)
TkCanvas#itembind_remove	(tag,context)
TkCanvas#itembindinfo	(tag,context=nil)
TkCanvas#itemfocus	(tagOrId=nil)
TkCanvas#itemtype	(tag)
TkCanvas#lower	(tag,below=nil)
TkCanvas#move	(tag,x,y)
TkCanvas#postscript	(keys)
TkCanvas#raise	(tag,above=nil)
TkCanvas#remove	(*args)
TkCanvas#scale	(tag,x,y,xs,ys)
TkCanvas#scan_dragto	(x,y)
TkCanvas#scan_mark	(x,y)
TkCanvas#select	(mode,*args)
TkCanvas#select_adjust	(tagOrId,index)
TkCanvas#select_clear	
TkCanvas#select_from	(tagOrId,index)
TkCanvas#select_item	
TkCanvas#select_to	(tagOrId,index)
TkCheckButton#toggle	
TkClipboard#append	(data,keys=nil)
TkClipboard#clear	
TkClipboard#get	(type=nil)
TkClipboard#set	(data,keys=nil)
TkClipboard.append	(data,keys=nil)
TkClipboard.append_on_display	(win,data,keys=nil)
TkClipboard.clear	(win=nil)
TkClipboard.clear_on_display	(win)
TkClipboard.get	(type=nil)
TkClipboard.get_on_display	(win,type=nil)
TkClipboard.set	(data,keys=nil)
TkClipboard.set_on_display	(win,data,keys=nil)
TkComm#bind	(tag_or_class,context,*args)
TkComm#bind_all	(context,*args)
TkComm#bind_append	(tag_or_class,context,*args)
TkComm#bind_append_all	(context,*args)
TkComm#bind_remove	(tag_or_class,context)
TkComm#bind_remove_all	(context)
TkComm#bindinfo	(tag_or_class,context=nil)
TkComm#bindinfo_all	(context=nil)
TkComm#subst	
TkComm._at	(x,y=nil)
TkComm._callback_entry?	(obj)
TkComm._callback_entry_class?	(klass)
TkComm._curr_cmd_id	
TkComm._fromUTF8	(str,encoding=nil)
TkComm._genobj_for_tkwidget	(path)
TkComm._next_cmd_id	
TkComm._toUTF8	(str,encoding=nil)
TkComm.array2tk_list	(ary,enc=nil)
TkComm.image_obj	(val)
TkComm.install_cmd	(cmd)
TkComm.list	(val,depth=0,enc=true)
TkComm.procedure	(val)
TkComm.simplelist	(val,src_enc=true,dst_enc=true)
TkComm.tk_tcl2ruby	(val,enc_mode=false,listobj=true)
TkComm.uninstall_cmd	(id)
TkComm.window	(val)
TkComposite#cget	(slot)
TkComposite#configinfo	(slot)
TkComposite#configure	(slot,value=Tk::None)
TkComposite#database_class	
TkComposite#database_classname	
TkComposite#delegate	(option,*wins)
TkComposite#delegate_alias	(alias_opt,option,*wins)
TkComposite#epath	
TkComposite#option_methods	(*opts)
TkConfigMethod#[]	(id)
TkConfigMethod#[]=	(id,value)
TkConfigMethod#__confinfo_cmd	
TkConfigMethod#__conv_keyonly_opts	(keys)
TkConfigMethod#cget	(slot)
TkConfigMethod#config_hash_kv	(keys,enc_mode=nil,conf=nil)
TkConfigMethod#configinfo	(slot=nil)
TkConfigMethod#configure	(slot,value=Tk::None)
TkConfigMethod#configure_cmd	(slot,value)
TkConfigMethod#current_configinfo	(slot=nil)
TkConsole.create	
TkConsole.eval	(tcl_script)
TkConsole.hide	
TkConsole.maininterp_eval	(tcl_script)
TkConsole.maininterp_record	(tcl_script)
TkConsole.show	
TkConsole.title	(str=Tk::None)
TkCore#_tk_call_to_list_core	(depth,arg_enc,val_enc,*args)
TkCore#after	(ms,cmd=Proc.new)
TkCore#after_cancel	(after_id)
TkCore#after_idle	(cmd=Proc.new)
TkCore#appname	(name=Tk::None)
TkCore#appsend	(interp,async,*args)
TkCore#appsend_deny	
TkCore#appsend_displayof	(interp,win,async,*args)
TkCore#callback_break	
TkCore#callback_continue	
TkCore#callback_return	
TkCore#chooseColor	(keys=nil)
TkCore#chooseDirectory	(keys=nil)
TkCore#do_one_event	(flag=TclTkLib::EventFlag::ALL)
TkCore#event_generate	(win,context,keys=nil)
TkCore#getMultipleOpenFile	(keys=nil)
TkCore#getMultipleSaveFile	(keys=nil)
TkCore#getOpenFile	(keys=nil)
TkCore#getSaveFile	(keys=nil)
TkCore#get_eventloop_tick	
TkCore#get_eventloop_weight	
TkCore#get_no_event_wait	
TkCore#inactive	
TkCore#inactive_displayof	(win)
TkCore#info	(*args)
TkCore#ip_eval	(cmd_string)
TkCore#ip_eval_with_enc	(cmd_string)
TkCore#ip_eval_without_enc	(cmd_string)
TkCore#ip_invoke	(*args)
TkCore#ip_invoke_with_enc	(*args)
TkCore#ip_invoke_without_enc	(*args)
TkCore#is_mainloop?	
TkCore#load_cmd_on_ip	(tk_cmd)
TkCore#mainloop	(check_root=true)
TkCore#mainloop_exist?	
TkCore#mainloop_thread?	
TkCore#mainloop_watchdog	(check_root=true)
TkCore#messageBox	(keys)
TkCore#rb_appsend	(interp,async,*args)
TkCore#rb_appsend_displayof	(interp,win,async,*args)
TkCore#reset_inactive	
TkCore#reset_inactive_displayof	(win)
TkCore#restart	(app_name=nil,keys={})
TkCore#scaling	(scale=nil)
TkCore#scaling_displayof	(win,scale=nil)
TkCore#set_eventloop_ticktimer_tick	
TkCore#set_eventloop_weight	(loop_max,no_event_tick)
TkCore#set_no_event_wait	(wait)
TkCore#tk_call	(*args)
TkCore#tk_call_to_list	(*args)
TkCore#tk_call_to_list_with_enc	(*args)
TkCore#tk_call_to_list_without_enc	(*args)
TkCore#tk_call_to_simplelist	(*args)
TkCore#tk_call_to_simplelist_with_enc	(*args)
TkCore#tk_call_to_simplelist_without_enc	(*args)
TkCore#tk_call_with_enc	(*args)
TkCore#tk_call_without_enc	(*args)
TkCore#windowingsystem	
TkCore.callback	(*arg)
TkCore::INTERP.__getip	
TkCore::INTERP.cb_entry_class	
TkCore::INTERP.tk_cmd_tbl	
TkCore::INTERP.tk_windows	
TkCore::Tk_OBJECT_TABLE#method_missing	(m,*args,&block)
TkCore::Tk_OBJECT_TABLE.new	(id)
TkDatabaseClass#inspect	
TkDatabaseClass.new	(name,*args,&b)
TkDialog.new	(*args)
TkDialog.show	(*args)
TkDialogObj#name	
TkDialogObj#show	
TkDialogObj#value	
TkDialogObj.show	(*args)
TkEntry#[]	(*args)
TkEntry#[]=	(*args)
TkEntry#bbox	(index)
TkEntry#cursor	
TkEntry#cursor=	(index)
TkEntry#delete	(first,last=Tk::None)
TkEntry#dragto	(pos)
TkEntry#get	
TkEntry#icursor	
TkEntry#icursor=	(index)
TkEntry#index	(idx)
TkEntry#insert	(pos,text)
TkEntry#invoke_validate	
TkEntry#mark	(pos)
TkEntry#selection_adjust	(index)
TkEntry#selection_clear	
TkEntry#selection_from	(index)
TkEntry#selection_present	
TkEntry#selection_range	(s,e)
TkEntry#selection_to	(index)
TkEntry#set	(val)
TkEntry#validate	(mode=nil)
TkEntry#value	
TkEntry#value=	(val)
TkEvent#install_bind	(cmd,*args)
TkEvent#install_bind_for_event_class	(klass,cmd,*args)
TkEvent::Event#above	
TkEvent::Event#borderwidth	
TkEvent::Event#button	
TkEvent::Event#char	
TkEvent::Event#count	
TkEvent::Event#data	
TkEvent::Event#delta	
TkEvent::Event#detail	
TkEvent::Event#focus	
TkEvent::Event#generate	(win,modkeys={})
TkEvent::Event#height	
TkEvent::Event#keycode	
TkEvent::Event#keysym	
TkEvent::Event#keysym_num	
TkEvent::Event#mode	
TkEvent::Event#num	
TkEvent::Event#override	
TkEvent::Event#place	
TkEvent::Event#property	
TkEvent::Event#root	
TkEvent::Event#root_x	
TkEvent::Event#root_y	
TkEvent::Event#rootwin_id	
TkEvent::Event#rootx	
TkEvent::Event#rooty	
TkEvent::Event#send_event	
TkEvent::Event#sendevent	
TkEvent::Event#serial	
TkEvent::Event#state	
TkEvent::Event#subwindow	
TkEvent::Event#time	
TkEvent::Event#type	
TkEvent::Event#valid_fields	(group_flag=nil)
TkEvent::Event#valid_for_generate	(group_flag=nil)
TkEvent::Event#wheel_delta	
TkEvent::Event#widget	
TkEvent::Event#width	
TkEvent::Event#win_hex	
TkEvent::Event#window	
TkEvent::Event#x	
TkEvent::Event#x_root	
TkEvent::Event#y	
TkEvent::Event#y_root	
TkEvent::Event.group_flag	(id)
TkEvent::Event.type_id	(name)
TkEvent::Event.type_name	(id)
TkFont#[]	(slot)
TkFont#[]=	(slot,val)
TkFont#actual	(option=nil)
TkFont#actual_displayof	(win,option=nil)
TkFont#ascii_actual	(option=nil)
TkFont#ascii_actual_displayof	(win,option=nil)
TkFont#ascii_configinfo	(slot=nil)
TkFont#ascii_configure	(slot,value=Tk::None)
TkFont#ascii_font	
TkFont#ascii_metrics	(option=nil)
TkFont#ascii_replace	(ltn)
TkFont#asciifont	
TkFont#call_font_configure	(path,*args)
TkFont#configinfo	(slot=nil)
TkFont#configure	(slot,value=Tk::None)
TkFont#current_configinfo	(slot=nil)
TkFont#delete	
TkFont#font	
TkFont#font_id	
TkFont#id	
TkFont#inspect	
TkFont#kanji_actual	(option=nil)
TkFont#kanji_actual_displayof	(win,option=nil)
TkFont#kanji_configinfo	(slot=nil)
TkFont#kanji_configure	(slot,value=Tk::None)
TkFont#kanji_font	
TkFont#kanji_font_id	
TkFont#kanji_metrics	(option=nil)
TkFont#kanji_metrics_displayof	(win,option=nil)
TkFont#kanji_replace	(knj)
TkFont#kanjifont	
TkFont#latin_actual	(option=nil)
TkFont#latin_actual_displayof	(win,option=nil)
TkFont#latin_configinfo	(slot=nil)
TkFont#latin_configure	(slot,value=Tk::None)
TkFont#latin_font	
TkFont#latin_font_id	
TkFont#latin_metrics	(option=nil)
TkFont#latin_metrics_displayof	(win,option=nil)
TkFont#latin_replace	(ltn)
TkFont#latinfont	
TkFont#measure	(text)
TkFont#measure_displayof	(win,text)
TkFont#method_missing	(id,*args)
TkFont#metrics	(option=nil)
TkFont#metrics_displayof	(win,option=nil)
TkFont#replace	(ltn,knj=Tk::None)
TkFont#reset_pointadjust	
TkFont#to_eval	
TkFont#used	
TkFont.actual	(fnt,option=nil)
TkFont.actual_displayof	(fnt,win,option=nil)
TkFont.configinfo	(fnt,slot=nil)
TkFont.configure	(fnt,slot,value=Tk::None)
TkFont.create_copy	(font)
TkFont.current_configinfo	(fnt,slot=nil)
TkFont.failsafe	(font)
TkFont.families	(win=nil)
TkFont.get_obj	(name)
TkFont.init_widget_font	(pathname,*args)
TkFont.measure	(fnt,text)
TkFont.measure_displayof	(fnt,win,text)
TkFont.metrics	(fnt,option=nil)
TkFont.metrics_displayof	(fnt,win,option=nil)
TkFont.names	
TkFont.new	(ltn=nil,knj=nil,keys=nil)
TkFont.used_on	(path=nil)
TkFont::DescendantFont#[]	(slot)
TkFont::DescendantFont#[]=	(slot,value)
TkFont::DescendantFont#clone	
TkFont::DescendantFont#dup	
TkFont::DescendantFont#font	
TkFont::DescendantFont#method_missing	(id,*args)
TkFont::DescendantFont#to_eval	
TkFont::DescendantFont.new	(compound,type)
TkFrame#database_classname	
TkFrame.bind	(*args){...}
TkFrame.bind_append	(*args){...}
TkFrame.bind_remove	(*args)
TkFrame.bindinfo	(*args)
TkFrame.database_class	
TkFrame.database_classname	
TkFrame.new	(parent=nil,keys=nil)
TkGrid#add	(widget,*args)
TkGrid#anchor	(master,anchor=Tk::None)
TkGrid.bbox	(master,*args)
TkGrid.columnconfiginfo	(master,index,slot=nil)
TkGrid.columnconfigure	(master,index,args)
TkGrid.configure	(widget1,widget2,...,options=nil)
TkGrid.forget	(*args)
TkGrid.grid	(widget1,widget2,...,options=nil)
TkGrid.info	(slave)
TkGrid.location	(master,x,y)
TkGrid.propagate	(master,mode=Tk::None)
TkGrid.remove	(*args)
TkGrid.rowconfiginfo	(master,index,slot=nil)
TkGrid.rowconfigure	(master,index,args)
TkGrid.size	(master)
TkGrid.slaves	(master,args)
TkImage#delete	
TkImage#height	
TkImage#inuse	
TkImage#itemtype	
TkImage#width	
TkImage.names	
TkImage.new	(keys=nil)
TkImage.types	
TkItemConfigMethod#current_itemconfiginfo	(tagOrId,slot=nil)
TkItemConfigMethod#itemcget	(tagOrId,option)
TkItemConfigMethod#itemconfiginfo	(tagOrId,slot=nil)
TkItemConfigMethod#itemconfigure	(tagOrId,slot,value=Tk::None)
TkItemConfigMethod#tagid	(tagOrId)
TkItemConfigOptkeys#__conv_item_keyonly_opts	(id,keys)
TkItemConfigOptkeys#itemconfig_hash_kv	(id,keys,enc_mode=nil,conf=nil)
TkKernel.new	(*args)
TkKinput#kanji_input_end	
TkKinput#kanji_input_start	(keys=nil)
TkKinput#kinput_attribute_config	(slot,value=Tk::None)
TkKinput#kinput_attribute_info	(slot=nil)
TkKinput#kinput_send_spot	
TkKinput#kinput_start	(style=Tk::None)
TkKinput.attribute_config	(win,slot,value=Tk::None)
TkKinput.attribute_info	(win,slot=nil)
TkKinput.input_end	(win)
TkKinput.input_start	(win,keys=nil)
TkKinput.send_spot	(win)
TkKinput.start	(win,style=Tk::None)
TkListbox#activate	(y)
TkListbox#clear	
TkListbox#curselection	
TkListbox#erase	
TkListbox#get	(index)	(first,last)
TkListbox#index	(idx)
TkListbox#nearest	(y)
TkListbox#selection_anchor	(index)
TkListbox#selection_clear	(first,last=Tk::None)
TkListbox#selection_includes	(index)
TkListbox#selection_set	(first,last=Tk::None)
TkListbox#size	
TkListbox#tagid	(id)
TkListbox#value	
TkListbox#value=	(vals)
TkMacResource#close	(rsrcRef)
TkMacResource#delete	(rsrcType,opts=nil)
TkMacResource#files	(rsrcRef=nil)
TkMacResource#list	(rsrcType,rsrcRef=nil)
TkMacResource#open	(fname,access=nil)
TkMacResource#read	(rsrcType,rsrcID,rsrcRef=nil)
TkMacResource#types	(rsrcRef=nil)
TkMacResource#write	(rsrcType,data,opts=nil)
TkMacResource.close	(rsrcRef)
TkMacResource.delete	(rsrcType,opts=nil)
TkMacResource.files	(rsrcRef=nil)
TkMacResource.list	(rsrcType,rsrcRef=nil)
TkMacResource.open	(fname,access=nil)
TkMacResource.package_name	
TkMacResource.read	(rsrcType,rsrcID,rsrcRef=nil)
TkMacResource.types	(rsrcRef=nil)
TkMacResource.write	(rsrcType,data,opts=nil)
TkManageFocus#focusNext	
TkManageFocus#focusPrev	
TkManageFocus.followsMouse	
TkManageFocus.next	(win)
TkManageFocus.prev	(win)
TkMenu#activate	(index)
TkMenu#add	(type,keys=nil)
TkMenu#add_cascade	(keys=nil)
TkMenu#add_checkbutton	(keys=nil)
TkMenu#add_command	(keys=nil)
TkMenu#add_radiobutton	(keys=nil)
TkMenu#add_separator	(keys=nil)
TkMenu#clone_menu	(*args)
TkMenu#delete	(first,last=nil)
TkMenu#index	(idx)
TkMenu#insert	(index,type,keys=nil)
TkMenu#invoke	(index)
TkMenu#menutype	(index)
TkMenu#popup	(x,y,index=nil)
TkMenu#post	(x,y)
TkMenu#postcascade	(index)
TkMenu#postcommand	(cmd=Proc.new)
TkMenu#set_focus	
TkMenu#tagid	(id)
TkMenu#tearoffcommand	(cmd=Proc.new)
TkMenu#unpost	
TkMenu#yposition	(index)
TkMenu.new_menuspec	(menu_spec,parent=nil,tearoff=false,keys=nil)
TkMenuClone#source_menu	
TkMenuClone.new	(src_menu,*args)
TkMenuEntryConfig#current_entryconfiginfo	(tagOrId,slot=nil)
TkMenuEntryConfig#entrycget	(tagOrId,option)
TkMenuEntryConfig#entryconfiginfo	(tagOrId,slot=nil)
TkMenuEntryConfig#entryconfigure	(tagorId,slot,value=Tk::None)
TkMenuSpec#_create_menu	(parent,menu_info,menu_name=nil,tearoff=false,default_opts=nil)
TkMenuSpec#_create_menu_for_menubar	(parent)
TkMenuSpec#_create_menubutton	(parent,menu_info,tearoff=false,default_opts=nil)
TkMenuSpec#_get_cascade_menus	(menu)
TkMenuSpec#_use_menubar?	(parent)
TkMenubar#[]	(index)
TkMenubar#add_menu	(menu_info)
TkMenubar.new	(parent=nil,spec=nil,options=nil)
TkMsgCatalog#[]	(*args)
TkMsgCatalog#def_unknown_proc	(cmd=Proc.new)
TkMsgCatalog#load	(dir)
TkMsgCatalog#load_rb	(dir)
TkMsgCatalog#load_tk	(dir)
TkMsgCatalog#locale	
TkMsgCatalog#locale=	(locale)
TkMsgCatalog#maxlen	(*src_strings)
TkMsgCatalog#mc	(*args)
TkMsgCatalog#method_missing	(id,*args)
TkMsgCatalog#msgcat_ext	
TkMsgCatalog#msgcat_ext=	(value)
TkMsgCatalog#preferences	
TkMsgCatalog#set_translation	(locale,src_str,trans_str=Tk::None,enc="utf-8")
TkMsgCatalog#set_translation_list	(locale,trans_list,enc="utf-8")
TkMsgCatalog#translate	(*args)
TkMsgCatalog.[]	(*args)
TkMsgCatalog.callback	(namespace,locale,src_str,*args)
TkMsgCatalog.def_unknown_proc	(cmd=Proc.new)
TkMsgCatalog.load	(dir)
TkMsgCatalog.load_rb	(dir)
TkMsgCatalog.load_tk	(dir)
TkMsgCatalog.locale	
TkMsgCatalog.locale=	(locale)
TkMsgCatalog.maxlen	(*src_strings)
TkMsgCatalog.mc	(*args)
TkMsgCatalog.new	(namespace=nil)
TkMsgCatalog.package_name	
TkMsgCatalog.preferences	
TkMsgCatalog.set_translation	(locale,src_str,trans_str=Tk::None,enc="utf-8")
TkMsgCatalog.set_translation_list	(locale,trans_list,enc="utf-8")
TkMsgCatalog.translate	(*args)
TkNamespace#__tk_call	(*args)
TkNamespace#__tk_call_with_enc	(*args)
TkNamespace#__tk_call_without_enc	(*args)
TkNamespace#children	
TkNamespace#code	(script=Proc.new)
TkNamespace#current	
TkNamespace#current_namespace	
TkNamespace#current_path	
TkNamespace#delete	
TkNamespace#eval	(cmd=Proc.new,*args)
TkNamespace#exist?	
TkNamespace#export	
TkNamespace#export_with_clear	
TkNamespace#force_import	
TkNamespace#forget	
TkNamespace#import	
TkNamespace#inscope	(script,*args)
TkNamespace#install_cmd	(cmd)
TkNamespace#ns_tk_call	(*args)
TkNamespace#ns_tk_call_with_enc	(*args)
TkNamespace#ns_tk_call_without_enc	(*args)
TkNamespace#parent	
TkNamespace#set_path	
TkNamespace#tk_call	(*args)
TkNamespace#tk_call_with_enc	(*args)
TkNamespace#tk_call_without_enc	(*args)
TkNamespace#upvar	(*var_pairs)
TkNamespace.children	(*args)
TkNamespace.code	(script=Proc.new)
TkNamespace.current	
TkNamespace.current_path	
TkNamespace.delete	(*ns_list)
TkNamespace.ensemble_configinfo	(cmd,slot=nil))
TkNamespace.ensemble_configure	(cmd,slot,value=Tk::None)
TkNamespace.ensemble_create	(*keys)
TkNamespace.ensemble_exist?	(cmd)
TkNamespace.eval	(namespace,cmd=Proc.new,*args)
TkNamespace.exist?	(ns)
TkNamespace.export	(*patterns)
TkNamespace.export_with_clear	(*patterns)
TkNamespace.force_import	(*patterns)
TkNamespace.forget	(*patterns)
TkNamespace.get_path	
TkNamespace.get_unknown_handler	
TkNamespace.id2obj	(id)
TkNamespace.import	(*patterns)
TkNamespace.inscope	(namespace,script,*args)
TkNamespace.new	(name=nil,parent=nil)
TkNamespace.origin	(cmd)
TkNamespace.parent	(namespace=Tk::None)
TkNamespace.qualifiers	(str)
TkNamespace.set_path	(*namespace_list)
TkNamespace.set_unknown_handler	(cmd=Proc.new)
TkNamespace.tail	(str)
TkNamespace.upvar	(namespace,*var_pairs)
TkNamespace.which	(name)
TkNamespace.which_command	(name)
TkNamespace.which_variable	(name)
TkNamespace::Ensemble#cget	(slot)
TkNamespace::Ensemble#configinfo	(slot=nil)
TkNamespace::Ensemble#exists?	
TkNamespace::Ensemble.exist?	(ensemble)
TkNamespace::Ensemble.new	(keys={})
TkNamespace::NsCode#call	(*args)
TkNamespace::NsCode#path	
TkNamespace::NsCode#to_eval	
TkNamespace::NsCode.new	(scope,use_obj_id=false)
TkNamespace::ScopeArgs#tk_call	(*args)
TkNamespace::ScopeArgs#tk_call_with_enc	(*args)
TkNamespace::ScopeArgs#tk_call_without_enc	(*args)
TkNamespace::ScopeArgs.new	(namespace,*args)
TkObject#destroy	
TkObject#epath	
TkObject#event_generate	(context,keys=nil)
TkObject#method_missing	(id,*args)
TkObject#path	
TkObject#tk_send	(cmd,*rest)
TkObject#tk_send_to_list	(cmd,*rest)
TkObject#tk_send_to_list_with_enc	(cmd,*rest)
TkObject#tk_send_to_list_without_enc	(cmd,*rest)
TkObject#tk_send_to_simplelist	(cmd,*rest)
TkObject#tk_send_to_simplelist_with_enc	(cmd,*rest)
TkObject#tk_send_to_simplelist_without_enc	(cmd,*rest)
TkObject#tk_send_with_enc	
TkObject#tk_send_without_enc	
TkObject#to_eval	
TkOptionDB.add	(pat,value,pri=Tk::None)
TkOptionDB.clear	
TkOptionDB.eval_under_random_base	(parent=nil,&block)
TkOptionDB.get	(win,name,klass)
TkOptionDB.new_proc_class	(klass,func,safe=4,add=false,parent=nil,&block)
TkOptionDB.new_proc_class_random	(klass,func,safe=4,add=false,&block)
TkOptionDB.read_entries	(file,f_enc=nil)
TkOptionDB.read_file	(file,pri=Tk::None)
TkOptionDB.read_with_encoding	(file,f_enc=nil,pri=Tk::None)
TkOptionDB.readfile	(file,pri=Tk::None)
TkOptionMenubutton#activate	(index)
TkOptionMenubutton#add	(value)
TkOptionMenubutton#current_entryconfiginfo	(index,key=nil)
TkOptionMenubutton#current_menuconfiginfo	(key=nil)
TkOptionMenubutton#delete	(index,last=Tk::None)
TkOptionMenubutton#entrycget	(index,key)
TkOptionMenubutton#entryconfiginfo	(index,key=nil)
TkOptionMenubutton#entryconfigure	(index,key,val=Tk::None)
TkOptionMenubutton#index	(index)
TkOptionMenubutton#insert	(index,value)
TkOptionMenubutton#invoke	(index)
TkOptionMenubutton#menu	
TkOptionMenubutton#menucget	(key)
TkOptionMenubutton#menuconfiginfo	(key=nil)
TkOptionMenubutton#menuconfigure	(key,val=Tk::None)
TkOptionMenubutton#value	
TkOptionMenubutton#value=	(val)
TkOptionMenubutton#yposition	(index)
TkOptionMenubutton.new	(*args)
TkOptionMenubutton::OptionMenu.new	(path)
TkPack.configure	(win1,win2,...winN,keys=nil)
TkPack.forget	(*args)
TkPack.info	(slave)
TkPack.pack	(win1,win2,...winN,keys=nil)
TkPack.propagate	(master,bool=None)
TkPack.slaves	(master)
TkPackage#add_path	(path)
TkPackage#forget	(package)
TkPackage#if_needed	(pkg,ver,*arg){....}
TkPackage#names	
TkPackage#present	(package,version=None)
TkPackage#present_exact	(package,version)
TkPackage#provide	(package,version=nil)
TkPackage#require	(package,version=None)
TkPackage#require_exact	(package,version)
TkPackage#unknown_proc	(*arg){....}
TkPackage#vcompare	(version1,version2)
TkPackage#versions	(package)
TkPackage#vsatisfies	(version1,version2)
TkPalette#recolorTree	(colors)
TkPalette.bisque	
TkPalette.darken	(color,percent)
TkPalette.recolorTree	(win,colors)
TkPalette.set	(*args)
TkPalette.setPalette	(*args)
TkPanedWindow#add	(*args)
TkPanedWindow#current_pane_configinfo	(win,key=nil)
TkPanedWindow#current_paneconfiginfo	(win,key=nil)
TkPanedWindow#del	(win,*wins)
TkPanedWindow#delete	(win,*wins)
TkPanedWindow#forget	(win,*wins)
TkPanedWindow#identify	(x,y)
TkPanedWindow#pane_config	(win,key,value=nil)
TkPanedWindow#pane_configinfo	(win,key=nil)
TkPanedWindow#panecget	(win,key)
TkPanedWindow#paneconfiginfo	(win,key=nil)
TkPanedWindow#paneconfigure	(win,key,value=nil)
TkPanedWindow#panes	
TkPanedWindow#proxy_coord	
TkPanedWindow#proxy_forget	
TkPanedWindow#proxy_place	(x,y)
TkPanedWindow#remove	(win,*wins)
TkPanedWindow#sash_coord	(index)
TkPanedWindow#sash_dragto	(index,x,y)
TkPanedWindow#sash_mark	(index,x,y)
TkPanedWindow#sash_place	(index,x,y)
TkPhotoImage#blank	
TkPhotoImage#cget	(option)
TkPhotoImage#copy	(src,*opts)
TkPhotoImage#data	(keys={})
TkPhotoImage#get	(x,y)
TkPhotoImage#get_transparency	(x,y)
TkPhotoImage#put	(data,*opts)
TkPhotoImage#read	(file,*opts)
TkPhotoImage#redither	
TkPhotoImage#set_transparency	(x,y,st)
TkPhotoImage#write	(file,*opts)
TkPhotoImage.new	(*args)
TkPlace.configinfo	(win,slot=nil)
TkPlace.configure	(win,slot,value=Tk::None)
TkPlace.current_configinfo	(win,slot=nil)
TkPlace.forget	(win)
TkPlace.info	(win)
TkPlace.place	(win,slot,value=Tk::None)
TkPlace.slaves	(master)
TkRTTimer#cancel	
TkRTTimer#cb_call	
TkRTTimer#continue	(wait=nil)
TkRTTimer#set_interval	(interval)
TkRTTimer#set_next_callback	(args)
TkRTTimer#start	(*args){....}
TkRTTimer#stop	
TkRTTimer.new	(*args){...}
TkRadioButton#deselect	
TkRadioButton#get_value	
TkRadioButton#select	
TkRadioButton#set_value	(val)
TkRoot#add_menu	(menu_info,tearoff=false,opts=nil)
TkRoot#add_menubar	(menu_spec,tearoff=false,opts=nil)
TkRoot#path	
TkRoot.destroy	
TkRoot.new	(keys=nil,&block)
TkRoot.to_eval	
TkScale#command	(cmd=Proc.new)
TkScale#configure	(slot,value=Tk::None)
TkScale#configure_cmd	(slot,value)
TkScale#coords	(value=Tk::None)
TkScale#get	(x=Tk::None,y=Tk::None)
TkScale#identify	(x,y)
TkScale#set	(value)
TkScale#value	
TkScale#value=	(value)
TkScrollbar#activate	(element=Tk::None)
TkScrollbar#assign	(*wins)
TkScrollbar#assigned_list	
TkScrollbar#configure	(*args)
TkScrollbar#delta	(deltax,deltay)
TkScrollbar#fraction	(x,y)
TkScrollbar#get	
TkScrollbar#identify	(x,y)
TkScrollbar#propagate_set	(src_win,first,last)
TkScrollbar#set	(first,last)
TkSelection#clear	(sel=nil)
TkSelection#get	(keys=nil)
TkSelection#get_owner	(sel=nil)
TkSelection#handle	(func=Proc.new,keys=nil,&block)
TkSelection#set_owner	(keys=nil)
TkSelection.clear	(sel=nil)
TkSelection.clear_on_display	(win,sel=nil)
TkSelection.get	(keys=nil)
TkSelection.get_on_display	(win,keys=nil)
TkSelection.get_owner	(sel=nil)
TkSelection.get_owner_on_display	
TkSelection.handle	(win,func=Proc.new,keys=nil,&block)
TkSelection.set_owner	(win,keys=nil)
TkSpinbox#__validation_class_list	
TkSpinbox#command	
TkSpinbox#identify	(x,y)
TkSpinbox#set	(str)
TkSpinbox#spindown	
TkSpinbox#spinup	
TkSpinbox::SpinCommand._config_keys	
TkSpinbox::SpinCommand::ValidateArgs#current	
TkSpinbox::SpinCommand::ValidateArgs#direction	
TkSpinbox::SpinCommand::ValidateArgs#widget	
TkSpinbox::SpinCommand::ValidateArgs.ret_val	(val)
TkSystemMenu#initialize	(parent,keys=nil)
TkText#__destroy_hook__	
TkText#_addcmd	(cmd)
TkText#_addtag	(name,obj)
TkText#add_tag	(tag,index1,index2=Tk::None)
TkText#addtag	(tag,index1,index2=Tk::None)
TkText#at	(x,y)
TkText#backspace	
TkText#bbox	(index)
TkText#clear	
TkText#compare	(idx1,op,idx2)
TkText#count	(idx1,idx2,*opts)
TkText#count_info	(idx1,idx2,update=true)
TkText#current_image_configinfo	(index,slot=nil)
TkText#debug	
TkText#debug=	(boolean)
TkText#delete_tag	(*tags)
TkText#deltag	(*tags)
TkText#destroy	
TkText#dlineinfo	(index)
TkText#dump	(type_info,*index){...}
TkText#dump_all	(*index){...}
TkText#dump_image	(*index){...}
TkText#dump_mark	(*index){...}
TkText#dump_tag	(*index){...}
TkText#dump_text	(*index){...}
TkText#dump_window	(*index){...}
TkText#edit_redo	
TkText#edit_reset	
TkText#edit_separator	
TkText#edit_undo	
TkText#erase	
TkText#get_displaychars	(*index)
TkText#image_cget	(index,slot)
TkText#image_configinfo	(index,slot=nil)
TkText#image_configure	(index,slot,value=Tk::None)
TkText#image_names	
TkText#index	(idx)
TkText#init_instance_variable	
TkText#insert	(index,chars,*tags)
TkText#mark_gravity	(mark,direction=nil)
TkText#mark_names	
TkText#mark_next	(index)
TkText#mark_previous	(index)
TkText#mark_set	(mark,index)
TkText#mark_unset	(*marks)
TkText#modified	(mode)
TkText#modified=	(mode)
TkText#modified?	
TkText#next_mark	(index)
TkText#peer_names	
TkText#previous_mark	(index)
TkText#replace	(idx1,idx2,*opts)
TkText#rsearch	(pat,start,stop=Tk::None)
TkText#rsearch_with_length	(pat,start,stop=Tk::None)
TkText#search	(pat,start,stop=Tk::None)
TkText#search_with_length	(pat,start,stop=Tk::None)
TkText#set_current	(index)
TkText#set_insert	(index)
TkText#set_mark	(mark,index)
TkText#tag_add	(tag,index1,index2=Tk::None)
TkText#tag_bind	(tag,seq,*args)
TkText#tag_bind_append	(tag,seq,*args)
TkText#tag_bind_remove	(tag,seq)
TkText#tag_bindinfo	(tag,context=nil)
TkText#tag_delete	(*tags)
TkText#tag_lower	(tag,below=Tk::None)
TkText#tag_names	(index=Tk::None)
TkText#tag_nextrange	(tag,first,last=Tk::None)
TkText#tag_prevrange	(tag,first,last=Tk::None)
TkText#tag_raise	(tag,above=Tk::None)
TkText#tag_ranges	(tag)
TkText#tag_remove	(tag,*indices)
TkText#tagid2obj	(tagid)
TkText#text_copy	
TkText#text_cut	
TkText#text_paste	
TkText#tksearch	(*args)
TkText#tksearch_with_count	(*args)
TkText#unset_mark	(*marks)
TkText#value	
TkText#value=	(val)
TkText#window_names	
TkText#xview_pickplace	(index)
TkText#yview_pickplace	(index)
TkText.at	(x,y)
TkText.new	(*args){...}
TkText::IndexModMethods#+	(mod)
TkText::IndexModMethods#-	(mod)
TkText::IndexModMethods#any_char	(mod)
TkText::IndexModMethods#any_chars	(mod)
TkText::IndexModMethods#any_indices	(mod)
TkText::IndexModMethods#any_line	(mod)
TkText::IndexModMethods#any_lines	(mod)
TkText::IndexModMethods#char	(mod)
TkText::IndexModMethods#chars	(mod)
TkText::IndexModMethods#display_char	(mod)
TkText::IndexModMethods#display_chars	(mod)
TkText::IndexModMethods#display_indices	(mod)
TkText::IndexModMethods#display_line	(mod)
TkText::IndexModMethods#display_lineend	
TkText::IndexModMethods#display_lines	(mod)
TkText::IndexModMethods#display_linestart	
TkText::IndexModMethods#display_wordend	
TkText::IndexModMethods#display_wordstart	
TkText::IndexModMethods#indices	(mod)
TkText::IndexModMethods#line	(mod)
TkText::IndexModMethods#lineend	
TkText::IndexModMethods#lines	(mod)
TkText::IndexModMethods#linestart	
TkText::IndexModMethods#wordend	
TkText::IndexModMethods#wordstart	
TkText::IndexString#id	
TkText::IndexString.at	(x,y)
TkText::IndexString.new	(str)
TkText::Peer.new	(text,parent=nil,keys={})
TkTextImage#[]	(slot)
TkTextImage#[]=	(slot,value)
TkTextImage#cget	(slot)
TkTextImage#configinfo	(slot=nil)
TkTextImage#configure	(slot,value=Tk::None)
TkTextImage#current_configinfo	(slot=nil)
TkTextImage#id	
TkTextImage#image	
TkTextImage#image=	(value)
TkTextImage#mark	
TkTextImage.new	(parent,index,keys)
TkTextMark#destroy	
TkTextMark#exist?	
TkTextMark#gravity	
TkTextMark#gravity=	(direction)
TkTextMark#id	
TkTextMark#next	(index=nil)
TkTextMark#pos	
TkTextMark#pos=	(where)
TkTextMark#previous	(index=nil)
TkTextMark#set	(where)
TkTextMark#unset	
TkTextMark.id2obj	(text,id)
TkTextMark.new	(parent,index)
TkTextMarkAnchor.new	(parent,*args)
TkTextMarkCurrent.new	(parent,*args)
TkTextMarkInsert.new	(parent,*args)
TkTextNamedMark.new	(parent,name,*args)
TkTextNamedTag.new	(parent,name,*args)
TkTextTag#[]	(key)
TkTextTag#[]=	(key,val)
TkTextTag#add	(*indices)
TkTextTag#bind	(seq,*args)
TkTextTag#bind_append	(seq,*args)
TkTextTag#bind_remove	(seq)
TkTextTag#bindinfo	(context=nil)
TkTextTag#cget	(key)
TkTextTag#configinfo	(key=nil)
TkTextTag#configure	(key,val=Tk::None)
TkTextTag#current_configinfo	(key=nil)
TkTextTag#destroy	
TkTextTag#exist?	
TkTextTag#first	
TkTextTag#id	
TkTextTag#last	
TkTextTag#lower	(below=Tk::None)
TkTextTag#nextrange	(first,last=Tk::None)
TkTextTag#prevrange	(first,last=Tk::None)
TkTextTag#raise	(above=Tk::None)
TkTextTag#ranges	
TkTextTag#remove	(*indices)
TkTextTag.id2obj	(text,id)
TkTextTag.new	(parent,*args)
TkTextTagConfig#current_tag_configinfo	(tagOrId,slot=nil)
TkTextTagConfig#current_window_configinfo	(tagOrId,slot=nil)
TkTextTagConfig#tag_cget	(tagOrId,option)
TkTextTagConfig#tag_configinfo	(tagOrId,slot=nil)
TkTextTagConfig#tag_configure	(tagOrId,slot,value=Tk::None)
TkTextTagConfig#window_cget	(tagOrId,option)
TkTextTagConfig#window_configinfo	(tagOrId,slot=nil)
TkTextTagConfig#window_configure	(tagOrId,slot,value=Tk::None)
TkTextTagSel.new	(parent,*args)
TkTextWin#bbox	(index)
TkTextWin#delete	(first,last=Tk::None)
TkTextWin#get	(*index)
TkTextWin#insert	(index,*args)
TkTextWin#scan_dragto	(x,y)
TkTextWin#scan_mark	(x,y)
TkTextWin#see	(index)
TkTextWindow#[]	(slot)
TkTextWindow#[]=	(slot,value)
TkTextWindow#cget	(slot)
TkTextWindow#configinfo	
TkTextWindow#configure	(slot,value=Tk::None)
TkTextWindow#create	
TkTextWindow#create=	(value)
TkTextWindow#current_configinfo	(slot=nil)
TkTextWindow#id	
TkTextWindow#mark	
TkTextWindow#window	
TkTextWindow#window=	(value)
TkTextWindow.new	(parent,index,keys={})
TkTimer#add_procs	(*procs)
TkTimer#after_id	
TkTimer#after_script	
TkTimer#cancel	
TkTimer#cancel_on_exception=	(mode)
TkTimer#cancel_on_exception?	
TkTimer#cb_call	
TkTimer#continue	(wait=nil)
TkTimer#current_args	
TkTimer#current_interval	
TkTimer#current_proc	
TkTimer#current_sleep	
TkTimer#current_status	
TkTimer#delete_at	(n)
TkTimer#delete_procs	(*procs)
TkTimer#do_callback	
TkTimer#eventloop_tkwait	
TkTimer#eventloop_wait	(check_root=false)
TkTimer#get_procs	
TkTimer#info	
TkTimer#loop_exec	
TkTimer#loop_exec=	
TkTimer#loop_rest	
TkTimer#loop_rest=	(rest)
TkTimer#reset	(*reset_args)
TkTimer#restart	(*restart_args){....}
TkTimer#return_value	
TkTimer#running?	
TkTimer#set_callback	(sleep,args=nil)
TkTimer#set_interval	(interval)
TkTimer#set_next_callback	(args)
TkTimer#set_procs	(interval,loop_exec,*procs)
TkTimer#set_start_proc	(sleep=nil,init_proc=nil,*init_args){....}
TkTimer#skip	
TkTimer#start	(*init_args){....}
TkTimer#stop	
TkTimer#thread_tkwait	
TkTimer#thread_wait	(check_root=false)
TkTimer#tkwait	(on_thread=true)
TkTimer#wait	(on_thread=true,check_root=false)
TkTimer.callback	(obj_id)
TkTimer.info	(obj=nil)
TkTimer.new	(*args){....}
TkTimer.start	(*args){....}
TkToplevel#add_menu	(menu_info,tearoff=false,opts=nil)
TkToplevel#add_menubar	(menu_spec,tearoff=false,opts=nil)
TkToplevel#specific_class	
TkToplevel.bind	(*args){...}
TkToplevel.bind_append	(*args){...}
TkToplevel.bind_remove	(*args)
TkToplevel.bindinfo	(*args)
TkToplevel.database_class	
TkToplevel.database_classname	
TkToplevel.new	(parent=nil,screen=nil,classname=nil,keys=nil)
TkTreatFont#asciifont_configure	(ltn,keys=nil)
TkTreatFont#asciifont_copy	(win,wintag=nil,winkey=nil,targetkey=nil)
TkTreatFont#font_configinfo	(key=nil)
TkTreatFont#font_configure	(slot)
TkTreatFont#font_copy	(win,wintag=nil,winkey=nil,targetkey=nil)
TkTreatFont#fontobj	(key=nil)
TkTreatFont#kanjifont_configure	(knj,keys=nil)
TkTreatFont#kanjifont_copy	(win,wintag=nil,winkey=nil,targetkey=nil)
TkTreatFont#latinfont_configure	(ltn,keys=nil)
TkTreatFont#latinfont_copy	(win,wintag=nil,winkey=nil,targetkey=nil)
TkTreatItemFont#asciitagfont_configure	(tagOrId,ltn,keys=nil)
TkTreatItemFont#asciitagfont_copy	(tagOrId,win,wintag=nil,winkey=nil,targetkey=nil)
TkTreatItemFont#kanjifont_copy	(tagOrId,win,wintag=nil,winkey=nil,targetkey=nil)
TkTreatItemFont#kanjitagfont_configure	(tagOrId,knj,keys=nil)
TkTreatItemFont#latintagfont_configure	(tagOrId,ltn,keys=nil)
TkTreatItemFont#latintagfont_copy	(tagOrId,win,wintag=nil,winkey=nil,targetkey=nil)
TkTreatItemFont#tagfont_configinfo	(tagOrId,key=nil)
TkTreatItemFont#tagfont_configure	(tagOrId,slot)
TkTreatItemFont#tagfont_copy	(tagOrId,win,wintag=nil,winkey=nil,targetkey=nil)
TkTreatItemFont#tagfontobj	(tagOrId,key=nil)
TkTreatTagFont#asciifont_configure	(ltn,keys=nil)
TkTreatTagFont#asciifont_copy	(win,wintag=nil)
TkTreatTagFont#font_configinfo	
TkTreatTagFont#font_configure	(slot)
TkTreatTagFont#font_copy	(win,wintag=nil)
TkTreatTagFont#kanjifont_configure	(knj,keys=nil)
TkTreatTagFont#kanjifont_copy	(win,wintag=nil)
TkTreatTagFont#latinfont_configure	(ltn,keys=nil)
TkTreatTagFont#latinfont_copy	(win,wintag=nil)
TkUtil#_conv_args	(*args)
TkUtil#_fromUTF8	(*args)
TkUtil#_get_eval_enc_str	(obj)
TkUtil#_get_eval_string	(*args)
TkUtil#_symbolkey2str	(keys)
TkUtil#_toUTF8	(*args)
TkUtil#bool	(value)
TkUtil#hash_kv	(*args)
TkUtil#num_or_str	(value)
TkUtil#number	(value)
TkUtil#string	(value)
TkUtil._conv_args	(*args)
TkUtil._get_eval_enc_str	(obj)
TkUtil._get_eval_string	(*args)
TkUtil._symbolkey2str	(keys)
TkUtil.bool	(value)
TkUtil.callback	(*args)
TkUtil.eval_cmd	(*args)
TkUtil.hash_kv	(*args)
TkUtil.install_cmd	(*args)
TkUtil.num_or_str	(value)
TkUtil.number	(value)
TkUtil.string	(value)
TkUtil.uninstall_cmd	(cmd_id)
TkUtil::CallbackSubst._define_attribute_aliases	(tbl)
TkUtil::CallbackSubst._get_all_subst_keys	
TkUtil::CallbackSubst._get_extra_args_tbl	
TkUtil::CallbackSubst._get_subst_key	(str)
TkUtil::CallbackSubst._setup_subst_table	(key_inf,proc_inf)
TkUtil::CallbackSubst.inspect	
TkUtil::CallbackSubst.ret_val	(val)
TkUtil::CallbackSubst.scan_args	(arg_key,val_key)
TkUtil::CallbackSubst.subst_arg	(*args)
TkValidateCommand#_initialize_for_cb_class	(klass,cmd=Proc.new,*args)
TkValidateCommand#to_eval	
TkValidateCommand._config_keys	
TkValidateCommand.new	(cmd=Proc.new,*args)
TkValidateCommand::ValidateArgs.ret_val	(val)
TkValidation#__validation_class_list	
TkVarAccess.new	(name,*args)
TkVarAccess.new_hash	(name,*args)
TkVariable#%	(other)
TkVariable#&	(other)
TkVariable#*	(other)
TkVariable#**	(other)
TkVariable#+	(other)
TkVariable#-	(other)
TkVariable#/	(other)
TkVariable#<=>	(other)
TkVariable#==	(other)
TkVariable#=~	(other)
TkVariable#[]	(index)
TkVariable#[]=	(index,val)
TkVariable#bool	
TkVariable#bool=	
TkVariable#bool_element	
TkVariable#bool_type=	
TkVariable#clear	
TkVariable#coerce	(other)
TkVariable#default_element_value_type	(idxs)
TkVariable#default_proc	(cmd=Proc.new)
TkVariable#default_value	(val=nil)	(val=nil){....}
TkVariable#default_value=	
TkVariable#default_value_type	
TkVariable#default_value_type=	
TkVariable#element_lappend	(idxs,*elems)
TkVariable#element_lget	(elem_idxs,idx)
TkVariable#element_lget_f	(elem_idxs,idx)
TkVariable#element_lget_i	(elem_idxs,idx)
TkVariable#element_lindex	(elem_idxs,idx)
TkVariable#element_lset	(elem_idxs,idx,val)
TkVariable#element_to_a	(*idxs)
TkVariable#element_to_f	(*idxs)
TkVariable#element_to_i	(*idxs)
TkVariable#element_to_s	(*idxs)
TkVariable#element_to_sym	(*idxs)
TkVariable#eventloop_tkwait	
TkVariable#eventloop_wait	(check_root=false)
TkVariable#exist?	(*elems)
TkVariable#id	
TkVariable#is_hash?	
TkVariable#is_scalar?	
TkVariable#keys	
TkVariable#lappend	(*elems)
TkVariable#lget	(idx)
TkVariable#lget_f	(idx)
TkVariable#lget_i	(idx)
TkVariable#lindex	(idx)
TkVariable#list	
TkVariable#list=	
TkVariable#list_element	(*idxs)
TkVariable#list_type=	
TkVariable#lset	(idx,val)
TkVariable#nonzero?	
TkVariable#numeric	
TkVariable#numeric=	
TkVariable#numeric_element	(*idxs)
TkVariable#numeric_type=	
TkVariable#numlist	
TkVariable#numlist=	
TkVariable#numlist_element	(*idxs)
TkVariable#numlist_type=	
TkVariable#procedure	
TkVariable#procedure=	
TkVariable#procedure_element	(*idxs)
TkVariable#procedure_type=	
TkVariable#ref	(*idxs)
TkVariable#remove	(elem=nil)
TkVariable#set_bool	
TkVariable#set_bool_element	
TkVariable#set_bool_element_type	(idxs,val)
TkVariable#set_bool_type	(val)
TkVariable#set_default_element_value_type	(idxs,type)
TkVariable#set_default_value	(val)
TkVariable#set_default_value_type	(type)
TkVariable#set_element_value	(idxs,val)
TkVariable#set_element_value_type	(idxs,val)
TkVariable#set_list	(val)
TkVariable#set_list_element	(idxs,val)
TkVariable#set_list_element_type	(idxs,val)
TkVariable#set_list_type	(val)
TkVariable#set_numeric	(val)
TkVariable#set_numeric_element	(idxs,val)
TkVariable#set_numeric_element_type	(idxs,val)
TkVariable#set_numeric_type	(val)
TkVariable#set_numlist	(val)
TkVariable#set_numlist_element	(idxs,val)
TkVariable#set_numlist_element_type	(idxs,val)
TkVariable#set_numlist_type	(val)
TkVariable#set_procedure	(cmd)
TkVariable#set_procedure_element	(idxs,cmd)
TkVariable#set_procedure_element_type	(idxs,cmd)
TkVariable#set_procedure_type	(cmd)
TkVariable#set_string	(val)
TkVariable#set_string_element	(idxs,val)
TkVariable#set_string_element_type	(idxs,val)
TkVariable#set_string_type	(val)
TkVariable#set_symbol	(val)
TkVariable#set_symbol_element	(idxs,val)
TkVariable#set_symbol_element_type	(idxs,val)
TkVariable#set_symbol_type	(val)
TkVariable#set_value	(val)
TkVariable#set_value_type	(val)
TkVariable#set_variable	(var)
TkVariable#set_variable_element	(*idxs)
TkVariable#set_variable_element_type	(idxs,var)
TkVariable#set_variable_type	(var)
TkVariable#set_window	(win)
TkVariable#set_window_element	(idxs,win)
TkVariable#set_window_element_type	(idxs,win)
TkVariable#set_window_type	(win)
TkVariable#size	
TkVariable#string	
TkVariable#string=	
TkVariable#string_element	(*idxs)
TkVariable#string_type=	
TkVariable#symbol	
TkVariable#symbol=	
TkVariable#symbol_element	
TkVariable#symbol_type=	
TkVariable#thread_tkwait	
TkVariable#thread_wait	(check_root=false)
TkVariable#tkwait	(on_thread=true)
TkVariable#to_a	
TkVariable#to_eval	
TkVariable#to_f	
TkVariable#to_i	
TkVariable#to_s	
TkVariable#to_sym	
TkVariable#trace	(opts,cmd)
TkVariable#trace_callback	(elem,op)
TkVariable#trace_element	(elem,opts,cmd)
TkVariable#trace_vdelete	(opts,cmd)
TkVariable#trace_vdelete_for_element	(elem,opts,cmd)
TkVariable#trace_vinfo	
TkVariable#undef_default	
TkVariable#unset	(elem=nil)
TkVariable#update	(hash)
TkVariable#value	
TkVariable#value=	(val)
TkVariable#value_type=	
TkVariable#variable	
TkVariable#variable=	
TkVariable#variable_element	(*idxs)
TkVariable#variable_type=	
TkVariable#wait	
TkVariable#window	
TkVariable#window=	
TkVariable#window_element	(*idxs)
TkVariable#window_type=	
TkVariable#zero?	
TkVariable#|	(other)
TkVariable.callback	(args)
TkVariable.new	(val="")
TkVariable.new_hash	(val={})
TkVirtualEvent#add	(*sequences)
TkVirtualEvent#delete	(*sequences)
TkVirtualEvent#info	
TkVirtualEvent.getobj	(event)
TkVirtualEvent.info	
TkVirtualEvent.new	(*sequences)
TkVirtualEvent::PreDefVirtEvent.new	(event,*sequences)
TkWarning.new	(*args)
TkWarning.show	(*args)
TkWarningObj#show	(mes=nil)
TkWarningObj.new	(parent=nil,mes=nil)
TkWinDDE#async_eval	(topic,cmd,*args)
TkWinDDE#async_execute	(service,topic,data)
TkWinDDE#binary_request	(service,topic,item)
TkWinDDE#eval	(topic,cmd,*args)
TkWinDDE#execute	(service,topic,data)
TkWinDDE#poke	(service,topic,item,data)
TkWinDDE#request	(service,topic,item)
TkWinDDE#servername	(*args)
TkWinDDE#services	(service,topic)
TkWinDDE.async_execute	(service,topic,data)
TkWinDDE.eval	(topic,cmd,*args)
TkWinDDE.execute	(service,topic,data)
TkWinDDE.package_name	
TkWinDDE.poke	(service,topic,item,data)
TkWinDDE.request	(service,topic,item)
TkWinDDE.servername	(*args)
TkWinDDE.services	(service,topic)
TkWinRegistry#broadcast	(keynam,timeout=nil)
TkWinRegistry#delete	(keynam,valnam=Tk::None)
TkWinRegistry#get	(keynam,valnam)
TkWinRegistry#keys	(keynam,pattern=nil)
TkWinRegistry#set	(keynam,valnam=Tk::None,data=Tk::None,dattype=Tk::None)
TkWinRegistry#type	(keynam,valnam)
TkWinRegistry#values	(keynam,pattern=nil)
TkWinRegistry.delete	(keynam,valnam=Tk::None)
TkWinRegistry.get	(keynam,valnam)
TkWinRegistry.keys	(keynam,pattern=nil)
TkWinRegistry.set	(keynam,valnam=Tk::None,data=Tk::None,dattype=Tk::None)
TkWinRegistry.type	(keynam,valnam)
TkWinRegistry.values	(keynam,pattern=nil)
TkWindow#bind_class	
TkWindow#bindtags	(taglist=nil)
TkWindow#bindtags=	(taglist)
TkWindow#bindtags_shift	
TkWindow#bindtags_unshift	(tag)
TkWindow#caret	(keys=nil)
TkWindow#colormodel	(model=Tk::None)
TkWindow#command	(cmd=nil,&block)
TkWindow#current_grab	
TkWindow#database_class	
TkWindow#database_classname	
TkWindow#destroy	
TkWindow#eventloop_tkwait	
TkWindow#eventloop_tkwait_destroy	
TkWindow#eventloop_tkwait_visibility	
TkWindow#eventloop_tkwait_window	
TkWindow#eventloop_wait	
TkWindow#eventloop_wait_destroy	
TkWindow#eventloop_wait_visibility	
TkWindow#eventloop_wait_window	
TkWindow#exist?	
TkWindow#focus	(force=false)
TkWindow#grab	(opt=nil)
TkWindow#grab_current	
TkWindow#grab_release	
TkWindow#grab_set	
TkWindow#grab_set_global	
TkWindow#grab_status	
TkWindow#grid	(keys=nil)
TkWindow#grid_bbox	(*args)
TkWindow#grid_columnconfig	(index,keys)
TkWindow#grid_columnconfiginfo	(index,slot=nil)
TkWindow#grid_columnconfigure	(index,keys)
TkWindow#grid_config	(slot,value=Tk::None)
TkWindow#grid_configure	(slot,value=Tk::None)
TkWindow#grid_forget	
TkWindow#grid_in	(target,kers=nil)
TkWindow#grid_info	
TkWindow#grid_location	(x,y)
TkWindow#grid_propagate	(mode=Tk::None)
TkWindow#grid_remove	
TkWindow#grid_rowconfig	(index,keys)
TkWindow#grid_rowconfiginfo	(index,slot=nil)
TkWindow#grid_rowconfigure	(index,keys)
TkWindow#grid_size	
TkWindow#grid_slaves	(args)
TkWindow#lower	(below=Tk::None)
TkWindow#lower_window	(below=Tk::None)
TkWindow#pack	(keys=nil)
TkWindow#pack_config	(slot,value=Tk::None)
TkWindow#pack_configure	(slot,value=Tk::None)
TkWindow#pack_forget	
TkWindow#pack_in	(target,keys=nil)
TkWindow#pack_info	
TkWindow#pack_propagate	(mode=Tk::None)
TkWindow#pack_slaves	
TkWindow#place	(keys)
TkWindow#place_config	(slot,value=Tk::None)
TkWindow#place_configinfo	(slot=nil)
TkWindow#place_configure	(slot,value=Tk::None)
TkWindow#place_forget	
TkWindow#place_in	(target,keys=nil)
TkWindow#place_info	
TkWindow#place_slaves	
TkWindow#raise	(above=Tk::None)
TkWindow#raise_window	(above=Tk::None)
TkWindow#release_grab	
TkWindow#set_focus	(force=false)
TkWindow#set_global_grab	
TkWindow#set_grab	
TkWindow#thread_tkwait	
TkWindow#thread_tkwait_destroy	
TkWindow#thread_tkwait_visibility	
TkWindow#thread_tkwait_window	
TkWindow#thread_wait	
TkWindow#thread_wait_destroy	
TkWindow#thread_wait_visibility	
TkWindow#thread_wait_window	
TkWindow#tkwait	(on_thread=true)
TkWindow#tkwait_destroy	(on_thread=true)
TkWindow#tkwait_window	(on_thread=true)
TkWindow#ungrid	
TkWindow#unpack	
TkWindow#unplace	
TkWindow#wait	(on_thread=true)
TkWindow#wait_destroy	(on_thread=true)
TkWindow#wait_visibility	(on_thread=true)
TkWindow#wait_window	(on_thread=true)
TkWindow.database_class	
TkWindow.database_classname	
TkWindow.new	(parent=nil,keys=nil)
TkWindow.to_eval	
TkWinfo#winfo_appname	
TkWinfo#winfo_atom	(name)
TkWinfo#winfo_atomname	(id)
TkWinfo#winfo_cells	
TkWinfo#winfo_children	
TkWinfo#winfo_class	
TkWinfo#winfo_classname	
TkWinfo#winfo_colormapfull	
TkWinfo#winfo_containing	(x,y)
TkWinfo#winfo_depth	
TkWinfo#winfo_exist?	
TkWinfo#winfo_fpixels	(dist)
TkWinfo#winfo_geometry	
TkWinfo#winfo_height	
TkWinfo#winfo_id	
TkWinfo#winfo_interps	
TkWinfo#winfo_manager	
TkWinfo#winfo_mapped?	
TkWinfo#winfo_parent	
TkWinfo#winfo_pixels	(dist)
TkWinfo#winfo_pointerx	
TkWinfo#winfo_pointerxy	
TkWinfo#winfo_pointery	
TkWinfo#winfo_reqheight	
TkWinfo#winfo_reqwidth	
TkWinfo#winfo_rgb	(color)
TkWinfo#winfo_rootx	
TkWinfo#winfo_rooty	
TkWinfo#winfo_screen	
TkWinfo#winfo_screencells	
TkWinfo#winfo_screendepth	
TkWinfo#winfo_screenheight	
TkWinfo#winfo_screenmmheight	
TkWinfo#winfo_screenmmwidth	
TkWinfo#winfo_screenvisual	
TkWinfo#winfo_screenwidth	
TkWinfo#winfo_server	
TkWinfo#winfo_toplevel	
TkWinfo#winfo_viewable	
TkWinfo#winfo_visual	
TkWinfo#winfo_visualid	
TkWinfo#winfo_visualsavailable	(includeids=false)
TkWinfo#winfo_vrootheight	
TkWinfo#winfo_vrootwidth	
TkWinfo#winfo_vrootx	
TkWinfo#winfo_vrooty	
TkWinfo#winfo_widget	(id)
TkWinfo#winfo_width	
TkWinfo#winfo_x	
TkWinfo#winfo_y	
TkWinfo.appname	(win)
TkWinfo.atom	(name,win=nil)
TkWinfo.atomname	(id,win=nil)
TkWinfo.cells	(win)
TkWinfo.children	(win)
TkWinfo.classname	(win)
TkWinfo.colormapfull	(win)
TkWinfo.containing	(root_x,root_y,win=nil)
TkWinfo.depth	(win)
TkWinfo.exist?	(win)
TkWinfo.fpixels	(win,dist)
TkWinfo.geometry	(win)
TkWinfo.height	(win)
TkWinfo.id	(win)
TkWinfo.interps	(win=nil)
TkWinfo.manager	(win)
TkWinfo.mapped?	(win)
TkWinfo.parent	(win)
TkWinfo.pixels	(win.dist)
TkWinfo.pointerx	(win)
TkWinfo.pointerxy	(win)
TkWinfo.pointery	(win)
TkWinfo.reqheight	(win)
TkWinfo.reqwidth	(win)
TkWinfo.rgb	(win.color)
TkWinfo.rootx	(win)
TkWinfo.rooty	(win)
TkWinfo.screen	(win)
TkWinfo.screencells	(win)
TkWinfo.screendepth	(win)
TkWinfo.screenheight	(win)
TkWinfo.screenmmheight	(win)
TkWinfo.screenmmwidth	(win)
TkWinfo.screenvisual	(win)
TkWinfo.screenwidth	(win)
TkWinfo.server	(win)
TkWinfo.toplevel	(win)
TkWinfo.viewable	(win)
TkWinfo.visual	(win)
TkWinfo.visualid	(win)
TkWinfo.visualsavailable	(win,includeids=false)
TkWinfo.vrootheight	(win)
TkWinfo.vrootwidth	(win)
TkWinfo.vrootx	(win)
TkWinfo.vrooty	(win)
TkWinfo.widget	(win)
TkWinfo.width	(win)
TkWinfo.x	(win)
TkWinfo.y	(win)
TkXIM#caret	(keys=nil)
TkXIM#imconfiginfo	(slot=nil)
TkXIM#imconfigure	(slot,value=Tk::None)
TkXIM#useinputmethods	(value=Tk::None)
TkXIM.caret	(window,keys=nil)
TkXIM.configinfo	(window,slot=nil)
TkXIM.configure	(window,slot,value=None)
TkXIM.current_configinfo	(win,slot=nil)
TkXIM.useinputmethods	(window=nil,value=nil)
TkXIM.useinputmethods_displayof	(window,value=Tk::None)
TkcGroup#add	(*tags)
TkcGroup#exclude	(*tags)
TkcGroup#include	(*tags)
TkcGroup.new	(parent,*args)
TkcItem#delete	
TkcItem#destroy	
TkcItem#exist?	
TkcItem#id	
TkcItem#remove	
TkcItem.create	(canvas,*args)
TkcItem.id2obj	(canvas,id)
TkcItem.new	(parent,*args)
TkcItem.type2class	(type)
TkcTag#above	(target)
TkcTag#all	
TkcTag#below	(target)
TkcTag#closest	(x,y,halo=Tk::None,start=Tk::None)
TkcTag#delete	
TkcTag#destroy	
TkcTag#enclosed	(x1,y1,x2,y2)
TkcTag#exist?	
TkcTag#id	
TkcTag#overlapping	(x1,y1,x2,y2)
TkcTag#remove	
TkcTag#set_to_above	(target)
TkcTag#set_to_all	
TkcTag#set_to_below	(target)
TkcTag#set_to_closest	(x,y,halo=Tk::None,start=Tk::None)
TkcTag#set_to_enclosed	(x1,y1,x2,y2)
TkcTag#set_to_overlapping	(x1,y1,x2,y2)
TkcTag#set_to_withtag	(target)
TkcTag#withtag	(target)
TkcTag.id2obj	(canvas,id)
TkcTag.new	(parent,mode=nil,*args)
TkcTagAccess#&	(tag)
TkcTagAccess#-@	
TkcTagAccess#^	(tag)
TkcTagAccess#addtag	(tag)
TkcTagAccess#bbox	
TkcTagAccess#bind	(seq,*args)
TkcTagAccess#bind_append	(seq,*args)
TkcTagAccess#bind_remove	(seq)
TkcTagAccess#bindinfo	(seq=nil)
TkcTagAccess#cget	(option)
TkcTagAccess#configinfo	(key=nil)
TkcTagAccess#configure	(key,value=Tk::None)
TkcTagAccess#coords	(*args)
TkcTagAccess#current_configinfo	(key=nil)
TkcTagAccess#dchars	(first,last=Tk::None)
TkcTagAccess#deltag	(tag_to_del=Tk::None)
TkcTagAccess#dtag	(tag_to_del=Tk::None)
TkcTagAccess#find	
TkcTagAccess#focus	
TkcTagAccess#gettags	
TkcTagAccess#icursor	(index)
TkcTagAccess#index	(idx)
TkcTagAccess#insert	(beforethis,string)
TkcTagAccess#itemtype	
TkcTagAccess#list	
TkcTagAccess#lower	(belowthis=Tk::None)
TkcTagAccess#move	(xamount,yamount)
TkcTagAccess#raise	(abovethis=Tk::None)
TkcTagAccess#scale	(xorigin,yorigin,xscale,yscale)
TkcTagAccess#select_adjust	(index)
TkcTagAccess#select_from	(index)
TkcTagAccess#select_to	(index)
TkcTagAccess#|	(tag)
TkcTagAll.new	(parent)
TkcTagCurrent.new	(parent)
TkcTagString.new	(parent,name,mode=nil,*args)
TkcText.create	(canvas,*args)
TkcWindow.create	(canvas,*args)
Tkutil::CallbackSubst::Info.inspect	
Tracer#add_filter	(p=proc)
Tracer#get_line	(file,line)->String
Tracer#get_thread_no	->Integer
Tracer#off	
Tracer#on		{...}
Tracer#set_get_line_procs	(file,p=proc)
Tracer#stdout	->IO
Tracer#trace_func	(event,file,line,id,binding,klass,*)->object|nil
Tracer.add_filter	(proc)	{|event,file,line,id,binding,klass|....}
Tracer.new	
Tracer.off	
Tracer.on		{...}
Tracer.set_get_line_procs	(filename,proc)	(filename){|line|....}
Tracer.stdout	->object
Tracer.stdout=	(fp)
Tracer.verbose	->bool	?->bool
Tracer.verbose=	(flag)
Tracer.verbose?	->bool
TrueClass#&	(other)->bool
TrueClass#^	(other)->bool
TrueClass#to_s	->String
TrueClass#|	(other)->bool
UDPSocket#bind	(host,port)	(host,port)->Integer
UDPSocket#connect	(host,port)	(host,port)->Integer
UDPSocket#recvfrom_nonblock	(maxlen[,flags])
UDPSocket#send	(mesg,flags,dest_sockaddr=nil)->Integer	(mesg,flags,host,port)->Integer	(mesg,flags[,dest_sockaddr])	(mesg,flags,host,port)
UDPSocket.new	([socktype])
UDPSocket.open	([socktype])
UNIXServer#accept	
UNIXServer#accept_nonblock	
UNIXServer#listen	(backlog)
UNIXServer#sysaccept	
UNIXServer.new	(path)
UNIXServer.open	(path)
UNIXSocket#addr	
UNIXSocket#path	
UNIXSocket#peeraddr	
UNIXSocket#recv_io	([klass[,mode]])
UNIXSocket#recvfrom	(maxlen[,flags])
UNIXSocket#send_io	(io)
UNIXSocket.new	(path)
UNIXSocket.open	(path)
UNIXSocket.pair	([type[,protocol]])
UNIXSocket.socketpair	([type[,protocol]])
URI.decode	(str)->String
URI.encode	(str,unsafe=URI::UNSAFE)->String
URI.escape	(str,unsafe=URI::UNSAFE)->String
URI.extract	(str)->[String]	(str,schemes)->[String]	(str){|uri_str|...}	(str,schemes){|uri_str|...}
URI.join	(uri_str,*path)->object
URI.parse	(uri_str)->object
URI.regexp	->Regexp	(schemes)->Regexp
URI.split	(url)->[String|nil]
URI.unescape	(str)->String
URI::FTP#typecode	->String|nil
URI::FTP#typecode=	(t)
URI::FTP.build	(ary)->URI::FTP	(hash)->URI::FTP
URI::FTP.new	(scheme,userinfo,host,port,registry,path,opaque,query,fragment,arg_check=false)->URI::FTP
URI::FTP.new2	(user,password,host,port,path,typecode=nil,arg_check=true)->URI::FTP
URI::Generic#+	(rel)->URI::Generic
URI::Generic#-	(src)->URI::Generic
URI::Generic#==	(uri)->bool
URI::Generic#absolute	->bool	?->bool
URI::Generic#absolute?	->bool
URI::Generic#component	->[Symbol]
URI::Generic#default_port	->Integer|nil
URI::Generic#fragment	->String|nil
URI::Generic#fragment=	(s)
URI::Generic#hierarchical?	->bool
URI::Generic#host	->String|nil
URI::Generic#host=	(s)
URI::Generic#merge	(rel)->URI::Generic
URI::Generic#merge!	(rel)->self
URI::Generic#normalize	->URI::Generic	!
URI::Generic#normalize!	
URI::Generic#opaque	->String|nil
URI::Generic#opaque=	(s)
URI::Generic#password	->String|nil
URI::Generic#password=	(s)
URI::Generic#path	->String|nil
URI::Generic#path=	(s)
URI::Generic#port	->String|nil
URI::Generic#port=	(s)
URI::Generic#query	->String|nil
URI::Generic#query=	(s)
URI::Generic#registry	->String|nil
URI::Generic#registry=	(s)
URI::Generic#relative?	->bool
URI::Generic#route_from	(src)->URI::Generic
URI::Generic#route_to	(dst)->URI::Generic
URI::Generic#scheme	->String|nil
URI::Generic#scheme=	(s)
URI::Generic#select	(*components)->[String]
URI::Generic#to_s	->String
URI::Generic#to_str	->String
URI::Generic#user	->String|nil
URI::Generic#user=	(s)
URI::Generic#userinfo	->String|nil
URI::Generic#userinfo=	(s)
URI::Generic.build	(ary)->URI::Generic	(hash)->URI::Generic
URI::Generic.build2	(ary)->URI::Generic	(hash)->URI::Generic
URI::Generic.component	->[Symbol]
URI::Generic.default_port	->Integer|nil
URI::Generic.new	(scheme,userinfo,host,port,registry,path,opaque,query,fragment,arg_check=false)->URI::Generic
URI::Generic.use_registry	->bool
URI::HTTP#request_uri	->String
URI::HTTP.build	(ary)->URI::HTTP	(hash)->URI::HTTP
URI::HTTP.new	(scheme,userinfo,host,port,registry,path,opaque,query,fragment,arg_check=false)->URI::HTTP
URI::LDAP#attributes	->String
URI::LDAP#attributes=	(s)
URI::LDAP#dn	->String
URI::LDAP#dn=	(s)
URI::LDAP#extensions	->String
URI::LDAP#extensions=	(s)
URI::LDAP#filter	->String
URI::LDAP#filter=	(s)
URI::LDAP#scope	->String
URI::LDAP#scope=	(s)
URI::LDAP.build	(ary)->URI::LDAP	(hash)->URI::LDAP
URI::LDAP.new	(scheme,userinfo,host,port,registry,path,opaque,query,fragment,arg_check=false)->URI::LDAP
URI::MailTo#headers	->[[String]]
URI::MailTo#headers=	(s)
URI::MailTo#to	->String
URI::MailTo#to=	(s)
URI::MailTo#to_mailtext	->String
URI::MailTo#to_rfc822text	->String
URI::MailTo.build	(ary)->URI::MailTo	(hash)->URI::MailTo
URI::MailTo.new	(scheme,userinfo,host,port,registry,path,opaque,query,fragment,arg_check=false)->URI::MailTo
UnboundMethod#==	(other)->bool
UnboundMethod#===	(other)->bool
UnboundMethod#arity	->Integer
UnboundMethod#bind	(obj)->Method
UnboundMethod#eql?	(other)->bool
UnboundMethod#equal?	(other)->bool
UnboundMethod#hash	->Integer
UnboundMethod#name	->String	->Symbol
UnboundMethod#owner	->Class|Module
Vector#*	(a)->Vector	(m)->Matrix
Vector#+	(v)->Vector
Vector#-	(v)->Vector
Vector#==	(v)->bool
Vector#[]	(i)->object|nil
Vector#clone	()->Vector
Vector#coerce	(other)->Array
Vector#collect	{|x|...}->Vector
Vector#collect2	(v){|x,y|...}->Array
Vector#compare_by	(elements)->bool
Vector#component	(i)->object|nil
Vector#covector	->Matrix
Vector#each2	(v){|x,y|...}
Vector#element	(i)->object|nil
Vector#elements_to_f	->Vector
Vector#elements_to_i	->Vector
Vector#elements_to_r	->Vector
Vector#eqn?	(v)->bool
Vector#hash	()->Fixnum
Vector#init_elements	(array,copy)->Array
Vector#inner_product	(v)->Float
Vector#inspect	()->String
Vector#map	{|x|...}->Vector
Vector#map2	(v){|x,y|...}->Vector
Vector#r	->Float
Vector#size	()->Fixnum
Vector#to_a	->Array
Vector#to_s	->String
Vector.[]	(*a)->Vector
Vector.elements	(a,copy=true)->Vector
WEBrick::BasicLog#<<	(obj)
WEBrick::BasicLog#close	
WEBrick::BasicLog#debug	(msg)
WEBrick::BasicLog#debug?	->bool
WEBrick::BasicLog#error	(msg)
WEBrick::BasicLog#error?	->bool
WEBrick::BasicLog#fatal	(msg)
WEBrick::BasicLog#fatal?	->bool
WEBrick::BasicLog#info	(msg)
WEBrick::BasicLog#info?	->bool
WEBrick::BasicLog#level	->Integer
WEBrick::BasicLog#level=	(lv)
WEBrick::BasicLog#log	(level,msg)
WEBrick::BasicLog#warn	(msg)
WEBrick::BasicLog#warn?	->bool
WEBrick::BasicLog.new	(log_file=nil,level=WEBrick::BasicLog::INFO)->WEBrick::BasicLog
WEBrick::CGI#[]	(key)->object
WEBrick::CGI#config	->Hash
WEBrick::CGI#do_DELETE	(req,res)
WEBrick::CGI#do_GET	(req,res)
WEBrick::CGI#do_HEAD	(req,res)
WEBrick::CGI#do_OPTIONS	(req,res)
WEBrick::CGI#do_POST	(req,res)
WEBrick::CGI#do_PUT	(req,res)
WEBrick::CGI#logger	->WEBrick::BasicLog
WEBrick::CGI#service	(req,res)
WEBrick::CGI#start	(env=ENV,stdin=$stdin,stdout=$stdout)
WEBrick::CGI.new	(config={},*options)->WEBrick::CGI
WEBrick::Cookie#comment	->String
WEBrick::Cookie#comment=	(value)
WEBrick::Cookie#domain	->String
WEBrick::Cookie#domain=	(value)
WEBrick::Cookie#expires	->Time
WEBrick::Cookie#expires=	(value)
WEBrick::Cookie#max_age	->Integer
WEBrick::Cookie#max_age=	(value)
WEBrick::Cookie#name	->String
WEBrick::Cookie#path	->String
WEBrick::Cookie#path=	(value)
WEBrick::Cookie#secure	->bool
WEBrick::Cookie#secure=	(value)
WEBrick::Cookie#to_s	->String
WEBrick::Cookie#value	->String
WEBrick::Cookie#value=	(str)
WEBrick::Cookie#version	->Integer
WEBrick::Cookie#version=	(value)
WEBrick::Cookie.new	(name,value)->WEBrick::Cookie
WEBrick::Cookie.parse	(str)->[WEBrick::Cookie]
WEBrick::Cookie.parse_set_cookie	(str)->WEBrick::Cookie
WEBrick::Cookie.parse_set_cookies	(str)->[WEBrick::Cookie]
WEBrick::GenericServer#[]	(key)->object
WEBrick::GenericServer#config	->Hash
WEBrick::GenericServer#listen	(address,port)->[TCPServer]
WEBrick::GenericServer#listeners	->[TCPServer]
WEBrick::GenericServer#logger	->WEBrick::Log
WEBrick::GenericServer#run	(sock)
WEBrick::GenericServer#shutdown	
WEBrick::GenericServer#ssl_context	
WEBrick::GenericServer#start		{|soc|...}
WEBrick::GenericServer#status	->Symbol
WEBrick::GenericServer#stop	
WEBrick::GenericServer#tokens	->SizedQueue
WEBrick::GenericServer.new	(config={},default=WEBrick::Config::General)	(config={},default=WEBrick::Config::General)
WEBrick::HTMLUtils.escape	(string)->String
WEBrick::HTTPAuth.basic_auth	(req,res,realm){|user,pass|...}
WEBrick::HTTPAuth.proxy_basic_auth	(req,res,realm){|user,pass|...}
WEBrick::HTTPAuth::Authenticator#logger	
WEBrick::HTTPAuth::Authenticator#realm	
WEBrick::HTTPAuth::Authenticator#userdb	
WEBrick::HTTPAuth::BasicAuth#authenticate	(req,res)
WEBrick::HTTPAuth::BasicAuth#challenge	(req,res)
WEBrick::HTTPAuth::BasicAuth#logger	
WEBrick::HTTPAuth::BasicAuth#realm	
WEBrick::HTTPAuth::BasicAuth#userdb	
WEBrick::HTTPAuth::BasicAuth.make_passwd	(realm,user,pass)
WEBrick::HTTPAuth::BasicAuth.new	(config,default=Config::BasicAuth)
WEBrick::HTTPAuth::DigestAuth#algorithm	
WEBrick::HTTPAuth::DigestAuth#authenticate	(req,res)
WEBrick::HTTPAuth::DigestAuth#challenge	(req,res,stale=false)
WEBrick::HTTPAuth::DigestAuth#logger	
WEBrick::HTTPAuth::DigestAuth#qop	
WEBrick::HTTPAuth::DigestAuth#realm	
WEBrick::HTTPAuth::DigestAuth#userdb	
WEBrick::HTTPAuth::DigestAuth.make_passwd	(realm,user,pass)
WEBrick::HTTPAuth::DigestAuth.new	(config,default=Config::DigestAuth)
WEBrick::HTTPAuth::Htdigest#delete_passwd	(realm,user)
WEBrick::HTTPAuth::Htdigest#each	{|user,realm,pass|...}
WEBrick::HTTPAuth::Htdigest#flush	(path=nil)
WEBrick::HTTPAuth::Htdigest#get_passwd	(realm,user,reload_db)
WEBrick::HTTPAuth::Htdigest#reload	
WEBrick::HTTPAuth::Htdigest#set_passwd	(realm,user,pass)
WEBrick::HTTPAuth::Htdigest.new	(path)
WEBrick::HTTPAuth::Htgroup#add	(group,members)
WEBrick::HTTPAuth::Htgroup#flush	(output=nil)
WEBrick::HTTPAuth::Htgroup#members	(group)
WEBrick::HTTPAuth::Htgroup#reload	
WEBrick::HTTPAuth::Htgroup.new	(path)
WEBrick::HTTPAuth::Htpasswd#delete_passwd	(realm,user)
WEBrick::HTTPAuth::Htpasswd#each	{|user,pass|...}
WEBrick::HTTPAuth::Htpasswd#flush	(path=nil)
WEBrick::HTTPAuth::Htpasswd#get_passwd	(realm,user,reload_db)
WEBrick::HTTPAuth::Htpasswd#reload	
WEBrick::HTTPAuth::Htpasswd#set_passwd	(realm,user,pass)
WEBrick::HTTPAuth::Htpasswd.new	(path)
WEBrick::HTTPAuth::ProxyDigestAuth#check_uri	(req,auth_req)
WEBrick::HTTPAuth::UserDB#auth_type	
WEBrick::HTTPAuth::UserDB#auth_type=	(type)
WEBrick::HTTPAuth::UserDB#get_passwd	(realm,user,reload_db=false)
WEBrick::HTTPAuth::UserDB#make_passwd	(realm,user,pass)
WEBrick::HTTPAuth::UserDB#set_passwd	(realm,user,pass)
WEBrick::HTTPProxyServer.new	(config)->WEBrick::HTTPProxyServer
WEBrick::HTTPRequest#[]	(header_name)->String
WEBrick::HTTPRequest#accept	->[String]
WEBrick::HTTPRequest#accept_charset	->[String]
WEBrick::HTTPRequest#accept_encoding	->[String]
WEBrick::HTTPRequest#accept_language	->[String]
WEBrick::HTTPRequest#addr	->Array
WEBrick::HTTPRequest#attributes	->Hash
WEBrick::HTTPRequest#body	->String|nil	{|chunk|...}->String|nil
WEBrick::HTTPRequest#cipher	
WEBrick::HTTPRequest#client_cert	
WEBrick::HTTPRequest#content_length	->Integer
WEBrick::HTTPRequest#content_type	->String|nil
WEBrick::HTTPRequest#cookies	->[WEBrick::Cookie]
WEBrick::HTTPRequest#each	{|key,val|...}
WEBrick::HTTPRequest#fixup	
WEBrick::HTTPRequest#header	->Hash
WEBrick::HTTPRequest#host	->String
WEBrick::HTTPRequest#http_version	->WEBrick::HTTPVersion
WEBrick::HTTPRequest#keep_alive	->bool	?->bool
WEBrick::HTTPRequest#keep_alive?	->bool
WEBrick::HTTPRequest#meta_vars	->Hash
WEBrick::HTTPRequest#parse	(socket=nil)	(socket=nil)
WEBrick::HTTPRequest#parse_uri	(str,scheme="http")
WEBrick::HTTPRequest#path	->String
WEBrick::HTTPRequest#path_info	->String
WEBrick::HTTPRequest#path_info=	(value)
WEBrick::HTTPRequest#peeraddr	->Array
WEBrick::HTTPRequest#port	->String
WEBrick::HTTPRequest#query	->Hash
WEBrick::HTTPRequest#query_string	->String
WEBrick::HTTPRequest#query_string=	(value)
WEBrick::HTTPRequest#raw_header	
WEBrick::HTTPRequest#request_line	
WEBrick::HTTPRequest#request_method	->String
WEBrick::HTTPRequest#request_time	->Time
WEBrick::HTTPRequest#request_uri	
WEBrick::HTTPRequest#script_name	->String
WEBrick::HTTPRequest#script_name=	(value)
WEBrick::HTTPRequest#server_cert	
WEBrick::HTTPRequest#to_s	->String
WEBrick::HTTPRequest#unparsed_uri	->String
WEBrick::HTTPRequest#user	->String
WEBrick::HTTPRequest#user=	(value)
WEBrick::HTTPRequest.new	(config)
WEBrick::HTTPResponse#[]	(field)->String
WEBrick::HTTPResponse#[]=	(field,val)
WEBrick::HTTPResponse#body	->String|IO
WEBrick::HTTPResponse#body=	(val)
WEBrick::HTTPResponse#chunked=	(flag)
WEBrick::HTTPResponse#chunked?	->bool
WEBrick::HTTPResponse#config	->Hash
WEBrick::HTTPResponse#content_length	->Integer|nil
WEBrick::HTTPResponse#content_length=	(len)
WEBrick::HTTPResponse#content_type	->String|nil
WEBrick::HTTPResponse#content_type=	(val)
WEBrick::HTTPResponse#cookies	->[WEBrick::Cookie]
WEBrick::HTTPResponse#each	{|key,val|...}
WEBrick::HTTPResponse#filename	->String|nil
WEBrick::HTTPResponse#filename=	(file)
WEBrick::HTTPResponse#header	->Hash
WEBrick::HTTPResponse#http_version	->WEBrick::HTTPVersion
WEBrick::HTTPResponse#keep_alive	?->bool	->bool
WEBrick::HTTPResponse#keep_alive=	(flag)
WEBrick::HTTPResponse#keep_alive?	->bool
WEBrick::HTTPResponse#reason_phrase	->String|nil
WEBrick::HTTPResponse#reason_phrase=	(val)
WEBrick::HTTPResponse#request_http_version	->WEBrick::HTTPVersion
WEBrick::HTTPResponse#request_http_version=	(ver)
WEBrick::HTTPResponse#request_method	->String|nil
WEBrick::HTTPResponse#request_method=	(method)
WEBrick::HTTPResponse#request_uri	->URI|nil
WEBrick::HTTPResponse#request_uri=	(uri)
WEBrick::HTTPResponse#sent_size	->Integer
WEBrick::HTTPResponse#set_error	(status,backtrace=false)
WEBrick::HTTPResponse#set_redirect	(status,url)
WEBrick::HTTPResponse#status	->Integer
WEBrick::HTTPResponse#status=	(status)
WEBrick::HTTPResponse#status_line	->String
WEBrick::HTTPResponse#to_s	->String
WEBrick::HTTPResponse.new	(config)
WEBrick::HTTPServer#mount	(dir,servlet,*options)
WEBrick::HTTPServer#mount_proc	(dir,proc)	(dir){|req,res|...}
WEBrick::HTTPServer#umount	(dir)
WEBrick::HTTPServer#unmount	(dir)
WEBrick::HTTPServer#virtual_host	(server)
WEBrick::HTTPServer.new	(config={},default=Config::HTTP)->WEBrick::HTTPServer
WEBrick::HTTPServlet::AbstractServlet#do_DELETE	(req,res)
WEBrick::HTTPServlet::AbstractServlet#do_GET	(req,res)
WEBrick::HTTPServlet::AbstractServlet#do_HEAD	(req,res)
WEBrick::HTTPServlet::AbstractServlet#do_OPTIONS	(req,res)
WEBrick::HTTPServlet::AbstractServlet#do_POST	(req,res)
WEBrick::HTTPServlet::AbstractServlet#do_PUT	(req,res)
WEBrick::HTTPServlet::AbstractServlet#service	(req,res)
WEBrick::HTTPServlet::AbstractServlet.get_instance	(server,*options)->WEBrick::HTTPServlet::AbstractServlet
WEBrick::HTTPServlet::AbstractServlet.new	(server,*options)->WEBrick::HTTPServlet::AbstractServlet
WEBrick::HTTPServlet::CGIHandler#do_GET	(req,res)
WEBrick::HTTPServlet::CGIHandler#do_POST	(req,res)
WEBrick::HTTPServlet::CGIHandler.new	(server,name)
WEBrick::HTTPServlet::DefaultFileHandler#do_GET	(req,res)
WEBrick::HTTPServlet::DefaultFileHandler#make_partial_content	(req,res,filename,filesize)
WEBrick::HTTPServlet::DefaultFileHandler#not_modified?	(req,res,mtime,etag)
WEBrick::HTTPServlet::DefaultFileHandler#prepare_range	(range,filesize)
WEBrick::HTTPServlet::DefaultFileHandler.new	(server,local_path)
WEBrick::HTTPServlet::ERBHandler#do_GET	(req,res)
WEBrick::HTTPServlet::ERBHandler#do_POST	(req,res)
WEBrick::HTTPServlet::ERBHandler.new	(server,name)
WEBrick::HTTPServlet::FileHandler#do_GET	(req,res)
WEBrick::HTTPServlet::FileHandler#do_OPTIONS	(req,res)
WEBrick::HTTPServlet::FileHandler#do_POST	(req,res)
WEBrick::HTTPServlet::FileHandler#service	(req,res)
WEBrick::HTTPServlet::FileHandler.add_handler	(suffix,handler)
WEBrick::HTTPServlet::FileHandler.new	(server,root,options={},default=Config::FileHandler)
WEBrick::HTTPServlet::FileHandler.remove_handler	(suffix)
WEBrick::HTTPServlet::ProcHandler#do_GET	(req,res)
WEBrick::HTTPServlet::ProcHandler#do_POST	(req,res)
WEBrick::HTTPServlet::ProcHandler#get_instance	(server,*options)
WEBrick::HTTPServlet::ProcHandler.new	(proc)
WEBrick::HTTPStatus.[]	(code)->Class
WEBrick::HTTPStatus.client_error?	(code)->bool
WEBrick::HTTPStatus.error?	(code)->bool
WEBrick::HTTPStatus.info?	(code)->bool
WEBrick::HTTPStatus.reason_phrase	(code)->String
WEBrick::HTTPStatus.redirect?	(code)->bool
WEBrick::HTTPStatus.server_error?	(code)->bool
WEBrick::HTTPStatus.success?	(code)->bool
WEBrick::HTTPUtils.dequote	(str)
WEBrick::HTTPUtils.escape	(str)
WEBrick::HTTPUtils.escape8bit	(str)
WEBrick::HTTPUtils.escape_path	(str)
WEBrick::HTTPUtils.load_mime_types	(file)->Hash
WEBrick::HTTPUtils.mime_type	(filename,mime_tab)->String
WEBrick::HTTPUtils.parse_header	(raw)
WEBrick::HTTPUtils.parse_range_header	(ranges_specifier)
WEBrick::HTTPUtils.quote	(str)
WEBrick::HTTPUtils.split_header_value	(str)
WEBrick::HTTPUtils.unescape	(str)
WEBrick::HTTPUtils::FormData#<<	(str)->self
WEBrick::HTTPUtils::FormData#[]	(header)->String|nil
WEBrick::HTTPUtils::FormData#append_data	(data)->self
WEBrick::HTTPUtils::FormData#each_data	{|s|...}
WEBrick::HTTPUtils::FormData#filename	->String|nil
WEBrick::HTTPUtils::FormData#filename=	(value)
WEBrick::HTTPUtils::FormData#list	->Array
WEBrick::HTTPUtils::FormData#name	->String|nil
WEBrick::HTTPUtils::FormData#name=	(value)
WEBrick::HTTPUtils::FormData#to_ary	->Array
WEBrick::HTTPUtils::FormData#to_s	->String
WEBrick::HTTPUtils::FormData.new	(*args)->WEBrick::HTTPUtils::FormData
WEBrick::HTTPVersion#<=>	(other)->-1|0|1|nil
WEBrick::HTTPVersion#major	->Integer
WEBrick::HTTPVersion#major=	(n)
WEBrick::HTTPVersion#minor	->Integer
WEBrick::HTTPVersion#minor=	(n)
WEBrick::HTTPVersion#to_s	->String
WEBrick::HTTPVersion.convert	(version)->WEBrick::HTTPVersion
WEBrick::HTTPVersion.new	(version)->WEBrick::HTTPVersion
WEBrick::Log#time_format	->String
WEBrick::Log#time_format=	()
WEBrick::Utils.getservername	->String
WEBrick::Utils.random_string	(len)->String
WEBrick::Utils.set_close_on_exec	(io)
WEBrick::Utils.set_non_blocking	(io)
WEBrick::Utils.su	(user)
WIN32OLE#[]	(property)
WIN32OLE#[]=	(property,val)
WIN32OLE#_getproperty	(dispid,args,types)
WIN32OLE#_invoke	(dispid,args,types)
WIN32OLE#_setproperty	(dispid,args,types)
WIN32OLE#each	{|i|...}
WIN32OLE#invoke	(method,[arg1,...])->returnvalueofmethod.
WIN32OLE#method_missing	(id[,arg1,arg2,...])
WIN32OLE#ole_activex_initialize	->Qnil
WIN32OLE#ole_free	
WIN32OLE#ole_func_methods	
WIN32OLE#ole_get_methods	
WIN32OLE#ole_method_help	(method)	(method)
WIN32OLE#ole_methods	
WIN32OLE#ole_obj_help	
WIN32OLE#ole_put_methods	
WIN32OLE#ole_query_interface	(iid)->WIN32OLEobject
WIN32OLE#ole_type	
WIN32OLE#ole_typelib	->TheWIN32OLE_TYPELIBobject
WIN32OLE#setproperty	('property',[arg1,arg2,...]val)
WIN32OLE.codepage	
WIN32OLE.codepage=	(cp)
WIN32OLE.connect	(ole)->WIN32OLE
WIN32OLE.const_load	(ole,mod=WIN32OLE)
WIN32OLE.create_guid	->String
WIN32OLE.locale	->Integer
WIN32OLE.locale=	(lcid)
WIN32OLE.new	(server,[host])->WIN32OLEobject
WIN32OLE.ole_free	(aWIN32OLE)->number
WIN32OLE.ole_reference_count	(aWIN32OLE)->number
WIN32OLE.ole_show_help	(obj,helpcontext=nil)
WIN32OLE_EVENT#on_event	([event]){...}
WIN32OLE_EVENT#on_event_with_outargs	([event]){...}
WIN32OLE_EVENT#unadvice	
WIN32OLE_EVENT.message_loop	
WIN32OLE_EVENT.new	(ole,event)->WIN32OLE_EVENT
WIN32OLE_METHOD#dispid	
WIN32OLE_METHOD#event?	
WIN32OLE_METHOD#event_interface	
WIN32OLE_METHOD#helpcontext	
WIN32OLE_METHOD#helpfile	
WIN32OLE_METHOD#helpstring	
WIN32OLE_METHOD#invkind	
WIN32OLE_METHOD#invoke_kind	
WIN32OLE_METHOD#name	
WIN32OLE_METHOD#offset_vtbl	
WIN32OLE_METHOD#params	
WIN32OLE_METHOD#return_type	
WIN32OLE_METHOD#return_type_detail	
WIN32OLE_METHOD#return_vtype	
WIN32OLE_METHOD#size_opt_params	
WIN32OLE_METHOD#size_params	
WIN32OLE_METHOD#visible?	
WIN32OLE_METHOD.new	(ole_type,method)->WIN32OLE_METHODobject
WIN32OLE_PARAM#default	
WIN32OLE_PARAM#input?	
WIN32OLE_PARAM#name	
WIN32OLE_PARAM#ole_type	
WIN32OLE_PARAM#ole_type_detail	
WIN32OLE_PARAM#optional?	
WIN32OLE_PARAM#output?	
WIN32OLE_PARAM#retval?	
WIN32OLE_TYPE#guid	->GUID
WIN32OLE_TYPE#helpcontext	
WIN32OLE_TYPE#helpfile	
WIN32OLE_TYPE#helpstring	->String
WIN32OLE_TYPE#implemented_ole_types	
WIN32OLE_TYPE#major_version	
WIN32OLE_TYPE#minor_version	->Integer
WIN32OLE_TYPE#name	->String
WIN32OLE_TYPE#ole_methods	->[WIN32OLE_METHOD]
WIN32OLE_TYPE#ole_type	->Class
WIN32OLE_TYPE#ole_typelib	
WIN32OLE_TYPE#progid	->String
WIN32OLE_TYPE#src_type	->Class
WIN32OLE_TYPE#typekind	->Integer
WIN32OLE_TYPE#variables	
WIN32OLE_TYPE#visible	->bool
WIN32OLE_TYPE#visible?	->bool
WIN32OLE_TYPE.new	(typelib,ole_class)->WIN32OLE_TYPEobject
WIN32OLE_TYPE.ole_classes	(typelib)
WIN32OLE_TYPE.progids	
WIN32OLE_TYPE.typelibs	
WIN32OLE_TYPELIB#guid	->TheguidString.
WIN32OLE_TYPELIB#library_name	
WIN32OLE_TYPELIB#major_version	->Thetypelibrarymajorversion.
WIN32OLE_TYPELIB#minor_version	->Thetypelibraryminorversion.
WIN32OLE_TYPELIB#name	->Thetypelibraryname
WIN32OLE_TYPELIB#ole_classes	
WIN32OLE_TYPELIB#ole_types	->TheArrayofWIN32OLE_TYPEobjectincludedthetypelibrary.
WIN32OLE_TYPELIB#path	->Thetypelibraryfilepath.
WIN32OLE_TYPELIB#version	->Thetypelibraryversion.
WIN32OLE_TYPELIB#visible?	
WIN32OLE_TYPELIB.new	(typelib[,version1,version2])->WIN32OLE_TYPELIBobject
WIN32OLE_TYPELIB.typelibs	
WIN32OLE_VARIABLE#name	
WIN32OLE_VARIABLE#ole_type	
WIN32OLE_VARIABLE#ole_type_detail	
WIN32OLE_VARIABLE#value	
WIN32OLE_VARIABLE#variable_kind	
WIN32OLE_VARIABLE#varkind	
WIN32OLE_VARIABLE#visible?	
WIN32OLE_VARIANT#[]	(i,j,...)->WIN32OLE_VARIANT
WIN32OLE_VARIANT#[]=	(i,j,...,val)
WIN32OLE_VARIANT#value	->Object
WIN32OLE_VARIANT#value=	(val)
WIN32OLE_VARIANT#vartype	->Class
WIN32OLE_VARIANT.array	(ary,vt)
WIN32OLE_VARIANT.new	(val,vartype)->WIN32OLE_VARIANT
WeakRef#__getobj__	
WeakRef#weakref_alive?	
WeakRef.new	(obj)
Win32::Registry#[]	(name,wtype=nil)
Win32::Registry#[]=	(name,rtype,value=nil)
Win32::Registry#_dump	
Win32::Registry#close	
Win32::Registry#create	(subkey,desired=KEY_ALL_ACCESS,opt=REG_OPTION_RESERVED)
Win32::Registry#created?	
Win32::Registry#delete	(name)
Win32::Registry#delete_key	(name,recursive=false)
Win32::Registry#delete_value	(name)
Win32::Registry#descriptor_length	
Win32::Registry#disposition	
Win32::Registry#each	{|name,type,value|...}
Win32::Registry#each_key	{|subkey,wtime|...}
Win32::Registry#each_value	{|name,type,value|...}
Win32::Registry#flush	
Win32::Registry#hkey	
Win32::Registry#info	
Win32::Registry#inspect	
Win32::Registry#keyname	
Win32::Registry#keys	
Win32::Registry#max_key_length	
Win32::Registry#max_value_length	
Win32::Registry#max_value_name_length	
Win32::Registry#name	
Win32::Registry#num_keys	
Win32::Registry#num_values	
Win32::Registry#open	(subkey,desired=KEY_READ,opt=REG_OPTION_RESERVED)
Win32::Registry#open?	
Win32::Registry#opened?	
Win32::Registry#parent	
Win32::Registry#read	(name,*rtype)
Win32::Registry#read_bin	(name)
Win32::Registry#read_i	(name)
Win32::Registry#read_s	(name)
Win32::Registry#read_s_expand	(name)
Win32::Registry#to_s	
Win32::Registry#write	(name,type,data)
Win32::Registry#write_bin	(name,value)
Win32::Registry#write_i	(name,value)
Win32::Registry#write_s	(name,value)
Win32::Registry#wtime	
Win32::Registry.create	(key,subkey,desired=KEY_ALL_ACCESS,opt=REG_OPTION_RESERVED)	(key,subkey,desired=KEY_ALL_ACCESS,opt=REG_OPTION_RESERVED){|reg|...}
Win32::Registry.expand_environ	(str)
Win32::Registry.new	(key,subkey,desired=KEY_READ,opt=REG_OPTION_RESERVED)	(key,subkey,desired=KEY_READ,opt=REG_OPTION_RESERVED){|reg|...}
Win32::Registry.open	(key,subkey,desired=KEY_READ,opt=REG_OPTION_RESERVED)	(key,subkey,desired=KEY_READ,opt=REG_OPTION_RESERVED){|reg|...}
Win32::Registry.time2wtime	(time)
Win32::Registry.type2name	(type)
Win32::Registry.wtime2time	(wtime)
Win32::Registry::API.CloseKey	(hkey)
Win32::Registry::API.CreateKey	(hkey,name,opt,desired)
Win32::Registry::API.DeleteKey	(hkey,name)
Win32::Registry::API.DeleteValue	(hkey,name)
Win32::Registry::API.EnumKey	(hkey,index)
Win32::Registry::API.EnumValue	(hkey,index)
Win32::Registry::API.FlushKey	(hkey)
Win32::Registry::API.OpenKey	(hkey,name,opt,desired)
Win32::Registry::API.QueryInfoKey	(hkey)
Win32::Registry::API.QueryValue	(hkey,name)
Win32::Registry::API.SetValue	(hkey,name,type,data,size)
Win32::Registry::API.check	(result)
Win32::Registry::API.packdw	(dw)
Win32::Registry::API.packqw	(qw)
Win32::Registry::API.unpackdw	(dw)
Win32::Registry::API.unpackqw	(qw)
Win32::Registry::Error#code	
Win32::Registry::PredefinedKey#class	
Win32::Registry::PredefinedKey#close	
Win32::Registry::PredefinedKey.new	(hkey,keyname)
Win32::Resolv.get_hosts_path	->String|nil
Win32::Resolv.get_resolv_info	->[[String],[String]]
Win32API#Call	(*args)
Win32API#call	(*args)
Win32API.new	(dllname,func,import,export)
XMLRPC::BasicServer#add_handler	(name,signature=nil,help=nil){aBlock}	(prefix,obj)	(interface,obj)
XMLRPC::BasicServer#add_introspection	
XMLRPC::BasicServer#add_multicall	
XMLRPC::BasicServer#get_default_handler	
XMLRPC::BasicServer#get_service_hook	
XMLRPC::BasicServer#set_default_handler	(&handler)
XMLRPC::BasicServer#set_parser	(parser)
XMLRPC::BasicServer#set_service_hook	(&handler)
XMLRPC::BasicServer#set_writer	(writer)
XMLRPC::BasicServer.new	(class_delim=".")
XMLRPC::CGIServer#serve	
XMLRPC::CGIServer.new	(*a)
XMLRPC::Client#call	(method,*args)
XMLRPC::Client#call2	(method,*args)
XMLRPC::Client#call2_async	(...)
XMLRPC::Client#call_async	(...)
XMLRPC::Client#cookie	
XMLRPC::Client#cookie=	()
XMLRPC::Client#http_header_extra	
XMLRPC::Client#http_header_extra=	()
XMLRPC::Client#http_last_response	
XMLRPC::Client#multicall	(*methods)
XMLRPC::Client#multicall2	(*methods)
XMLRPC::Client#multicall2_async	(...)
XMLRPC::Client#multicall_async	(...)
XMLRPC::Client#password	
XMLRPC::Client#password=	()
XMLRPC::Client#proxy	(prefix,*args)
XMLRPC::Client#proxy2	(prefix,*args)
XMLRPC::Client#proxy2_async	(...)
XMLRPC::Client#proxy_async	(...)
XMLRPC::Client#set_parser	(parser)
XMLRPC::Client#set_writer	(writer)
XMLRPC::Client#timeout	
XMLRPC::Client#timeout=	()
XMLRPC::Client#user	
XMLRPC::Client#user=	()
XMLRPC::Client.new	(host=nil,path=nil,port=nil,proxy_host=nil,proxy_port=nil,user=nil,password=nil,use_ssl=false,timeout=nil)
XMLRPC::Client.new2	(uri,proxy=nil,timeout=nil)
XMLRPC::Client.new3	(hash={})
XMLRPC::Client.new_from_hash	(hash={})
XMLRPC::Client.new_from_uri	(uri,proxy=nil,timeout=nil)
XMLRPC::Client::Proxy.new	(server,prefix,args=[],meth=:call,delim=".")
XMLRPC::DateTime#day	
XMLRPC::DateTime#day=	()
XMLRPC::DateTime#hour	
XMLRPC::DateTime#hour=	()
XMLRPC::DateTime#min	
XMLRPC::DateTime#min=	()
XMLRPC::DateTime#mon	
XMLRPC::DateTime#mon=	()
XMLRPC::DateTime#month	
XMLRPC::DateTime#month=	()
XMLRPC::DateTime#sec	
XMLRPC::DateTime#sec=	()
XMLRPC::DateTime#to_a	
XMLRPC::DateTime#to_date	
XMLRPC::DateTime#to_time	
XMLRPC::DateTime#year	
XMLRPC::DateTime#year=	()
XMLRPC::DateTime.new	(year,month,day,hour,min,sec)
XMLRPC::ModRubyServer#serve	
XMLRPC::ModRubyServer.new	(*args)
XMLRPC::Server#serve	
XMLRPC::Server#shutdown	
XMLRPC::Server.new	(port=8080,host="127.0.0.1",maxConnections=4,stdlog=$stdout,audit=true,debug=true,*a)
XMLRPC::WEBrickServlet#get_valid_ip	
XMLRPC::WEBrickServlet#set_valid_ip	(*ip_addr)
XMP#puts	
XMP.new	
YAML.add_builtin_type	(type_re){|type,val|...}
YAML.add_domain_type	(domain,type_re){|type,val|...}
YAML.add_private_type	(type_re){|type,val|...}
YAML.add_ruby_type	(type_re){|type,val|...}
YAML.detect_implicit	(val)
YAML.dump	(obj,io=nil)
YAML.dump_stream	(*objs)
YAML.each_document	(io){|obj|...}
YAML.each_node	(io){|obj|...}
YAML.load	(io)	(str)
YAML.load_documents	(io){|obj|...}
YAML.load_file	(file)
YAML.load_stream	(io)
YAML.object_maker	(obj_class,val)
YAML.parse	(io)
YAML.parse_documents	(io){|obj|...}
YAML.parse_file	(file_path)
YAML.quick_emit	(oid,opts={}){|obj|...}
YAML.read_type_class	(type,obj_class)
YAML.tagurize	(val)
YAML.transfer	
YAML.try_implicit	(obj)
YAML::BaseNode#[]	(*key)
YAML::BaseNode#at	(segment)
YAML::BaseNode#children	
YAML::BaseNode#children_with_index	
YAML::BaseNode#emit	
YAML::BaseNode#match_path	(ypath_str)
YAML::BaseNode#match_segment	(ypath,depth)
YAML::BaseNode#search	(ypath_str)
YAML::BaseNode#select	(ypath_str)
YAML::BaseNode#select!	(ypath_str)
YAML::Store#[]	(name)->object
YAML::Store#[]=	(name,value)
YAML::Store#abort	
YAML::Store#commit	
YAML::Store#delete	(name)->object|nil
YAML::Store#fetch	(name,default=PStore::Error)->object
YAML::Store#path	->String
YAML::Store#root?	(name)->bool
YAML::Store#roots	->Array
YAML::Store#transaction	(read_only=false)
YAML::Store.new	(*options)
YAML::Stream#[]	(i)
YAML::Stream#add	(doc)
YAML::Stream#documents	
YAML::Stream#edit	(doc_num,doc)
YAML::Stream#emit	(io=nil)
YAML::Stream#options	
YAML::Stream.new	(opts={})
YAML::YPath#flags	->bool
YAML::YPath#flags=	(val)
YAML::YPath#predicates	->String
YAML::YPath#predicates=	(val)
YAML::YPath#segments	->String
YAML::YPath#segments=	(val)
YAML::YPath.each_path	(str){|YPath.new(path)|...}->object
YAML::YPath.new	(str)->YAML::YPath
YAML::YamlNode#anchor	
YAML::YamlNode#anchor=	(val)
YAML::YamlNode#kind	
YAML::YamlNode#kind=	(val)
YAML::YamlNode#transform	
YAML::YamlNode#transform=	(val)
YAML::YamlNode#type_id	
YAML::YamlNode#type_id=	(val)
YAML::YamlNode#value	
YAML::YamlNode#value=	(val)
YAML::YamlNode.new	(type,val)
Zlib.adler32	(string=nil,adler=nil)->Integer
Zlib.crc32	(string=nil,crc=nil)->Integer
Zlib.crc_table	->Array
Zlib.zlib_version	->String
Zlib::Deflate#<<	(string)->self
Zlib::Deflate#deflate	(string,flush=Zlib::NO_FLUSH)->String
Zlib::Deflate#finish	->String
Zlib::Deflate#flush	(flush=Zlib::SYNC_FLUSH)->String
Zlib::Deflate#params	(level,strategy)
Zlib::Deflate#set_dictionary	(string)->String
Zlib::Deflate.deflate	(string,level=Zlib::DEFAULT_COMPRESSION)->String
Zlib::Deflate.new	(level=Zlib::DEFAULT_COMPRESSION,windowBits=Zlib::MAX_WBITS,memlevel=Zlib::DEF_MEM_LEVEL,strategy=Zlib::DEFAULT_STRATEGY)->Zlib::Deflate
Zlib::GzipFile#close	->IO
Zlib::GzipFile#closed?	->bool
Zlib::GzipFile#comment	->String|nil
Zlib::GzipFile#crc	->Integer
Zlib::GzipFile#finish	->IO
Zlib::GzipFile#level	->Integer
Zlib::GzipFile#mtime	->Time
Zlib::GzipFile#orig_name	->String|nil
Zlib::GzipFile#os_code	->Integer
Zlib::GzipFile#sync	->bool
Zlib::GzipFile#sync=	(flag)
Zlib::GzipFile#to_io	->IO
Zlib::GzipFile.new	(*args)
Zlib::GzipFile.open	(*args){|gz|...}
Zlib::GzipFile.wrap	(*args){|gz|...}
Zlib::GzipReader#each	(rs=$/){|line|...}->self	(rs=$/)->Enumerator
Zlib::GzipReader#each_byte	{|byte|...}	->Enumerator
Zlib::GzipReader#each_line	(rs=$/){|line|...}->self	(rs=$/)->Enumerator
Zlib::GzipReader#eof	->bool	?->bool
Zlib::GzipReader#eof?	->bool
Zlib::GzipReader#getc	->Fixnum|nil
Zlib::GzipReader#gets	(rs=$/)->String|nil
Zlib::GzipReader#lineno	->Fixnum|Bignum
Zlib::GzipReader#lineno=	(num)
Zlib::GzipReader#pos	->Fixnum
Zlib::GzipReader#read	(length=nil)->String|nil
Zlib::GzipReader#readchar	->Fixnum
Zlib::GzipReader#readline	(rs=$/)->String
Zlib::GzipReader#readlines	(rs=$/)->Array
Zlib::GzipReader#readpartial	(maxlen,outbuf=nil)->String
Zlib::GzipReader#rewind	->0
Zlib::GzipReader#tell	->Fixnum
Zlib::GzipReader#ungetc	(char)
Zlib::GzipReader#unused	->String|nil
Zlib::GzipReader.new	(io)->Zlib::GzipReader
Zlib::GzipReader.open	(filename)->Zlib::GzipReader	(filename){|gz|...}->object
Zlib::GzipReader.wrap	(io)->Zlib::GzipReader	(io){|gz|...}->object
Zlib::GzipWriter#<<	(str)->self
Zlib::GzipWriter#close	->File
Zlib::GzipWriter#comment=	(string)
Zlib::GzipWriter#finish	->File
Zlib::GzipWriter#flush	(flush=Zlib::SYNC_FLUSH)->self
Zlib::GzipWriter#mtime=	(time)
Zlib::GzipWriter#orig_name=	(filename)
Zlib::GzipWriter#pos	->Fixnum
Zlib::GzipWriter#print	(*str)
Zlib::GzipWriter#printf	(format,*args)
Zlib::GzipWriter#putc	(ch)->object
Zlib::GzipWriter#puts	(*str)
Zlib::GzipWriter#tell	->Fixnum
Zlib::GzipWriter#write	(str)->Integer
Zlib::GzipWriter.new	(io,level=Zlib::DEFAULT_COMPRESSION,strategy=Zlib::DEFAULT_STRATEGY)->Zlib::GzipWriter
Zlib::GzipWriter.open	(filename,level=Zlib::DEFAULT_COMPRESSION,strategy=Zlib::DEFAULT_STRATEGY)->Zlib::GzipWriter	(filename,level=Zlib::DEFAULT_COMPRESSION,strategy=Zlib::DEFAULT_STRATEGY){|gz|...}->object
Zlib::GzipWriter.wrap	(io,level=Zlib::DEFAULT_COMPRESSION,strategy=Zlib::DEFAULT_STRATEGY)->Zlib::GzipWriter	(io,level=Zlib::DEFAULT_COMPRESSION,strategy=Zlib::DEFAULT_STRATEGY){|gz|...}->object
Zlib::Inflate#<<	(string)->self
Zlib::Inflate#finish	->String
Zlib::Inflate#inflate	(string)->String
Zlib::Inflate#set_dictionary	(string)->String
Zlib::Inflate#sync	(string)->bool
Zlib::Inflate#sync_point?	->bool
Zlib::Inflate.inflate	(string)->String
Zlib::Inflate.new	(window_bits=Zlib::MAX_WBITS)->Zlib::Inflate
Zlib::ZStream#adler	->Integer
Zlib::ZStream#avail_in	->Integer
Zlib::ZStream#avail_out	->Integer
Zlib::ZStream#avail_out=	(size)
Zlib::ZStream#close	
Zlib::ZStream#closed?	->bool
Zlib::ZStream#data_type	->Fixnum
Zlib::ZStream#end	
Zlib::ZStream#ended?	->bool
Zlib::ZStream#finish	->String
Zlib::ZStream#finished?	->bool
Zlib::ZStream#flush_next_in	->String
Zlib::ZStream#flush_next_out	->String
Zlib::ZStream#reset	
Zlib::ZStream#stream_end?	->bool
Zlib::ZStream#total_in	->Integer
Zlib::ZStream#total_out	->Integer
Zlib::ZStream.new	
